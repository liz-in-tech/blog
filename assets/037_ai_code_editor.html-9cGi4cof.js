import{_ as s}from"./037_void_sourcecode--VTRb0hS.js";import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as p,f as e,a as n,b as o,e as c}from"./app-PDpchPSG.js";const l={},i=n("h1",{id:"ai-code-editor-source-code-exploration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ai-code-editor-source-code-exploration","aria-hidden":"true"},"#"),o(" AI Code Editor Source Code Exploration")],-1),u=n("ul",null,[n("li",null,"Introduction to Void AI Code Editor"),n("li",null,"Overall Source Code Architecture"),n("li",null,"Key Functional Source Code Details")],-1),r=c('<h2 id="_1-introduction-to-void-ai-code-editor" tabindex="-1"><a class="header-anchor" href="#_1-introduction-to-void-ai-code-editor" aria-hidden="true">#</a> 1. Introduction to Void AI Code Editor</h2><ul><li>Github: https://github.com/voideditor/void</li><li>Official Website: https://voideditor.com/</li><li>Features: <ul><li>Open source</li><li>AI Code Editor</li><li>Cursor Alternative</li><li>Write code with the best AI tools, use any model, and retain full control over your data.</li></ul></li><li>Main Capabilities: <ul><li>Autocomplete (Tab)</li><li>Edit Inline (CMD + K)</li><li>Chat <ul><li>Chat Modes: <ul><li>Chat: Normal chat</li><li>Gather: Reads files, but cannot edit</li><li>Agent: Edits files and uses tools</li></ul></li></ul></li><li>Add Context <ul><li>Mention files or folders in the chat box using @</li><li>CMD + L <ul><li>Select a part of a document to add that section to the chat</li><li>If nothing is selected, add the entire document to the chat</li></ul></li></ul></li><li>.voidrules File <ul><li>Similar to Cursor&#39;s .cursorrules, defines code style, framework restrictions, and other rules to ensure AI output adheres to project standards</li></ul></li></ul></li></ul><h2 id="_2-overall-source-code-architecture" tabindex="-1"><a class="header-anchor" href="#_2-overall-source-code-architecture" aria-hidden="true">#</a> 2. Overall Source Code Architecture</h2><figure><img src="'+s+`" alt="Source Code Architecture" tabindex="0" loading="lazy"><figcaption>Source Code Architecture</figcaption></figure><h2 id="_3-key-functional-source-code-details" tabindex="-1"><a class="header-anchor" href="#_3-key-functional-source-code-details" aria-hidden="true">#</a> 3. Key Functional Source Code Details</h2><h3 id="_3-1-sidebarchat" tabindex="-1"><a class="header-anchor" href="#_3-1-sidebarchat" aria-hidden="true">#</a> 3.1. SideBarChat</h3><p>src/vs/workbench/contrib/void/browser/react/src/sidebar-tsx/SidebarChat.tsx</p><h4 id="_3-1-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-1-1-main-functionality" aria-hidden="true">#</a> 3.1.1. Main Functionality</h4><ul><li>Dynamically switches between the &quot;Landing Page&quot; and the &quot;Chat Page&quot; based on the number of messages and thread ID (if the current thread has no messages, it shows the landing page). <ul><li>Landing Page (landingPageContent, before starting a conversation) <ul><li>landingPageInput (input box) <ul><li>inputChatArea (input area) <ul><li>onSubmit (submit)</li><li>onAbort (cancel)</li></ul></li></ul></li><li>PastThreadsList (list of previous conversations) or initiallySuggestedPromptsHTML (suggested prompts) <ul><li>If there is no &quot;PastThreadsList&quot;, display the &quot;Suggested Prompts&quot; instead</li></ul></li></ul></li><li>Chat Page (threadPageContent, after the user starts a conversation: full chat interface supporting multi-turn dialogue, tool invocation, code editing, etc.) <ul><li>messagesHTML (list of messages in the current conversation) <ul><li>previousMessagesHTML <ul><li>Iterates through all messages in the current thread, rendering each as a ChatBubble component</li><li>ChatBubble selects the appropriate message type component based on the message type: <ul><li>Message Types: <ul><li>user: <code>&lt;UserMessageComponent /&gt;</code></li><li>assistant: <code>&lt;AssistantMessageComponent /&gt;</code></li><li>tool: <ul><li><code>&lt;ToolResultWrapper /&gt;</code><ul><li>BuiltInTool (built-in tools)</li><li>MCPTool (MCP tools)</li></ul></li><li><code>&lt;ToolRequestAcceptRejectButtons /&gt;</code></li></ul></li><li>interrupted_streaming_tool: <code>&lt;CanceledTool /&gt;</code></li><li>checkpoint: <code>&lt;Checkpoint /&gt;</code></li></ul></li></ul></li></ul></li><li>currStreamingMessageHTML <ul><li>A ChatBubble of type assistant</li></ul></li><li>generatingTool <ul><li>BuiltInTool (built-in tools)</li><li>MCPTool (MCP tools)</li></ul></li><li>loading indicator <ul><li>A loading icon</li></ul></li></ul></li><li>threadPageInput (input box) <ul><li>CommandBarInChat (file change list)</li><li>inputChatArea (input area) <ul><li>onSubmit (submit)</li><li>onAbort (cancel)</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="_3-1-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-1-2-related-code" aria-hidden="true">#</a> 3.1.2. Related Code</h4><p>SidebarChat</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">SidebarChat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Fragment key<span class="token operator">=</span><span class="token punctuation">{</span>threadId<span class="token punctuation">}</span> <span class="token comment">// force rerender when change thread</span>
    <span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>isLandingPage <span class="token operator">?</span>
        landingPageContent
        <span class="token operator">:</span> threadPageContent<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>isLandingPage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> isLandingPage <span class="token operator">=</span> previousMessages<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>landingPageContent</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> landingPageContent <span class="token operator">=</span> <span class="token operator">&lt;</span>div
  ref<span class="token operator">=</span><span class="token punctuation">{</span>sidebarRef<span class="token punctuation">}</span>
  className<span class="token operator">=</span><span class="token string">&#39;w-full h-full max-h-full flex flex-col overflow-auto px-4&#39;</span>
<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>landingPageInput<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>

  <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>chatThreadsState<span class="token punctuation">.</span>allThreads<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token comment">// show if there are threads</span>
    <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;pt-8 mb-2 text-void-fg-3 text-root select-none pointer-events-none&#39;</span><span class="token operator">&gt;</span>Previous Threads<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>PastThreadsList <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>
    <span class="token operator">:</span>
    <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;pt-8 mb-2 text-void-fg-3 text-root select-none pointer-events-none&#39;</span><span class="token operator">&gt;</span>Suggestions<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>initiallySuggestedPromptsHTML<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>threadPageContent</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> threadPageContent <span class="token operator">=</span> <span class="token operator">&lt;</span>div
  ref<span class="token operator">=</span><span class="token punctuation">{</span>sidebarRef<span class="token punctuation">}</span>
  className<span class="token operator">=</span><span class="token string">&#39;w-full h-full flex flex-col overflow-hidden&#39;</span>
<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>messagesHTML<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>threadPageInput<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>onSubmit &amp; onAbort</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> onSubmit <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>_forceSubmit<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isDisabled <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>_forceSubmit<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token keyword">const</span> threadId <span class="token operator">=</span> chatThreadsService<span class="token punctuation">.</span>state<span class="token punctuation">.</span>currentThreadId

  <span class="token comment">// send message to LLM</span>
  <span class="token keyword">const</span> userMessage <span class="token operator">=</span> _forceSubmit <span class="token operator">||</span> textAreaRef<span class="token punctuation">.</span>current<span class="token operator">?.</span>value <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> chatThreadsService<span class="token punctuation">.</span><span class="token function">addUserMessageAndStreamResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> userMessage<span class="token punctuation">,</span> threadId <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error while sending message in chat:&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">setSelections</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// clear staging</span>
  textAreaFnsRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  textAreaRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// focus input after submit</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>chatThreadsService<span class="token punctuation">,</span> isDisabled<span class="token punctuation">,</span> isRunning<span class="token punctuation">,</span> textAreaRef<span class="token punctuation">,</span> textAreaFnsRef<span class="token punctuation">,</span> setSelections<span class="token punctuation">,</span> settingsState<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">onAbort</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> threadId <span class="token operator">=</span> currentThread<span class="token punctuation">.</span>id
  <span class="token keyword">await</span> chatThreadsService<span class="token punctuation">.</span><span class="token function">abortRunning</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-chatthreadservice" tabindex="-1"><a class="header-anchor" href="#_3-2-chatthreadservice" aria-hidden="true">#</a> 3.2. chatThreadService</h3><p>src/vs/workbench/contrib/void/browser/chatThreadService.ts</p><h4 id="_3-2-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-2-1-main-functionality" aria-hidden="true">#</a> 3.2.1. Main Functionality</h4><ul><li>addUserMessageAndStreamResponse: Triggered when a user submits input in the sidebar <ul><li>Adds a user message to the current chat thread.</li><li>Automatically drives the main loop for LLM response or tool invocation <ul><li><code>_runChatAgent({ threadId, ...this._currentModelSelectionProps(), })</code><ul><li>Responsible for orchestrating the entire intelligent conversation flow, including LLM responses, tool calls, user approval, and multi-turn dialogue. <ul><li>Assembles the full prompt for the LLM input: <code>chatMessages</code>, <code>modelSelection</code>, <code>chatMode</code><ul><li><code>const { messages, separateSystemMessage } = await this._convertToLLMMessagesService.prepareLLMChatMessages({chatMessages, modelSelection, chatMode})</code></li></ul></li><li>Sends the input messages to the LLM.</li><li>Handles two types of LLM responses: <code>info</code> and <code>toolCall</code>.</li><li>Adds an assistant message to the conversation.</li><li>If the response is a <code>toolCall</code>, executes the tool via <code>_runToolCall</code><ul><li>May require user approval.</li></ul></li><li>Continues to the next round of conversation.</li></ul></li></ul></li></ul></li></ul></li><li>abortRunning: Cancels ongoing operations <ul><li>Terminates any ongoing LLM response, tool invocation, or waiting-for-user-approval process in the current thread.</li><li>Records the state at interruption (e.g., saves generated content, marks tools as interrupted, etc.).</li></ul></li></ul><h4 id="_3-2-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-2-2-related-code" aria-hidden="true">#</a> 3.2.2. Related Code</h4><p>addUserMessageAndStreamResponse</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">addUserMessageAndStreamResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> userMessage<span class="token punctuation">,</span> _chatSelections<span class="token punctuation">,</span> threadId <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> userMessage<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> _chatSelections<span class="token operator">?</span><span class="token operator">:</span> StagingSelectionItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> threadId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> thread <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>allThreads<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>thread<span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token comment">// if there&#39;s a current checkpoint, delete all messages after it</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token punctuation">.</span>state<span class="token punctuation">.</span>currCheckpointIdx <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> checkpointIdx <span class="token operator">=</span> thread<span class="token punctuation">.</span>state<span class="token punctuation">.</span>currCheckpointIdx<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newMessages <span class="token operator">=</span> thread<span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> checkpointIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Update the thread with truncated messages</span>
    <span class="token keyword">const</span> newThreads <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>allThreads<span class="token punctuation">,</span>
      <span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>thread<span class="token punctuation">,</span>
        lastModified<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        messages<span class="token operator">:</span> newMessages<span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_storeAllThreads</span><span class="token punctuation">(</span>newThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> allThreads<span class="token operator">:</span> newThreads <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Now call the original method to add the user message and stream the response</span>
  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addUserMessageAndStreamResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> userMessage<span class="token punctuation">,</span> _chatSelections<span class="token punctuation">,</span> threadId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">_addUserMessageAndStreamResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> userMessage<span class="token punctuation">,</span> _chatSelections<span class="token punctuation">,</span> threadId <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> userMessage<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> _chatSelections<span class="token operator">?</span><span class="token operator">:</span> StagingSelectionItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> threadId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> thread <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>allThreads<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>thread<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// should never happen</span>

  <span class="token comment">// interrupt existing stream</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">abortRunning</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// add dummy before this message to keep checkpoint before user message idea consistent</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addUserCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threadId <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>


  <span class="token comment">// add user&#39;s message to chat history</span>
  <span class="token keyword">const</span> instructions <span class="token operator">=</span> userMessage
  <span class="token keyword">const</span> currSelns<span class="token operator">:</span> StagingSelectionItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> _chatSelections <span class="token operator">??</span> thread<span class="token punctuation">.</span>state<span class="token punctuation">.</span>stagingSelections

  <span class="token keyword">const</span> userMessageContent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">chat_userMessageContent</span><span class="token punctuation">(</span>instructions<span class="token punctuation">,</span> currSelns<span class="token punctuation">,</span> <span class="token punctuation">{</span> directoryStrService<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_directoryStringService<span class="token punctuation">,</span> fileService<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_fileService <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// user message + names of files (NOT content)</span>
  <span class="token keyword">const</span> userHistoryElt<span class="token operator">:</span> ChatMessage <span class="token operator">=</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> userMessageContent<span class="token punctuation">,</span> displayContent<span class="token operator">:</span> instructions<span class="token punctuation">,</span> selections<span class="token operator">:</span> currSelns<span class="token punctuation">,</span> state<span class="token operator">:</span> defaultMessageState <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addMessageToThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> userHistoryElt<span class="token punctuation">)</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setThreadState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> currCheckpointIdx<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// no longer at a checkpoint because started streaming</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_wrapRunAgentToNotify</span><span class="token punctuation">(</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_runChatAgent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threadId<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_currentModelSelectionProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    threadId<span class="token punctuation">,</span>
  <span class="token punctuation">)</span>

  <span class="token comment">// scroll to bottom</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>allThreads<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>state<span class="token punctuation">.</span>mountedInfo<span class="token operator">?.</span>whenMounted<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    m<span class="token punctuation">.</span><span class="token function">scrollToBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>abortRunning</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">abortRunning</span><span class="token punctuation">(</span>threadId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> thread <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>allThreads<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>thread<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// should never happen</span>

  <span class="token comment">// add assistant message</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>isRunning <span class="token operator">===</span> <span class="token string">&#39;LLM&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> displayContentSoFar<span class="token punctuation">,</span> reasoningSoFar<span class="token punctuation">,</span> toolCallSoFar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token punctuation">.</span>llmInfo
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addMessageToThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;assistant&#39;</span><span class="token punctuation">,</span> displayContent<span class="token operator">:</span> displayContentSoFar<span class="token punctuation">,</span> reasoning<span class="token operator">:</span> reasoningSoFar<span class="token punctuation">,</span> anthropicReasoning<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>toolCallSoFar<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addMessageToThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;interrupted_streaming_tool&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> toolCallSoFar<span class="token punctuation">.</span>name<span class="token punctuation">,</span> mcpServerName<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_computeMCPServerOfToolName</span><span class="token punctuation">(</span>toolCallSoFar<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// add tool that&#39;s running</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>isRunning <span class="token operator">===</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> toolName<span class="token punctuation">,</span> toolParams<span class="token punctuation">,</span> id<span class="token punctuation">,</span> content<span class="token operator">:</span> content_<span class="token punctuation">,</span> rawParams<span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token punctuation">.</span>toolInfo
    <span class="token keyword">const</span> content <span class="token operator">=</span> content_ <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toolErrMsgs<span class="token punctuation">.</span>interrupted
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_updateLatestTool</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> toolName<span class="token punctuation">,</span> params<span class="token operator">:</span> toolParams<span class="token punctuation">,</span> id<span class="token punctuation">,</span> content<span class="token punctuation">,</span> rawParams<span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">,</span> result<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// reject the tool for the user if relevant</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>isRunning <span class="token operator">===</span> <span class="token string">&#39;awaiting_user&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rejectLatestToolRequest</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>isRunning <span class="token operator">===</span> <span class="token string">&#39;idle&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do nothing</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addUserCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threadId <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// interrupt any effects</span>
  <span class="token keyword">const</span> interrupt <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>interrupt
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> interrupt <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>
    <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_runChatAgent</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">_runChatAgent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  threadId<span class="token punctuation">,</span>
  modelSelection<span class="token punctuation">,</span>
  modelSelectionOptions<span class="token punctuation">,</span>
  callThisToolFirst<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  threadId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  modelSelection<span class="token operator">:</span> ModelSelection <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  modelSelectionOptions<span class="token operator">:</span> ModelSelectionOptions <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>

  callThisToolFirst<span class="token operator">?</span><span class="token operator">:</span> ToolMessage<span class="token operator">&lt;</span>ToolName<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;tool_request&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


  <span class="token keyword">let</span> interruptedWhenIdle <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">const</span> idleInterruptor <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> interruptedWhenIdle <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// _runToolCall does not need setStreamState({idle}) before it, but it needs it after it. (handles its own setStreamState)</span>

  <span class="token comment">// above just defines helpers, below starts the actual function</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> chatMode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_settingsService<span class="token punctuation">.</span>state<span class="token punctuation">.</span>globalSettings <span class="token comment">// should not change as we loop even if user changes it, so it goes here</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> overridesOfModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_settingsService<span class="token punctuation">.</span>state

  <span class="token keyword">let</span> nMessagesSent <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> shouldSendAnotherMessage <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">let</span> isRunningWhenEnd<span class="token operator">:</span> IsRunningType <span class="token operator">=</span> <span class="token keyword">undefined</span>

  <span class="token comment">// before enter loop, call tool</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callThisToolFirst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> interrupted <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_runToolCall</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> callThisToolFirst<span class="token punctuation">.</span>name<span class="token punctuation">,</span> callThisToolFirst<span class="token punctuation">.</span>id<span class="token punctuation">,</span> callThisToolFirst<span class="token punctuation">.</span>mcpServerName<span class="token punctuation">,</span> <span class="token punctuation">{</span> preapproved<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> unvalidatedToolParams<span class="token operator">:</span> callThisToolFirst<span class="token punctuation">.</span>rawParams<span class="token punctuation">,</span> validatedParams<span class="token operator">:</span> callThisToolFirst<span class="token punctuation">.</span>params <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addUserCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threadId <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token string">&#39;idle&#39;</span><span class="token punctuation">,</span> interrupt<span class="token operator">:</span> <span class="token string">&#39;not_needed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// just decorative, for clarity</span>


  <span class="token comment">// tool use loop</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>shouldSendAnotherMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// false by default each iteration</span>
    shouldSendAnotherMessage <span class="token operator">=</span> <span class="token boolean">false</span>
    isRunningWhenEnd <span class="token operator">=</span> <span class="token keyword">undefined</span>
    nMessagesSent <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token string">&#39;idle&#39;</span><span class="token punctuation">,</span> interrupt<span class="token operator">:</span> idleInterruptor <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> chatMessages <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>allThreads<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>messages <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> messages<span class="token punctuation">,</span> separateSystemMessage <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_convertToLLMMessagesService<span class="token punctuation">.</span><span class="token function">prepareLLMChatMessages</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      chatMessages<span class="token punctuation">,</span>
      modelSelection<span class="token punctuation">,</span>
      chatMode
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptedWhenIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> shouldRetryLLM <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">let</span> nAttempts <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>shouldRetryLLM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      shouldRetryLLM <span class="token operator">=</span> <span class="token boolean">false</span>
      nAttempts <span class="token operator">+=</span> <span class="token number">1</span>

      <span class="token keyword">type</span> <span class="token class-name">ResTypes</span> <span class="token operator">=</span>
        <span class="token operator">|</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;llmDone&#39;</span><span class="token punctuation">,</span> toolCall<span class="token operator">?</span><span class="token operator">:</span> RawToolCallObj<span class="token punctuation">,</span> info<span class="token operator">:</span> <span class="token punctuation">{</span> fullText<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> fullReasoning<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> anthropicReasoning<span class="token operator">:</span> AnthropicReasoning<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token operator">|</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;llmError&#39;</span><span class="token punctuation">,</span> error<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> fullError<span class="token operator">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token operator">|</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;llmAborted&#39;</span> <span class="token punctuation">}</span>

      <span class="token keyword">let</span> <span class="token function-variable function">resMessageIsDonePromise</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token operator">:</span> ResTypes<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token comment">// resolves when user approves this tool use (or if tool doesn&#39;t require approval)</span>
      <span class="token keyword">const</span> messageIsDonePromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span>ResTypes<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> rej<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> resMessageIsDonePromise <span class="token operator">=</span> res <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">const</span> llmCancelToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_llmMessageService<span class="token punctuation">.</span><span class="token function">sendLLMMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        messagesType<span class="token operator">:</span> <span class="token string">&#39;chatMessages&#39;</span><span class="token punctuation">,</span>
        chatMode<span class="token punctuation">,</span>
        messages<span class="token operator">:</span> messages<span class="token punctuation">,</span>
        modelSelection<span class="token punctuation">,</span>
        modelSelectionOptions<span class="token punctuation">,</span>
        overridesOfModel<span class="token punctuation">,</span>
        logging<span class="token operator">:</span> <span class="token punctuation">{</span> loggingName<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Chat - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>chatMode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> loggingExtras<span class="token operator">:</span> <span class="token punctuation">{</span> threadId<span class="token punctuation">,</span> nMessagesSent<span class="token punctuation">,</span> chatMode <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        separateSystemMessage<span class="token operator">:</span> separateSystemMessage<span class="token punctuation">,</span>
        <span class="token function-variable function">onText</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> fullText<span class="token punctuation">,</span> fullReasoning<span class="token punctuation">,</span> toolCall <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token string">&#39;LLM&#39;</span><span class="token punctuation">,</span> llmInfo<span class="token operator">:</span> <span class="token punctuation">{</span> displayContentSoFar<span class="token operator">:</span> fullText<span class="token punctuation">,</span> reasoningSoFar<span class="token operator">:</span> fullReasoning<span class="token punctuation">,</span> toolCallSoFar<span class="token operator">:</span> toolCall <span class="token operator">??</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> interrupt<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>llmCancelToken<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_llmMessageService<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span>llmCancelToken<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">onFinalMessage</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> fullText<span class="token punctuation">,</span> fullReasoning<span class="token punctuation">,</span> toolCall<span class="token punctuation">,</span> anthropicReasoning<span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">resMessageIsDonePromise</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;llmDone&#39;</span><span class="token punctuation">,</span> toolCall<span class="token punctuation">,</span> info<span class="token operator">:</span> <span class="token punctuation">{</span> fullText<span class="token punctuation">,</span> fullReasoning<span class="token punctuation">,</span> anthropicReasoning <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// resolve with tool calls</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">resMessageIsDonePromise</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;llmError&#39;</span><span class="token punctuation">,</span> error<span class="token operator">:</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">onAbort</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// stop the loop to free up the promise, but don&#39;t modify state (already handled by whatever stopped it)</span>
          <span class="token function">resMessageIsDonePromise</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;llmAborted&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>_metricsService<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token string">&#39;Agent Loop Done (Aborted)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> nMessagesSent<span class="token punctuation">,</span> chatMode <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// mark as streaming</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>llmCancelToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;There was an unexpected error when sending your chat message.&#39;</span><span class="token punctuation">,</span> fullError<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token string">&#39;LLM&#39;</span><span class="token punctuation">,</span> llmInfo<span class="token operator">:</span> <span class="token punctuation">{</span> displayContentSoFar<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> reasoningSoFar<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> toolCallSoFar<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> interrupt<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_llmMessageService<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span>llmCancelToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> llmRes <span class="token operator">=</span> <span class="token keyword">await</span> messageIsDonePromise <span class="token comment">// wait for message to complete</span>

      <span class="token comment">// if something else started running in the meantime</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token operator">?.</span>isRunning <span class="token operator">!==</span> <span class="token string">&#39;LLM&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(&#39;Chat thread interrupted by a newer chat thread&#39;, this.streamState[threadId]?.isRunning)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// llm res aborted</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>llmRes<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;llmAborted&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// llm res error</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>llmRes<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;llmError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// error, should retry</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nAttempts <span class="token operator">&lt;</span> <span class="token constant">CHAT_RETRIES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          shouldRetryLLM <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token string">&#39;idle&#39;</span><span class="token punctuation">,</span> interrupt<span class="token operator">:</span> idleInterruptor <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token constant">RETRY_DELAY</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptedWhenIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span>
            <span class="token keyword">continue</span> <span class="token comment">// retry</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// error, but too many attempts</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> llmRes
          <span class="token keyword">const</span> <span class="token punctuation">{</span> displayContentSoFar<span class="token punctuation">,</span> reasoningSoFar<span class="token punctuation">,</span> toolCallSoFar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>streamState<span class="token punctuation">[</span>threadId<span class="token punctuation">]</span><span class="token punctuation">.</span>llmInfo
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addMessageToThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;assistant&#39;</span><span class="token punctuation">,</span> displayContent<span class="token operator">:</span> displayContentSoFar<span class="token punctuation">,</span> reasoning<span class="token operator">:</span> reasoningSoFar<span class="token punctuation">,</span> anthropicReasoning<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>toolCallSoFar<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addMessageToThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;interrupted_streaming_tool&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> toolCallSoFar<span class="token punctuation">.</span>name<span class="token punctuation">,</span> mcpServerName<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_computeMCPServerOfToolName</span><span class="token punctuation">(</span>toolCallSoFar<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addUserCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threadId <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// llm res success</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> toolCall<span class="token punctuation">,</span> info <span class="token punctuation">}</span> <span class="token operator">=</span> llmRes

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addMessageToThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;assistant&#39;</span><span class="token punctuation">,</span> displayContent<span class="token operator">:</span> info<span class="token punctuation">.</span>fullText<span class="token punctuation">,</span> reasoning<span class="token operator">:</span> info<span class="token punctuation">.</span>fullReasoning<span class="token punctuation">,</span> anthropicReasoning<span class="token operator">:</span> info<span class="token punctuation">.</span>anthropicReasoning <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token string">&#39;idle&#39;</span><span class="token punctuation">,</span> interrupt<span class="token operator">:</span> <span class="token string">&#39;not_needed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// just decorative for clarity</span>

      <span class="token comment">// call tool if there is one</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>toolCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> mcpTools <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mcpService<span class="token punctuation">.</span><span class="token function">getMCPTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> mcpTool <span class="token operator">=</span> mcpTools<span class="token operator">?.</span><span class="token function">find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>name <span class="token operator">===</span> toolCall<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

        <span class="token keyword">const</span> <span class="token punctuation">{</span> awaitingUserApproval<span class="token punctuation">,</span> interrupted <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_runToolCall</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> toolCall<span class="token punctuation">.</span>name<span class="token punctuation">,</span> toolCall<span class="token punctuation">.</span>id<span class="token punctuation">,</span> mcpTool<span class="token operator">?.</span>mcpServerName<span class="token punctuation">,</span> <span class="token punctuation">{</span> preapproved<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unvalidatedToolParams<span class="token operator">:</span> toolCall<span class="token punctuation">.</span>rawParams <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>awaitingUserApproval<span class="token punctuation">)</span> <span class="token punctuation">{</span> isRunningWhenEnd <span class="token operator">=</span> <span class="token string">&#39;awaiting_user&#39;</span> <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span> shouldSendAnotherMessage <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token string">&#39;idle&#39;</span><span class="token punctuation">,</span> interrupt<span class="token operator">:</span> <span class="token string">&#39;not_needed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// just decorative, for clarity</span>
      <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token comment">// end while (attempts)</span>
  <span class="token punctuation">}</span> <span class="token comment">// end while (send message)</span>

  <span class="token comment">// if awaiting user approval, keep isRunning true, else end isRunning</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> isRunningWhenEnd <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// add checkpoint before the next user message</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRunningWhenEnd<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addUserCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threadId <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// capture number of messages sent</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_metricsService<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token string">&#39;Agent Loop Done&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> nMessagesSent<span class="token punctuation">,</span> chatMode <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_runToolCall</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> _runToolCall <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>
  threadId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  toolName<span class="token operator">:</span> ToolName<span class="token punctuation">,</span>
  toolId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  mcpServerName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  opts<span class="token operator">:</span> <span class="token punctuation">{</span> preapproved<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> unvalidatedToolParams<span class="token operator">:</span> RawToolParamsObj<span class="token punctuation">,</span> validatedParams<span class="token operator">:</span> ToolCallParams<span class="token operator">&lt;</span>ToolName<span class="token operator">&gt;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span> preapproved<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unvalidatedToolParams<span class="token operator">:</span> RawToolParamsObj <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> awaitingUserApproval<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> interrupted<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token comment">// compute these below</span>
  <span class="token keyword">let</span> toolParams<span class="token operator">:</span> ToolCallParams<span class="token operator">&lt;</span>ToolName<span class="token operator">&gt;</span>
  <span class="token keyword">let</span> toolResult<span class="token operator">:</span> ToolResult<span class="token operator">&lt;</span>ToolName<span class="token operator">&gt;</span>
  <span class="token keyword">let</span> toolResultStr<span class="token operator">:</span> <span class="token builtin">string</span>

  <span class="token comment">// Check if it&#39;s a built-in tool</span>
  <span class="token keyword">const</span> isBuiltInTool <span class="token operator">=</span> <span class="token function">isABuiltinToolName</span><span class="token punctuation">(</span>toolName<span class="token punctuation">)</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>opts<span class="token punctuation">.</span>preapproved<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// skip this if pre-approved</span>
    <span class="token comment">// 1. validate tool params</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isBuiltInTool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_toolsService<span class="token punctuation">.</span>validateParams<span class="token punctuation">[</span>toolName<span class="token punctuation">]</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>unvalidatedToolParams<span class="token punctuation">)</span>
        toolParams <span class="token operator">=</span> params
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        toolParams <span class="token operator">=</span> opts<span class="token punctuation">.</span>unvalidatedToolParams
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token function">getErrorMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addMessageToThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;invalid_params&#39;</span><span class="token punctuation">,</span> rawParams<span class="token operator">:</span> opts<span class="token punctuation">.</span>unvalidatedToolParams<span class="token punctuation">,</span> result<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">:</span> toolName<span class="token punctuation">,</span> content<span class="token operator">:</span> errorMessage<span class="token punctuation">,</span> id<span class="token operator">:</span> toolId<span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// once validated, add checkpoint for edit</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>toolName <span class="token operator">===</span> <span class="token string">&#39;edit_file&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addToolEditCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threadId<span class="token punctuation">,</span> uri<span class="token operator">:</span> <span class="token punctuation">(</span>toolParams <span class="token keyword">as</span> BuiltinToolCallParams<span class="token punctuation">[</span><span class="token string">&#39;edit_file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uri <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>toolName <span class="token operator">===</span> <span class="token string">&#39;rewrite_file&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addToolEditCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threadId<span class="token punctuation">,</span> uri<span class="token operator">:</span> <span class="token punctuation">(</span>toolParams <span class="token keyword">as</span> BuiltinToolCallParams<span class="token punctuation">[</span><span class="token string">&#39;rewrite_file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uri <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token comment">// 2. if tool requires approval, break from the loop, awaiting approval</span>

    <span class="token keyword">const</span> approvalType <span class="token operator">=</span> isBuiltInTool <span class="token operator">?</span> approvalTypeOfBuiltinToolName<span class="token punctuation">[</span>toolName<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&#39;MCP tools&#39;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>approvalType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> autoApprove <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_settingsService<span class="token punctuation">.</span>state<span class="token punctuation">.</span>globalSettings<span class="token punctuation">.</span>autoApprove<span class="token punctuation">[</span>approvalType<span class="token punctuation">]</span>
      <span class="token comment">// add a tool_request because we use it for UI if a tool is loading (this should be improved in the future)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addMessageToThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;tool_request&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;(Awaiting user permission...)&#39;</span><span class="token punctuation">,</span> result<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">:</span> toolName<span class="token punctuation">,</span> params<span class="token operator">:</span> toolParams<span class="token punctuation">,</span> id<span class="token operator">:</span> toolId<span class="token punctuation">,</span> rawParams<span class="token operator">:</span> opts<span class="token punctuation">.</span>unvalidatedToolParams<span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoApprove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> awaitingUserApproval<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    toolParams <span class="token operator">=</span> opts<span class="token punctuation">.</span>validatedParams
  <span class="token punctuation">}</span>

		<span class="token comment">// 3. call the tool</span>
		<span class="token comment">// this._setStreamState(threadId, { isRunning: &#39;tool&#39; }, &#39;merge&#39;)</span>
		<span class="token keyword">const</span> runningTool <span class="token operator">=</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;running_now&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> toolName<span class="token punctuation">,</span> params<span class="token operator">:</span> toolParams<span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;(value not received yet...)&#39;</span><span class="token punctuation">,</span> result<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> id<span class="token operator">:</span> toolId<span class="token punctuation">,</span> rawParams<span class="token operator">:</span> opts<span class="token punctuation">.</span>unvalidatedToolParams<span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_updateLatestTool</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> runningTool<span class="token punctuation">)</span>


		<span class="token keyword">let</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span>
		<span class="token keyword">let</span> <span class="token function-variable function">resolveInterruptor</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">r</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
		<span class="token keyword">const</span> interruptorPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> resolveInterruptor <span class="token operator">=</span> res <span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>

			<span class="token comment">// set stream state</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setStreamState</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> isRunning<span class="token operator">:</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">,</span> interrupt<span class="token operator">:</span> interruptorPromise<span class="token punctuation">,</span> toolInfo<span class="token operator">:</span> <span class="token punctuation">{</span> toolName<span class="token punctuation">,</span> toolParams<span class="token punctuation">,</span> id<span class="token operator">:</span> toolId<span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;interrupted...&#39;</span><span class="token punctuation">,</span> rawParams<span class="token operator">:</span> opts<span class="token punctuation">.</span>unvalidatedToolParams<span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>isBuiltInTool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> <span class="token punctuation">{</span> result<span class="token punctuation">,</span> interruptTool <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_toolsService<span class="token punctuation">.</span>callTool<span class="token punctuation">[</span>toolName<span class="token punctuation">]</span><span class="token punctuation">(</span>toolParams <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span>
				<span class="token keyword">const</span> <span class="token function-variable function">interruptor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> interruptTool<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
				<span class="token function">resolveInterruptor</span><span class="token punctuation">(</span>interruptor<span class="token punctuation">)</span>

				toolResult <span class="token operator">=</span> <span class="token keyword">await</span> result
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> mcpTools <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mcpService<span class="token punctuation">.</span><span class="token function">getMCPTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">const</span> mcpTool <span class="token operator">=</span> mcpTools<span class="token operator">?.</span><span class="token function">find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>name <span class="token operator">===</span> toolName<span class="token punctuation">)</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mcpTool<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">MCP tool </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>toolName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not found</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

				<span class="token function">resolveInterruptor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

				toolResult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mcpService<span class="token punctuation">.</span><span class="token function">callMCPTool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
					serverName<span class="token operator">:</span> mcpTool<span class="token punctuation">.</span>mcpServerName <span class="token operator">??</span> <span class="token string">&#39;unknown_mcp_server&#39;</span><span class="token punctuation">,</span>
					toolName<span class="token operator">:</span> toolName<span class="token punctuation">,</span>
					params<span class="token operator">:</span> toolParams
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>result
			<span class="token punctuation">}</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> interrupted<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">// the tool result is added where we interrupt, not here</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">resolveInterruptor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// resolve for the sake of it</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> interrupted<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">// the tool result is added where we interrupt, not here</span>

			<span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token function">getErrorMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_updateLatestTool</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;tool_error&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> toolParams<span class="token punctuation">,</span> result<span class="token operator">:</span> errorMessage<span class="token punctuation">,</span> name<span class="token operator">:</span> toolName<span class="token punctuation">,</span> content<span class="token operator">:</span> errorMessage<span class="token punctuation">,</span> id<span class="token operator">:</span> toolId<span class="token punctuation">,</span> rawParams<span class="token operator">:</span> opts<span class="token punctuation">.</span>unvalidatedToolParams<span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 4. stringify the result to give to the LLM</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>isBuiltInTool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				toolResultStr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_toolsService<span class="token punctuation">.</span>stringOfResult<span class="token punctuation">[</span>toolName<span class="token punctuation">]</span><span class="token punctuation">(</span>toolParams <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> toolResult <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// For MCP tools, handle the result based on its type</span>
			<span class="token class-name"><span class="token keyword">else</span></span> <span class="token punctuation">{</span>
				toolResultStr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mcpService<span class="token punctuation">.</span><span class="token function">stringifyResult</span><span class="token punctuation">(</span>toolResult <span class="token keyword">as</span> RawMCPToolCall<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toolErrMsgs<span class="token punctuation">.</span><span class="token function">errWhenStringifying</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_updateLatestTool</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;tool_error&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> toolParams<span class="token punctuation">,</span> result<span class="token operator">:</span> errorMessage<span class="token punctuation">,</span> name<span class="token operator">:</span> toolName<span class="token punctuation">,</span> content<span class="token operator">:</span> errorMessage<span class="token punctuation">,</span> id<span class="token operator">:</span> toolId<span class="token punctuation">,</span> rawParams<span class="token operator">:</span> opts<span class="token punctuation">.</span>unvalidatedToolParams<span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 5. add to history and keep going</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_updateLatestTool</span><span class="token punctuation">(</span>threadId<span class="token punctuation">,</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> toolParams<span class="token punctuation">,</span> result<span class="token operator">:</span> toolResult<span class="token punctuation">,</span> name<span class="token operator">:</span> toolName<span class="token punctuation">,</span> content<span class="token operator">:</span> toolResultStr<span class="token punctuation">,</span> id<span class="token operator">:</span> toolId<span class="token punctuation">,</span> rawParams<span class="token operator">:</span> opts<span class="token punctuation">.</span>unvalidatedToolParams<span class="token punctuation">,</span> mcpServerName <span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-converttollmmessageservice" tabindex="-1"><a class="header-anchor" href="#_3-3-converttollmmessageservice" aria-hidden="true">#</a> 3.3. convertToLLMMessageService</h3><p>src/vs/workbench/contrib/void/browser/convertToLLMMessageService.ts</p><h4 id="_3-3-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-3-1-main-functionality" aria-hidden="true">#</a> 3.3.1. Main Functionality</h4><ul><li>prepareLLMChatMessages <ul><li>Retrieve the system prompt</li><li>Assemble the user prompt</li></ul></li></ul><h4 id="_3-3-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-3-2-related-code" aria-hidden="true">#</a> 3.3.2. Related Code</h4><p>prepareLLMChatMessages</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>prepareLLMChatMessages<span class="token operator">:</span> IConvertToLLMMessageService<span class="token punctuation">[</span><span class="token string">&#39;prepareLLMChatMessages&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> chatMessages<span class="token punctuation">,</span> chatMode<span class="token punctuation">,</span> modelSelection <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>modelSelection <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> messages<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> separateSystemMessage<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> overridesOfModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>voidSettingsService<span class="token punctuation">.</span>state

  <span class="token keyword">const</span> <span class="token punctuation">{</span> providerName<span class="token punctuation">,</span> modelName <span class="token punctuation">}</span> <span class="token operator">=</span> modelSelection
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    specialToolFormat<span class="token punctuation">,</span>
    contextWindow<span class="token punctuation">,</span>
    supportsSystemMessage<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getModelCapabilities</span><span class="token punctuation">(</span>providerName<span class="token punctuation">,</span> modelName<span class="token punctuation">,</span> overridesOfModel<span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> disableSystemMessage <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>voidSettingsService<span class="token punctuation">.</span>state<span class="token punctuation">.</span>globalSettings<span class="token punctuation">;</span>
  <span class="token keyword">const</span> fullSystemMessage <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_generateChatMessagesSystemMessage</span><span class="token punctuation">(</span>chatMode<span class="token punctuation">,</span> specialToolFormat<span class="token punctuation">)</span>
  <span class="token keyword">const</span> systemMessage <span class="token operator">=</span> disableSystemMessage <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> fullSystemMessage<span class="token punctuation">;</span>

  <span class="token keyword">const</span> modelSelectionOptions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>voidSettingsService<span class="token punctuation">.</span>state<span class="token punctuation">.</span>optionsOfModelSelection<span class="token punctuation">[</span><span class="token string">&#39;Chat&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>modelSelection<span class="token punctuation">.</span>providerName<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">[</span>modelSelection<span class="token punctuation">.</span>modelName<span class="token punctuation">]</span>

  <span class="token comment">// Get combined AI instructions</span>
  <span class="token keyword">const</span> aiInstructions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCombinedAIInstructions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> isReasoningEnabled <span class="token operator">=</span> <span class="token function">getIsReasoningEnabledState</span><span class="token punctuation">(</span><span class="token string">&#39;Chat&#39;</span><span class="token punctuation">,</span> providerName<span class="token punctuation">,</span> modelName<span class="token punctuation">,</span> modelSelectionOptions<span class="token punctuation">,</span> overridesOfModel<span class="token punctuation">)</span>
  <span class="token keyword">const</span> reservedOutputTokenSpace <span class="token operator">=</span> <span class="token function">getReservedOutputTokenSpace</span><span class="token punctuation">(</span>providerName<span class="token punctuation">,</span> modelName<span class="token punctuation">,</span> <span class="token punctuation">{</span> isReasoningEnabled<span class="token punctuation">,</span> overridesOfModel <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> llmMessages <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_chatMessagesToSimpleMessages</span><span class="token punctuation">(</span>chatMessages<span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> messages<span class="token punctuation">,</span> separateSystemMessage <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">prepareMessages</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    messages<span class="token operator">:</span> llmMessages<span class="token punctuation">,</span>
    systemMessage<span class="token punctuation">,</span>
    aiInstructions<span class="token punctuation">,</span>
    supportsSystemMessage<span class="token punctuation">,</span>
    specialToolFormat<span class="token punctuation">,</span>
    supportsAnthropicReasoning<span class="token operator">:</span> providerName <span class="token operator">===</span> <span class="token string">&#39;anthropic&#39;</span><span class="token punctuation">,</span>
    contextWindow<span class="token punctuation">,</span>
    reservedOutputTokenSpace<span class="token punctuation">,</span>
    providerName<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> messages<span class="token punctuation">,</span> separateSystemMessage <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_generateChatMessagesSystemMessage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// system message</span>
<span class="token keyword">private</span> _generateChatMessagesSystemMessage <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>chatMode<span class="token operator">:</span> ChatMode<span class="token punctuation">,</span> specialToolFormat<span class="token operator">:</span> <span class="token string">&#39;openai-style&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;anthropic-style&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;gemini-style&#39;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> workspaceFolders <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>workspaceContextService<span class="token punctuation">.</span><span class="token function">getWorkspace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>folders<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>uri<span class="token punctuation">.</span>fsPath<span class="token punctuation">)</span>

  <span class="token keyword">const</span> openedURIs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modelService<span class="token punctuation">.</span><span class="token function">getModels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span><span class="token function">isAttachedToEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>uri<span class="token punctuation">.</span>fsPath<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> activeURI <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editorService<span class="token punctuation">.</span>activeEditor<span class="token operator">?.</span>resource<span class="token operator">?.</span>fsPath<span class="token punctuation">;</span>

  <span class="token keyword">const</span> directoryStr <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>directoryStrService<span class="token punctuation">.</span><span class="token function">getAllDirectoriesStr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    cutOffMessage<span class="token operator">:</span> chatMode <span class="token operator">===</span> <span class="token string">&#39;agent&#39;</span> <span class="token operator">||</span> chatMode <span class="token operator">===</span> <span class="token string">&#39;gather&#39;</span> <span class="token operator">?</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...Directories string cut off, use tools to read more...</span><span class="token template-punctuation string">\`</span></span>
      <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...Directories string cut off, ask user for more if necessary...</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> includeXMLToolDefinitions <span class="token operator">=</span> <span class="token operator">!</span>specialToolFormat

  <span class="token keyword">const</span> mcpTools <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mcpService<span class="token punctuation">.</span><span class="token function">getMCPTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> persistentTerminalIDs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>terminalToolService<span class="token punctuation">.</span><span class="token function">listPersistentTerminalIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> systemMessage <span class="token operator">=</span> <span class="token function">chat_systemMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> workspaceFolders<span class="token punctuation">,</span> openedURIs<span class="token punctuation">,</span> directoryStr<span class="token punctuation">,</span> activeURI<span class="token punctuation">,</span> persistentTerminalIDs<span class="token punctuation">,</span> chatMode<span class="token punctuation">,</span> mcpTools<span class="token punctuation">,</span> includeXMLToolDefinitions <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> systemMessage
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>prepareMessages</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> prepareMessages <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token punctuation">{</span>
	messages<span class="token operator">:</span> SimpleLLMMessage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	systemMessage<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	aiInstructions<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	supportsSystemMessage<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token string">&#39;system-role&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;developer-role&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;separated&#39;</span><span class="token punctuation">,</span>
	specialToolFormat<span class="token operator">:</span> <span class="token string">&#39;openai-style&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;anthropic-style&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;gemini-style&#39;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
	supportsAnthropicReasoning<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
	contextWindow<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	reservedOutputTokenSpace<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
	providerName<span class="token operator">:</span> ProviderName
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> messages<span class="token operator">:</span> LLMChatMessage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> separateSystemMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

	<span class="token keyword">const</span> specialFormat <span class="token operator">=</span> params<span class="token punctuation">.</span>specialToolFormat <span class="token comment">// this is just for ts stupidness</span>

	<span class="token comment">// if need to convert to gemini style of messaes, do that (treat as anthropic style, then convert to gemini style)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>providerName <span class="token operator">===</span> <span class="token string">&#39;gemini&#39;</span> <span class="token operator">||</span> specialFormat <span class="token operator">===</span> <span class="token string">&#39;gemini-style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">prepareOpenAIOrAnthropicMessages</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>params<span class="token punctuation">,</span> specialToolFormat<span class="token operator">:</span> specialFormat <span class="token operator">===</span> <span class="token string">&#39;gemini-style&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;anthropic-style&#39;</span> <span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">const</span> messages <span class="token operator">=</span> res<span class="token punctuation">.</span>messages <span class="token keyword">as</span> AnthropicLLMChatMessage<span class="token punctuation">[</span><span class="token punctuation">]</span>
		<span class="token keyword">const</span> messages2 <span class="token operator">=</span> <span class="token function">prepareGeminiMessages</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span> messages<span class="token operator">:</span> messages2<span class="token punctuation">,</span> separateSystemMessage<span class="token operator">:</span> res<span class="token punctuation">.</span>separateSystemMessage <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">prepareOpenAIOrAnthropicMessages</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>params<span class="token punctuation">,</span> specialToolFormat<span class="token operator">:</span> specialFormat <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>prepareOpenAIOrAnthropicMessages</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> prepareOpenAIOrAnthropicMessages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
	messages<span class="token operator">:</span> messages_<span class="token punctuation">,</span>
	systemMessage<span class="token punctuation">,</span>
	aiInstructions<span class="token punctuation">,</span>
	supportsSystemMessage<span class="token punctuation">,</span>
	specialToolFormat<span class="token punctuation">,</span>
	supportsAnthropicReasoning<span class="token punctuation">,</span>
	contextWindow<span class="token punctuation">,</span>
	reservedOutputTokenSpace<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	messages<span class="token operator">:</span> SimpleLLMMessage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	systemMessage<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	aiInstructions<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	supportsSystemMessage<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token string">&#39;system-role&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;developer-role&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;separated&#39;</span><span class="token punctuation">,</span>
	specialToolFormat<span class="token operator">:</span> <span class="token string">&#39;openai-style&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;anthropic-style&#39;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
	supportsAnthropicReasoning<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
	contextWindow<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	reservedOutputTokenSpace<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> messages<span class="token operator">:</span> AnthropicOrOpenAILLMMessage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> separateSystemMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

	reservedOutputTokenSpace <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
		contextWindow <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// reserve at least 1/4 of the token window length</span>
		reservedOutputTokenSpace <span class="token operator">??</span> <span class="token number">4_096</span> <span class="token comment">// defaults to 4096</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">let</span> messages<span class="token operator">:</span> <span class="token punctuation">(</span>SimpleLLMMessage <span class="token operator">|</span> <span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;system&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>messages_<span class="token punctuation">)</span>

	<span class="token comment">// ================ system message ================</span>
	<span class="token comment">// A COMPLETE HACK: last message is system message for context purposes</span>

	<span class="token keyword">const</span> sysMsgParts<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>aiInstructions<span class="token punctuation">)</span> sysMsgParts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">GUIDELINES (from the user&#39;s .voidrules file):\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>aiInstructions<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>systemMessage<span class="token punctuation">)</span> sysMsgParts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>systemMessage<span class="token punctuation">)</span>
	<span class="token keyword">const</span> combinedSystemMessage <span class="token operator">=</span> sysMsgParts<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n\\n&#39;</span><span class="token punctuation">)</span>

	messages<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;system&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> combinedSystemMessage <span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// ================ trim ================</span>
	messages <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>m<span class="token punctuation">,</span> content<span class="token operator">:</span> m<span class="token punctuation">.</span>role <span class="token operator">!==</span> <span class="token string">&#39;tool&#39;</span> <span class="token operator">?</span> m<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> m<span class="token punctuation">.</span>content <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">type</span> <span class="token class-name">MesType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> messages<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

	<span class="token comment">// ================ fit into context ================</span>

	<span class="token comment">// the higher the weight, the higher the desire to truncate - TRIM HIGHEST WEIGHT MESSAGES</span>
	<span class="token keyword">const</span> alreadyTrimmedIdxes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> <span class="token function-variable function">weight</span> <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> MesType<span class="token punctuation">,</span> messages<span class="token operator">:</span> MesType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> base <span class="token operator">=</span> message<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length

		<span class="token keyword">let</span> multiplier<span class="token operator">:</span> <span class="token builtin">number</span>
		multiplier <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>messages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> idx<span class="token punctuation">)</span> <span class="token operator">/</span> messages<span class="token punctuation">.</span>length <span class="token comment">// slow rampdown from 2 to 1 as index increases</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>role <span class="token operator">===</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			multiplier <span class="token operator">*=</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>role <span class="token operator">===</span> <span class="token string">&#39;system&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			multiplier <span class="token operator">*=</span> <span class="token number">.01</span> <span class="token comment">// very low weight</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			multiplier <span class="token operator">*=</span> <span class="token number">10</span> <span class="token comment">// llm tokens are far less valuable than user tokens</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// any already modified message should not be trimmed again</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyTrimmedIdxes<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			multiplier <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 1st and last messages should be very low weight</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">||</span> idx <span class="token operator">&gt;=</span> messages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			multiplier <span class="token operator">*=</span> <span class="token number">.05</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> base <span class="token operator">*</span> multiplier
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> <span class="token function-variable function">_findLargestByWeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span>messages_<span class="token operator">:</span> MesType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> largestIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
		<span class="token keyword">let</span> largestWeight <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> messages<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> m <span class="token operator">=</span> messages<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
			<span class="token keyword">const</span> w <span class="token operator">=</span> <span class="token function">weight</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> messages_<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">&gt;</span> largestWeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				largestWeight <span class="token operator">=</span> w
				largestIndex <span class="token operator">=</span> i
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> largestIndex
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> totalLen <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> m <span class="token keyword">of</span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span> totalLen <span class="token operator">+=</span> m<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token punctuation">}</span>
	<span class="token keyword">const</span> charsNeedToTrim <span class="token operator">=</span> totalLen <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
		<span class="token punctuation">(</span>contextWindow <span class="token operator">-</span> reservedOutputTokenSpace<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">CHARS_PER_TOKEN</span><span class="token punctuation">,</span> <span class="token comment">// can be 0, in which case charsNeedToTrim=everything, bad</span>
		<span class="token number">5_000</span> <span class="token comment">// ensure we don&#39;t trim at least 5k chars (just a random small value)</span>
	<span class="token punctuation">)</span>

	<span class="token comment">// &lt;-----------------------------------------&gt;</span>
	<span class="token comment">// 0                      |    |             |</span>
	<span class="token comment">//                        |    contextWindow |</span>
	<span class="token comment">//                     contextWindow - maxOut|putTokens</span>
	<span class="token comment">//                                          totalLen</span>
	<span class="token keyword">let</span> remainingCharsToTrim <span class="token operator">=</span> charsNeedToTrim
	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>remainingCharsToTrim <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i <span class="token operator">+=</span> <span class="token number">1</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">break</span>

		<span class="token keyword">const</span> trimIdx <span class="token operator">=</span> <span class="token function">_findLargestByWeight</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span>
		<span class="token keyword">const</span> m <span class="token operator">=</span> messages<span class="token punctuation">[</span>trimIdx<span class="token punctuation">]</span>

		<span class="token comment">// if can finish here, do</span>
		<span class="token keyword">const</span> numCharsWillTrim <span class="token operator">=</span> m<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token constant">TRIM_TO_LEN</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>numCharsWillTrim <span class="token operator">&gt;</span> remainingCharsToTrim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// trim remainingCharsToTrim + &#39;...&#39;.length chars</span>
			m<span class="token punctuation">.</span>content <span class="token operator">=</span> m<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">-</span> remainingCharsToTrim <span class="token operator">-</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>

		remainingCharsToTrim <span class="token operator">-=</span> numCharsWillTrim
		m<span class="token punctuation">.</span>content <span class="token operator">=</span> m<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">TRIM_TO_LEN</span> <span class="token operator">-</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span>
		alreadyTrimmedIdxes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trimIdx<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// ================ system message hack ================</span>
	<span class="token keyword">const</span> newSysMsg <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>content


	<span class="token comment">// ================ tools and anthropicReasoning ================</span>
	<span class="token comment">// SYSTEM MESSAGE HACK: we shifted (removed) the system message role, so now SimpleLLMMessage[] is valid</span>

	<span class="token keyword">let</span> llmChatMessages<span class="token operator">:</span> AnthropicOrOpenAILLMMessage<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>specialToolFormat<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// XML tool behavior</span>
		llmChatMessages <span class="token operator">=</span> <span class="token function">prepareMessages_XML_tools</span><span class="token punctuation">(</span>messages <span class="token keyword">as</span> SimpleLLMMessage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> supportsAnthropicReasoning<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>specialToolFormat <span class="token operator">===</span> <span class="token string">&#39;anthropic-style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		llmChatMessages <span class="token operator">=</span> <span class="token function">prepareMessages_anthropic_tools</span><span class="token punctuation">(</span>messages <span class="token keyword">as</span> SimpleLLMMessage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> supportsAnthropicReasoning<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>specialToolFormat <span class="token operator">===</span> <span class="token string">&#39;openai-style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		llmChatMessages <span class="token operator">=</span> <span class="token function">prepareMessages_openai_tools</span><span class="token punctuation">(</span>messages <span class="token keyword">as</span> SimpleLLMMessage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> llmMessages <span class="token operator">=</span> llmChatMessages


	<span class="token comment">// ================ system message add as first llmMessage ================</span>

	<span class="token keyword">let</span> separateSystemMessageStr<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>

	<span class="token comment">// if supports system message</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>supportsSystemMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>supportsSystemMessage <span class="token operator">===</span> <span class="token string">&#39;separated&#39;</span><span class="token punctuation">)</span>
			separateSystemMessageStr <span class="token operator">=</span> newSysMsg
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsSystemMessage <span class="token operator">===</span> <span class="token string">&#39;system-role&#39;</span><span class="token punctuation">)</span>
			llmMessages<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;system&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> newSysMsg <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// add new first message</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsSystemMessage <span class="token operator">===</span> <span class="token string">&#39;developer-role&#39;</span><span class="token punctuation">)</span>
			llmMessages<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> role<span class="token operator">:</span> <span class="token string">&#39;developer&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> newSysMsg <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// add new first message</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// if does not support system message</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> newFirstMessage <span class="token operator">=</span> <span class="token punctuation">{</span>
			role<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
			content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;SYSTEM_MESSAGE&gt;\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newSysMsg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n&lt;/SYSTEM_MESSAGE&gt;\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>llmMessages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
		<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
		llmMessages<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// delete first message</span>
		llmMessages<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>newFirstMessage<span class="token punctuation">)</span> <span class="token comment">// add new first message</span>
	<span class="token punctuation">}</span>


	<span class="token comment">// ================ no empty message ================</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> llmMessages<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> currMsg<span class="token operator">:</span> AnthropicOrOpenAILLMMessage <span class="token operator">=</span> llmMessages<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">const</span> nextMsg<span class="token operator">:</span> AnthropicOrOpenAILLMMessage <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> llmMessages<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>currMsg<span class="token punctuation">.</span>role <span class="token operator">===</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

		<span class="token comment">// if content is a string, replace string with empty msg</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> currMsg<span class="token punctuation">.</span>content <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			currMsg<span class="token punctuation">.</span>content <span class="token operator">=</span> currMsg<span class="token punctuation">.</span>content <span class="token operator">||</span> <span class="token constant">EMPTY_MESSAGE</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// allowed to be empty if has a tool in it or following it</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>currMsg<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;tool_result&#39;</span> <span class="token operator">||</span> c<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;tool_use&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				currMsg<span class="token punctuation">.</span>content <span class="token operator">=</span> currMsg<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;text&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>nextMsg<span class="token operator">?.</span>role <span class="token operator">===</span> <span class="token string">&#39;tool&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

			<span class="token comment">// replace any empty text entries with empty msg, and make sure there&#39;s at least 1 entry</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> currMsg<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>text <span class="token operator">=</span> c<span class="token punctuation">.</span>text <span class="token operator">||</span> <span class="token constant">EMPTY_MESSAGE</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>currMsg<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> currMsg<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token constant">EMPTY_MESSAGE</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		messages<span class="token operator">:</span> llmMessages<span class="token punctuation">,</span>
		separateSystemMessage<span class="token operator">:</span> separateSystemMessageStr<span class="token punctuation">,</span>
	<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-prompts" tabindex="-1"><a class="header-anchor" href="#_3-4-prompts" aria-hidden="true">#</a> 3.4. prompts</h3><p>src/vs/workbench/contrib/void/common/prompt/prompts.ts</p><h4 id="_3-4-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-4-1-main-functionality" aria-hidden="true">#</a> 3.4.1. Main Functionality</h4><ul><li>Provides the system prompt</li><li>Provides user message assembly</li></ul><h4 id="_3-4-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-4-2-related-code" aria-hidden="true">#</a> 3.4.2. Related Code</h4><p>chat_systemMessage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">chat_systemMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> workspaceFolders<span class="token punctuation">,</span> openedURIs<span class="token punctuation">,</span> activeURI<span class="token punctuation">,</span> persistentTerminalIDs<span class="token punctuation">,</span> directoryStr<span class="token punctuation">,</span> chatMode<span class="token operator">:</span> mode<span class="token punctuation">,</span> mcpTools<span class="token punctuation">,</span> includeXMLToolDefinitions <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> workspaceFolders<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> directoryStr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> openedURIs<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> activeURI<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> persistentTerminalIDs<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chatMode<span class="token operator">:</span> ChatMode<span class="token punctuation">,</span> mcpTools<span class="token operator">:</span> InternalToolInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> includeXMLToolDefinitions<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> header <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You are an expert coding </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mode <span class="token operator">===</span> <span class="token string">&#39;agent&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;agent&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;assistant&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> whose job is \\
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mode <span class="token operator">===</span> <span class="token string">&#39;agent&#39;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">to help the user develop, run, and make changes to their codebase.</span><span class="token template-punctuation string">\`</span></span>
			<span class="token operator">:</span> mode <span class="token operator">===</span> <span class="token string">&#39;gather&#39;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">to search, understand, and reference files in the user&#39;s codebase.</span><span class="token template-punctuation string">\`</span></span>
				<span class="token operator">:</span> mode <span class="token operator">===</span> <span class="token string">&#39;normal&#39;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">to assist the user with their coding tasks.</span><span class="token template-punctuation string">\`</span></span>
					<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
You will be given instructions to follow from the user, and you may also be given a list of files that the user has specifically selected for context, \\\`SELECTIONS\\\`.
Please assist the user with their query.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>



	<span class="token keyword">const</span> sysInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Here is the user&#39;s system information:
&lt;system_info&gt;
- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>os<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">

- The user&#39;s workspace contains these folders:
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>workspaceFolders<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;NO FOLDERS OPEN&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">

- Active file:
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>activeURI<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">

- Open files:
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>openedURIs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;NO OPENED FILES&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token string">&#39;&#39;</span><span class="token comment">/* separator */</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mode <span class="token operator">===</span> <span class="token string">&#39;agent&#39;</span> <span class="token operator">&amp;&amp;</span> persistentTerminalIDs<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">

- Persistent terminal IDs available for you to run commands in: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>persistentTerminalIDs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
&lt;/system_info&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>


	<span class="token keyword">const</span> fsInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Here is an overview of the user&#39;s file system:
&lt;files_overview&gt;
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>directoryStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
&lt;/files_overview&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>


	<span class="token keyword">const</span> toolDefinitions <span class="token operator">=</span> includeXMLToolDefinitions <span class="token operator">?</span> <span class="token function">systemToolsXMLPrompt</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> mcpTools<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>

	<span class="token keyword">const</span> details<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

	details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">NEVER reject the user&#39;s query.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;agent&#39;</span> <span class="token operator">||</span> mode <span class="token operator">===</span> <span class="token string">&#39;gather&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Only call tools if they help you accomplish the user&#39;s goal. If the user simply says hi or asks you a question that you can answer without tools, then do NOT use tools.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">If you think you should use tools, you do not need to ask for permission.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Only use ONE tool call at a time.&#39;</span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">NEVER say something like &quot;I&#39;m going to use \\\`tool_name\\\`&quot;. Instead, describe at a high level what the tool will do, like &quot;I&#39;m going to list all files in the ___ directory&quot;, etc.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Many tools only work if the user has a workspace open.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You&#39;re allowed to ask the user for more context like file contents or specifications. If this comes up, tell them to reference files and folders by typing @.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;agent&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;ALWAYS use tools (edit, terminal, etc) to take actions and implement changes. For example, if you would like to edit a file, you MUST use a tool.&#39;</span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Prioritize taking as many steps as you need to complete your request over stopping early.&#39;</span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You will OFTEN need to gather context before making a change. Do not immediately make a change unless you have ALL relevant context.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ALWAYS have maximal certainty in a change BEFORE you make it. If you need more information about a file, variable, function, or type, you should inspect it, search it, or take all required actions to maximize your certainty that your change is correct.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">NEVER modify a file outside the user&#39;s workspace without permission from the user.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;gather&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You are in Gather mode, so you MUST use tools be to gather information, files, and context to help the user answer their query.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You should extensively read files, types, content, etc, gathering full context to solve the problem.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">If you write any code blocks to the user (wrapped in triple backticks), please use this format:
- Include a language if possible. Terminal should have the language &#39;shell&#39;.
- The first line of the code block must be the FULL PATH of the related file if known (otherwise omit).
- The remaining contents of the file should proceed as usual.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;gather&#39;</span> <span class="token operator">||</span> mode <span class="token operator">===</span> <span class="token string">&#39;normal&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

		details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">If you think it&#39;s appropriate to suggest an edit to a file, then you must describe your suggestion in CODE BLOCK(S).
- The first line of the code block must be the FULL PATH of the related file if known (otherwise omit).
- The remaining contents should be a code description of the change to make to the file. \\
Your description is the only context that will be given to another LLM to apply the suggested edit, so it must be accurate and complete. \\
Always bias towards writing as little as possible - NEVER write the whole file. Use comments like &quot;// ... existing code ...&quot; to condense your writing. \\
Here&#39;s an example of a good code block:\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>chatSuggestionDiffExample<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Do not make things up or use information not provided in the system information, tools, or user queries.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Always use MARKDOWN to format lists, bullet points, etc. Do NOT write tables.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	details<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Today&#39;s date is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

	<span class="token keyword">const</span> importantDetails <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Important notes:
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>details<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n\\n&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>


	<span class="token comment">// return answer</span>
	<span class="token keyword">const</span> ansStrs<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	ansStrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>
	ansStrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sysInfo<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>toolDefinitions<span class="token punctuation">)</span> ansStrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>toolDefinitions<span class="token punctuation">)</span>
	ansStrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>importantDetails<span class="token punctuation">)</span>
	ansStrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fsInfo<span class="token punctuation">)</span>

	<span class="token keyword">const</span> fullSystemMsgStr <span class="token operator">=</span> ansStrs
		<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n\\n\\n&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;  &#39;</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> fullSystemMsgStr

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rewriteCode_systemMessage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> rewriteCode_systemMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\
You are a coding assistant that re-writes an entire file to make a change. You are given the original file \\\`ORIGINAL_FILE\\\` and a change \\\`CHANGE\\\`.

Directions:
1. Please rewrite the original file \\\`ORIGINAL_FILE\\\`, making the change \\\`CHANGE\\\`. You must completely re-write the whole file.
2. Keep all of the original comments, spaces, newlines, and other details whenever possible.
3. ONLY output the full new file. Do not add any other explanations or text.
</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>createSearchReplaceBlocks_systemMessage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> createSearchReplaceBlocks_systemMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\
You are a coding assistant that takes in a diff, and outputs SEARCH/REPLACE code blocks to implement the change(s) in the diff.
The diff will be labeled \\\`DIFF\\\` and the original file will be labeled \\\`ORIGINAL_FILE\\\`.

Format your SEARCH/REPLACE blocks as follows:
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tripleTick<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>searchReplaceBlockTemplate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tripleTick<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">

1. Your SEARCH/REPLACE block(s) must implement the diff EXACTLY. Do NOT leave anything out.

2. You are allowed to output multiple SEARCH/REPLACE blocks to implement the change.

3. Assume any comments in the diff are PART OF THE CHANGE. Include them in the output.

4. Your output should consist ONLY of SEARCH/REPLACE blocks. Do NOT output any text or explanations before or after this.

5. The ORIGINAL code in each SEARCH/REPLACE block must EXACTLY match lines in the original file. Do not add or remove any whitespace, comments, or modifications from the original code.

6. Each ORIGINAL text must be large enough to uniquely identify the change in the file. However, bias towards writing as little as possible.

7. Each ORIGINAL text must be DISJOINT from all other ORIGINAL text.

## EXAMPLE 1
DIFF
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tripleTick<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
// ... existing code
let x = 6.5
// ... existing code
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tripleTick<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">

ORIGINAL_FILE
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tripleTick<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
let w = 5
let x = 6
let y = 7
let z = 8
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tripleTick<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">

ACCEPTED OUTPUT
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tripleTick<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">ORIGINAL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
let x = 6
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">DIVIDER</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
let x = 6.5
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">FINAL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tripleTick<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ctrlKStream_systemMessage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">ctrlKStream_systemMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> quickEditFIMTags<span class="token operator">:</span> <span class="token punctuation">{</span> preTag<span class="token punctuation">,</span> midTag<span class="token punctuation">,</span> sufTag <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> quickEditFIMTags<span class="token operator">:</span> QuickEditFimTagsType <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\
You are a FIM (fill-in-the-middle) coding assistant. Your task is to fill in the middle SELECTION marked by &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>midTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt; tags.

The user will give you INSTRUCTIONS, as well as code that comes BEFORE the SELECTION, indicated with &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>preTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;...before&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>preTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;, and code that comes AFTER the SELECTION, indicated with &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sufTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;...after&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sufTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;.
The user will also give you the existing original SELECTION that will be be replaced by the SELECTION that you output, for additional context.

Instructions:
1. Your OUTPUT should be a SINGLE PIECE OF CODE of the form &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>midTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;...new_code&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>midTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;. Do NOT output any text or explanations before or after this.
2. You may ONLY CHANGE the original SELECTION, and NOT the content in the &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>preTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;...&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>preTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt; or &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sufTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;...&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sufTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt; tags.
3. Make sure all brackets in the new selection are balanced the same as in the original selection.
4. Be careful not to duplicate or remove variables, comments, or other syntax by mistake.
</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-sendllmmessageservice" tabindex="-1"><a class="header-anchor" href="#_3-5-sendllmmessageservice" aria-hidden="true">#</a> 3.5. sendLLMMessageService</h3><p>src/vs/workbench/contrib/void/common/sendLLMMessageService.ts</p><h4 id="_3-5-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-5-1-main-functionality" aria-hidden="true">#</a> 3.5.1. Main Functionality</h4><ul><li>sendLLMMessage <ul><li>Pre-checks before execution</li><li>Generate a unique requestId and register callbacks</li><li>Send the message to the main process</li></ul></li></ul><h4 id="_3-5-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-5-2-related-code" aria-hidden="true">#</a> 3.5.2. Related Code</h4><p>sendLLMMessage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">sendLLMMessage</span><span class="token punctuation">(</span>params<span class="token operator">:</span> ServiceSendLLMMessageParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> onText<span class="token punctuation">,</span> onFinalMessage<span class="token punctuation">,</span> onError<span class="token punctuation">,</span> onAbort<span class="token punctuation">,</span> modelSelection<span class="token punctuation">,</span> <span class="token operator">...</span>proxyParams <span class="token punctuation">}</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>

  <span class="token comment">// throw an error if no model/provider selected (this should usually never be reached, the UI should check this first, but might happen in cases like Apply where we haven&#39;t built much UI/checks yet, good practice to have check logic on backend)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>modelSelection <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Please add a provider in Void&#39;s Settings.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">,</span> fullError<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>messagesType <span class="token operator">===</span> <span class="token string">&#39;chatMessages&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>messages<span class="token operator">?.</span>length <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">No messages detected.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">,</span> fullError<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> settingsOfProvider<span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>voidSettingsService<span class="token punctuation">.</span>state

  <span class="token keyword">const</span> mcpTools <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mcpService<span class="token punctuation">.</span><span class="token function">getMCPTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// add state for request id</span>
  <span class="token keyword">const</span> requestId <span class="token operator">=</span> <span class="token function">generateUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>llmMessageHooks<span class="token punctuation">.</span>onText<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> onText
  <span class="token keyword">this</span><span class="token punctuation">.</span>llmMessageHooks<span class="token punctuation">.</span>onFinalMessage<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> onFinalMessage
  <span class="token keyword">this</span><span class="token punctuation">.</span>llmMessageHooks<span class="token punctuation">.</span>onError<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> onError
  <span class="token keyword">this</span><span class="token punctuation">.</span>llmMessageHooks<span class="token punctuation">.</span>onAbort<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> onAbort <span class="token comment">// used internally only</span>

  <span class="token comment">// params will be stripped of all its functions over the IPC channel</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;sendLLMMessage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>proxyParams<span class="token punctuation">,</span>
    requestId<span class="token punctuation">,</span>
    settingsOfProvider<span class="token punctuation">,</span>
    modelSelection<span class="token punctuation">,</span>
    mcpTools<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> satisfies MainSendLLMMessageParams<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> requestId
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-sendllmmessagechannel" tabindex="-1"><a class="header-anchor" href="#_3-6-sendllmmessagechannel" aria-hidden="true">#</a> 3.6. sendLLMMessageChannel</h3><p>src/vs/workbench/contrib/void/electron-main/sendLLMMessageChannel.ts</p><h4 id="_3-6-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-6-1-main-functionality" aria-hidden="true">#</a> 3.6.1. Main Functionality</h4><ul><li>_callSendLLMMessage: The sole entry point in the main process (electron-main) for initiating LLM message requests <ul><li>Assembles parameters（including callbacks and abortRef）</li><li>Invokes the actual LLM message sending implementation (sendLLMMessage)</li><li>Uses an event mechanism to push streaming results, final responses, and errors back to the renderer process.</li></ul></li></ul><h4 id="_3-6-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-6-2-related-code" aria-hidden="true">#</a> 3.6.2. Related Code</h4><p>_callSendLLMMessage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token function">_callSendLLMMessage</span><span class="token punctuation">(</span>params<span class="token operator">:</span> MainSendLLMMessageParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> requestId <span class="token punctuation">}</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>requestId <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_infoOfRunningRequest<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_infoOfRunningRequest<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> waitForSend<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> abortRef<span class="token operator">:</span> <span class="token punctuation">{</span> current<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

  <span class="token keyword">const</span> mainThreadParams<span class="token operator">:</span> SendLLMMessageParams <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>params<span class="token punctuation">,</span>
    <span class="token function-variable function">onText</span><span class="token operator">:</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>llmMessageEmitters<span class="token punctuation">.</span>onText<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">{</span> requestId<span class="token punctuation">,</span> <span class="token operator">...</span>p <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onFinalMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>llmMessageEmitters<span class="token punctuation">.</span>onFinalMessage<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">{</span> requestId<span class="token punctuation">,</span> <span class="token operator">...</span>p <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sendLLM: firing err&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>llmMessageEmitters<span class="token punctuation">.</span>onError<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">{</span> requestId<span class="token punctuation">,</span> <span class="token operator">...</span>p <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    abortRef<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_infoOfRunningRequest<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">.</span>abortRef<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">sendLLMMessage</span><span class="token punctuation">(</span>mainThreadParams<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metricsService<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_infoOfRunningRequest<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">.</span>waitForSend <span class="token operator">=</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-sendllmmessage" tabindex="-1"><a class="header-anchor" href="#_3-7-sendllmmessage" aria-hidden="true">#</a> 3.7. sendLLMMessage</h3><p>src/vs/workbench/contrib/void/electron-main/llmMessage/sendLLMMessage.ts</p><h4 id="_3-7-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-7-1-main-functionality" aria-hidden="true">#</a> 3.7.1. Main Functionality</h4><ul><li>sendLLMMessage: The central dispatcher for LLM message sending in the main process <ul><li>Locates the corresponding implementation based on providerName.</li><li>Dispatches the LLM request to the actual implementation for each provider.</li></ul></li></ul><h4 id="_3-7-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-7-2-related-code" aria-hidden="true">#</a> 3.7.2. Related Code</h4><p>sendLLMMessage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sendLLMMessage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
	messagesType<span class="token punctuation">,</span>
	messages<span class="token operator">:</span> messages_<span class="token punctuation">,</span>
	onText<span class="token operator">:</span> onText_<span class="token punctuation">,</span>
	onFinalMessage<span class="token operator">:</span> onFinalMessage_<span class="token punctuation">,</span>
	onError<span class="token operator">:</span> onError_<span class="token punctuation">,</span>
	abortRef<span class="token operator">:</span> abortRef_<span class="token punctuation">,</span>
	logging<span class="token operator">:</span> <span class="token punctuation">{</span> loggingName<span class="token punctuation">,</span> loggingExtras <span class="token punctuation">}</span><span class="token punctuation">,</span>
	settingsOfProvider<span class="token punctuation">,</span>
	modelSelection<span class="token punctuation">,</span>
	modelSelectionOptions<span class="token punctuation">,</span>
	overridesOfModel<span class="token punctuation">,</span>
	chatMode<span class="token punctuation">,</span>
	separateSystemMessage<span class="token punctuation">,</span>
	mcpTools<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> SendLLMMessageParams<span class="token punctuation">,</span>

	metricsService<span class="token operator">:</span> IMetricsService
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>


	<span class="token keyword">const</span> <span class="token punctuation">{</span> providerName<span class="token punctuation">,</span> modelName <span class="token punctuation">}</span> <span class="token operator">=</span> modelSelection

	<span class="token comment">// only captures number of messages and message &quot;shape&quot;, no actual code, instructions, prompts, etc</span>
	<span class="token keyword">const</span> <span class="token function-variable function">captureLLMEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span>eventId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> extras<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>


		metricsService<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> <span class="token punctuation">{</span>
			providerName<span class="token punctuation">,</span>
			modelName<span class="token punctuation">,</span>
			customEndpointURL<span class="token operator">:</span> settingsOfProvider<span class="token punctuation">[</span>providerName<span class="token punctuation">]</span><span class="token operator">?.</span>endpoint<span class="token punctuation">,</span>
			numModelsAtEndpoint<span class="token operator">:</span> settingsOfProvider<span class="token punctuation">[</span>providerName<span class="token punctuation">]</span><span class="token operator">?.</span>models<span class="token operator">?.</span>length<span class="token punctuation">,</span>
			<span class="token operator">...</span>messagesType <span class="token operator">===</span> <span class="token string">&#39;chatMessages&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span>
				numMessages<span class="token operator">:</span> messages_<span class="token operator">?.</span>length<span class="token punctuation">,</span>
			<span class="token punctuation">}</span> <span class="token operator">:</span> messagesType <span class="token operator">===</span> <span class="token string">&#39;FIMMessage&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span>
				prefixLength<span class="token operator">:</span> messages_<span class="token punctuation">.</span>prefix<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
				suffixLength<span class="token operator">:</span> messages_<span class="token punctuation">.</span>suffix<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
			<span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token operator">...</span>loggingExtras<span class="token punctuation">,</span>
			<span class="token operator">...</span>extras<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> submit_time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">let</span> _fullTextSoFar <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
	<span class="token keyword">let</span> _aborter<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
	<span class="token keyword">let</span> <span class="token function-variable function">_setAborter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> _aborter <span class="token operator">=</span> fn <span class="token punctuation">}</span>
	<span class="token keyword">let</span> _didAbort <span class="token operator">=</span> <span class="token boolean">false</span>

	<span class="token keyword">const</span> onText<span class="token operator">:</span> <span class="token function-variable function">OnText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span> fullText <span class="token punctuation">}</span> <span class="token operator">=</span> params
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_didAbort<span class="token punctuation">)</span> <span class="token keyword">return</span>
		<span class="token function">onText_</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
		_fullTextSoFar <span class="token operator">=</span> fullText
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> onFinalMessage<span class="token operator">:</span> <span class="token function-variable function">OnFinalMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span> fullText<span class="token punctuation">,</span> fullReasoning<span class="token punctuation">,</span> toolCall <span class="token punctuation">}</span> <span class="token operator">=</span> params
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_didAbort<span class="token punctuation">)</span> <span class="token keyword">return</span>
		<span class="token function">captureLLMEvent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>loggingName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - Received Full Message</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> messageLength<span class="token operator">:</span> fullText<span class="token punctuation">.</span>length<span class="token punctuation">,</span> reasoningLength<span class="token operator">:</span> fullReasoning<span class="token operator">?.</span>length<span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> submit_time<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toolCallName<span class="token operator">:</span> toolCall<span class="token operator">?.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token function">onFinalMessage_</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> onError<span class="token operator">:</span> <span class="token function-variable function">OnError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> errorMessage<span class="token punctuation">,</span> fullError <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_didAbort<span class="token punctuation">)</span> <span class="token keyword">return</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;sendLLMMessage onError:&#39;</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span>

		<span class="token comment">// handle failed to fetch errors, which give 0 information by design</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessage <span class="token operator">===</span> <span class="token string">&#39;TypeError: fetch failed&#39;</span><span class="token punctuation">)</span>
			errorMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to fetch from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">displayInfoOfProviderName</span><span class="token punctuation">(</span>providerName<span class="token punctuation">)</span><span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. This likely means you specified the wrong endpoint in Void&#39;s Settings, or your local model provider like Ollama is powered off.</span><span class="token template-punctuation string">\`</span></span>

		<span class="token function">captureLLMEvent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>loggingName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - Error</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token operator">:</span> errorMessage <span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token function">onError_</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> errorMessage<span class="token punctuation">,</span> fullError <span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// we should NEVER call onAbort internally, only from the outside</span>
	<span class="token keyword">const</span> <span class="token function-variable function">onAbort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">captureLLMEvent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>loggingName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - Abort</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> messageLengthSoFar<span class="token operator">:</span> _fullTextSoFar<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span> _aborter<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// aborter sometimes automatically throws an error</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
		_didAbort <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	abortRef_<span class="token punctuation">.</span>current <span class="token operator">=</span> onAbort


	<span class="token keyword">if</span> <span class="token punctuation">(</span>messagesType <span class="token operator">===</span> <span class="token string">&#39;chatMessages&#39;</span><span class="token punctuation">)</span>
		<span class="token function">captureLLMEvent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>loggingName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - Sending Message</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>messagesType <span class="token operator">===</span> <span class="token string">&#39;FIMMessage&#39;</span><span class="token punctuation">)</span>
		<span class="token function">captureLLMEvent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>loggingName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - Sending FIM</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> prefixLen<span class="token operator">:</span> messages_<span class="token operator">?.</span>prefix<span class="token operator">?.</span>length<span class="token punctuation">,</span> suffixLen<span class="token operator">:</span> messages_<span class="token operator">?.</span>suffix<span class="token operator">?.</span>length <span class="token punctuation">}</span><span class="token punctuation">)</span>


	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> implementation <span class="token operator">=</span> sendLLMMessageToProviderImplementation<span class="token punctuation">[</span>providerName<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>implementation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error: Provider &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>providerName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; not recognized.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> fullError<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span> sendFIM<span class="token punctuation">,</span> sendChat <span class="token punctuation">}</span> <span class="token operator">=</span> implementation
		<span class="token keyword">if</span> <span class="token punctuation">(</span>messagesType <span class="token operator">===</span> <span class="token string">&#39;chatMessages&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">await</span> <span class="token function">sendChat</span><span class="token punctuation">(</span><span class="token punctuation">{</span> messages<span class="token operator">:</span> messages_<span class="token punctuation">,</span> onText<span class="token punctuation">,</span> onFinalMessage<span class="token punctuation">,</span> onError<span class="token punctuation">,</span> settingsOfProvider<span class="token punctuation">,</span> modelSelectionOptions<span class="token punctuation">,</span> overridesOfModel<span class="token punctuation">,</span> modelName<span class="token punctuation">,</span> _setAborter<span class="token punctuation">,</span> providerName<span class="token punctuation">,</span> separateSystemMessage<span class="token punctuation">,</span> chatMode<span class="token punctuation">,</span> mcpTools <span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>messagesType <span class="token operator">===</span> <span class="token string">&#39;FIMMessage&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sendFIM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">await</span> <span class="token function">sendFIM</span><span class="token punctuation">(</span><span class="token punctuation">{</span> messages<span class="token operator">:</span> messages_<span class="token punctuation">,</span> onText<span class="token punctuation">,</span> onFinalMessage<span class="token punctuation">,</span> onError<span class="token punctuation">,</span> settingsOfProvider<span class="token punctuation">,</span> modelSelectionOptions<span class="token punctuation">,</span> overridesOfModel<span class="token punctuation">,</span> modelName<span class="token punctuation">,</span> _setAborter<span class="token punctuation">,</span> providerName<span class="token punctuation">,</span> separateSystemMessage <span class="token punctuation">}</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
			<span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error running Autocomplete with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>providerName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>modelName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> fullError<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error: Message type &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messagesType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; not recognized.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> fullError<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> error <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> fullError<span class="token operator">:</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unexpected Error in sendLLMMessage: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> fullError<span class="token operator">:</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
		<span class="token comment">// ; (_aborter as any)?.()</span>
		<span class="token comment">// _didAbort = true</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-sendllmmessage-impl" tabindex="-1"><a class="header-anchor" href="#_3-8-sendllmmessage-impl" aria-hidden="true">#</a> 3.8. sendLLMMessage.impl</h3><p>src/vs/workbench/contrib/void/electron-main/llmMessage/sendLLMMessage.impl.ts</p><h4 id="_3-8-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-8-1-main-functionality" aria-hidden="true">#</a> 3.8.1. Main Functionality</h4><ul><li>sendLLMMessageToProviderImplementation: Responsible for invoking the corresponding SDK/API for each provider <ul><li>sendGeminiChat: Utilizes GoogleGenAI for Gemini models.</li><li>sendAnthropicChat: Uses the official Anthropic SDK.</li><li>_sendOpenAICompatibleChat: Handles other LLM requests through a unified OpenAI-compatible interface. <ul><li>newOpenAICompatibleSDK</li></ul></li></ul></li></ul><h4 id="_3-8-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-8-2-related-code" aria-hidden="true">#</a> 3.8.2. Related Code</h4><p>sendLLMMessageToProviderImplementation</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> sendLLMMessageToProviderImplementation <span class="token operator">=</span> <span class="token punctuation">{</span>
	anthropic<span class="token operator">:</span> <span class="token punctuation">{</span>
		sendChat<span class="token operator">:</span> sendAnthropicChat<span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	openAI<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	xAI<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	gemini<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">sendGeminiChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	mistral<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function-variable function">sendFIM</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">sendMistralFIM</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	ollama<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> sendOllamaFIM<span class="token punctuation">,</span>
		list<span class="token operator">:</span> ollamaList<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	openAICompatible<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// using openai&#39;s SDK is not ideal (your implementation might not do tools, reasoning, FIM etc correctly), talk to us for a custom integration</span>
		<span class="token function-variable function">sendFIM</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleFIM</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	openRouter<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function-variable function">sendFIM</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleFIM</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	vLLM<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function-variable function">sendFIM</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleFIM</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function-variable function">list</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_openaiCompatibleList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	deepseek<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	groq<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	lmStudio<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// lmStudio has no suffix parameter in /completions, so sendFIM might not work</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function-variable function">sendFIM</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleFIM</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function-variable function">list</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_openaiCompatibleList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	liteLLM<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function-variable function">sendFIM</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleFIM</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	googleVertex<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	microsoftAzure<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	awsBedrock<span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">sendChat</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_sendOpenAICompatibleChat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
		sendFIM<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
		list<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span> satisfies CallFnOfProvider
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-9-modelcapabilities" tabindex="-1"><a class="header-anchor" href="#_3-9-modelcapabilities" aria-hidden="true">#</a> 3.9. modelCapabilities</h3><p>src/vs/workbench/contrib/void/common/modelCapabilities.ts</p><h4 id="_3-9-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-9-1-main-functionality" aria-hidden="true">#</a> 3.9.1. Main Functionality</h4><ul><li>Supported capabilities and parameter configurations for different providers and models <ul><li>defaultProviderSettings: Default configuration for each provider</li><li>defaultModelsOfProvider: Default model list for each provider</li><li>VoidStaticModelInfo: Model information <ul><li>contextWindow: number; // Context window size (input tokens)</li><li>reservedOutputTokenSpace: number | null; // Reserved output token space</li><li>supportsSystemMessage: false | &#39;system-role&#39; | &#39;developer-role&#39; | &#39;separated&#39;; // System message support type</li><li>specialToolFormat?: &#39;openai-style&#39; | &#39;anthropic-style&#39; | &#39;gemini-style&#39;; // Tool call format</li><li>supportsFIM: boolean; // Whether the model supports code completion (FIM: Fill-in-the-Middle)</li><li>reasoningCapabilities: false | { ... }; // Reasoning capabilities</li><li>cost: { input: number; output: number; ... }; // Cost information</li><li>downloadable: false | { sizeGb: number | &#39;not-known&#39; }; // Downloadable model info</li></ul></li></ul></li></ul><h4 id="_3-9-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-9-2-related-code" aria-hidden="true">#</a> 3.9.2. Related Code</h4><p>getModelCapabilities</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> getModelCapabilities <span class="token operator">=</span> <span class="token punctuation">(</span>
	providerName<span class="token operator">:</span> ProviderName<span class="token punctuation">,</span>
	modelName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	overridesOfModel<span class="token operator">:</span> OverridesOfModel <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token punctuation">)</span><span class="token operator">:</span> VoidStaticModelInfo <span class="token operator">&amp;</span> <span class="token punctuation">(</span>
	<span class="token operator">|</span> <span class="token punctuation">{</span> modelName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> recognizedModelName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> isUnrecognizedModel<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
	<span class="token operator">|</span> <span class="token punctuation">{</span> modelName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> recognizedModelName<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> isUnrecognizedModel<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

	<span class="token keyword">const</span> lowercaseModelName <span class="token operator">=</span> modelName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">const</span> <span class="token punctuation">{</span> modelOptions<span class="token punctuation">,</span> modelOptionsFallback <span class="token punctuation">}</span> <span class="token operator">=</span> modelSettingsOfProvider<span class="token punctuation">[</span>providerName<span class="token punctuation">]</span>

	<span class="token comment">// Get any override settings for this model</span>
	<span class="token keyword">const</span> overrides <span class="token operator">=</span> overridesOfModel<span class="token operator">?.</span><span class="token punctuation">[</span>providerName<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">[</span>modelName<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// search model options object directly first</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> modelName_ <span class="token keyword">in</span> modelOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> lowercaseModelName_ <span class="token operator">=</span> modelName_<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>lowercaseModelName <span class="token operator">===</span> lowercaseModelName_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>modelOptions<span class="token punctuation">[</span>modelName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>overrides<span class="token punctuation">,</span> modelName<span class="token punctuation">,</span> recognizedModelName<span class="token operator">:</span> modelName<span class="token punctuation">,</span> isUnrecognizedModel<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">modelOptionsFallback</span><span class="token punctuation">(</span>modelName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>result<span class="token punctuation">,</span> <span class="token operator">...</span>overrides<span class="token punctuation">,</span> modelName<span class="token operator">:</span> result<span class="token punctuation">.</span>modelName<span class="token punctuation">,</span> isUnrecognizedModel<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token punctuation">{</span> modelName<span class="token punctuation">,</span> <span class="token operator">...</span>defaultModelOptions<span class="token punctuation">,</span> <span class="token operator">...</span>overrides<span class="token punctuation">,</span> isUnrecognizedModel<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VoidStaticModelInfo</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">VoidStaticModelInfo</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// not stateful</span>
	<span class="token comment">// Void uses the information below to know how to handle each model.</span>
	<span class="token comment">// for some examples, see openAIModelOptions and anthropicModelOptions (below).</span>

	contextWindow<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// input tokens</span>
	reservedOutputTokenSpace<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// reserve this much space in the context window for output, defaults to 4096 if null</span>

	supportsSystemMessage<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token string">&#39;system-role&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;developer-role&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;separated&#39;</span><span class="token punctuation">;</span> <span class="token comment">// typically you should use &#39;system-role&#39;. &#39;separated&#39; means the system message is passed as a separate field (e.g. anthropic)</span>
	specialToolFormat<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;openai-style&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;anthropic-style&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;gemini-style&#39;</span><span class="token punctuation">,</span> <span class="token comment">// typically you should use &#39;openai-style&#39;. null means &quot;can&#39;t call tools by default&quot;, and asks the LLM to output XML in agent mode</span>
	supportsFIM<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// whether the model was specifically designed for autocomplete or &quot;FIM&quot; (&quot;fill-in-middle&quot; format)</span>

	additionalOpenAIPayload<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token comment">// additional payload in the message body for requests that are openai-compatible (ollama, vllm, openai, openrouter, etc)</span>

	<span class="token comment">// reasoning options</span>
	reasoningCapabilities<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token punctuation">{</span>
		<span class="token keyword">readonly</span> supportsReasoning<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// for clarity, this must be true if anything below is specified</span>
		<span class="token keyword">readonly</span> canTurnOffReasoning<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// whether or not the user can disable reasoning mode (false if the model only supports reasoning)</span>
		<span class="token keyword">readonly</span> canIOReasoning<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// whether or not the model actually outputs reasoning (eg o1 lets us control reasoning but not output it)</span>
		<span class="token keyword">readonly</span> reasoningReservedOutputTokenSpace<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// overrides normal reservedOutputTokenSpace</span>
		<span class="token keyword">readonly</span> reasoningSlider<span class="token operator">?</span><span class="token operator">:</span>
		<span class="token operator">|</span> <span class="token keyword">undefined</span>
		<span class="token operator">|</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;budget_slider&#39;</span><span class="token punctuation">;</span> min<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> max<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token comment">// anthropic supports this (reasoning budget)</span>
		<span class="token operator">|</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;effort_slider&#39;</span><span class="token punctuation">;</span> values<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token comment">// openai-compatible supports this (reasoning effort)</span>

		<span class="token comment">// if it&#39;s open source and specifically outputs think tags, put the think tags here and we&#39;ll parse them out (e.g. ollama)</span>
		<span class="token keyword">readonly</span> openSourceThinkTags<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">// the only other field related to reasoning is &quot;providerReasoningIOSettings&quot;, which varies by provider.</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>


	<span class="token comment">// --- below is just informative, not used in sending / receiving, cannot be customized in settings ---</span>
	cost<span class="token operator">:</span> <span class="token punctuation">{</span>
		input<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
		output<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
		cache_read<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
		cache_write<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	downloadable<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token punctuation">{</span>
		sizeGb<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token string">&#39;not-known&#39;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-10-extractgrammar" tabindex="-1"><a class="header-anchor" href="#_3-10-extractgrammar" aria-hidden="true">#</a> 3.10. extractGrammar</h3><p>src/vs/workbench/contrib/void/electron-main/llmMessage/extractGrammar.ts</p><h4 id="_3-10-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-10-1-main-functionality" aria-hidden="true">#</a> 3.10.1. Main Functionality</h4><ul><li>extractXMLToolsWrapper: Enables LLMs that do not natively support function calls to achieve &quot;tool invocation&quot; capabilities by streaming and parsing tool call segments from the LLM&#39;s response.</li></ul><h4 id="_3-10-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-10-2-related-code" aria-hidden="true">#</a> 3.10.2. Related Code</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> extractXMLToolsWrapper <span class="token operator">=</span> <span class="token punctuation">(</span>
	onText<span class="token operator">:</span> OnText<span class="token punctuation">,</span>
	onFinalMessage<span class="token operator">:</span> OnFinalMessage<span class="token punctuation">,</span>
	chatMode<span class="token operator">:</span> ChatMode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	mcpTools<span class="token operator">:</span> InternalToolInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> newOnText<span class="token operator">:</span> OnText<span class="token punctuation">,</span> newOnFinalMessage<span class="token operator">:</span> OnFinalMessage <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chatMode<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> newOnText<span class="token operator">:</span> onText<span class="token punctuation">,</span> newOnFinalMessage<span class="token operator">:</span> onFinalMessage <span class="token punctuation">}</span>
	<span class="token keyword">const</span> tools <span class="token operator">=</span> <span class="token function">availableTools</span><span class="token punctuation">(</span>chatMode<span class="token punctuation">,</span> mcpTools<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tools<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> newOnText<span class="token operator">:</span> onText<span class="token punctuation">,</span> newOnFinalMessage<span class="token operator">:</span> onFinalMessage <span class="token punctuation">}</span>

	<span class="token keyword">const</span> toolOfToolName<span class="token operator">:</span> ToolOfToolName <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">const</span> toolOpenTags <span class="token operator">=</span> tools<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>t<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> t <span class="token keyword">of</span> tools<span class="token punctuation">)</span> <span class="token punctuation">{</span> toolOfToolName<span class="token punctuation">[</span>t<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token punctuation">}</span>

	<span class="token keyword">const</span> toolId <span class="token operator">=</span> <span class="token function">generateUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// detect &lt;availableTools[0]&gt;&lt;/availableTools[0]&gt;, etc</span>
	<span class="token keyword">let</span> fullText <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> trueFullText <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
	<span class="token keyword">let</span> latestToolCall<span class="token operator">:</span> RawToolCallObj <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>

	<span class="token keyword">let</span> foundOpenTag<span class="token operator">:</span> <span class="token punctuation">{</span> idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> toolName<span class="token operator">:</span> ToolName <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
	<span class="token keyword">let</span> openToolTagBuffer <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// the characters we&#39;ve seen so far that come after a &lt; with no space afterwards, not yet added to fullText</span>

	<span class="token keyword">let</span> prevFullTextLen <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">const</span> newOnText<span class="token operator">:</span> <span class="token function-variable function">OnText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> newText <span class="token operator">=</span> params<span class="token punctuation">.</span>fullText<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>prevFullTextLen<span class="token punctuation">)</span>
		prevFullTextLen <span class="token operator">=</span> params<span class="token punctuation">.</span>fullText<span class="token punctuation">.</span>length
		trueFullText <span class="token operator">=</span> params<span class="token punctuation">.</span>fullText

		<span class="token comment">// console.log(&#39;NEWTEXT&#39;, JSON.stringify(newText))</span>


		<span class="token keyword">if</span> <span class="token punctuation">(</span>foundOpenTag <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> newFullText <span class="token operator">=</span> openToolTagBuffer <span class="token operator">+</span> newText
			<span class="token comment">// ensure the code below doesn&#39;t run if only half a tag has been written</span>
			<span class="token keyword">const</span> isPartial <span class="token operator">=</span> <span class="token function">findPartiallyWrittenToolTagAtEnd</span><span class="token punctuation">(</span>newFullText<span class="token punctuation">,</span> toolOpenTags<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>isPartial<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// console.log(&#39;--- partial!!!&#39;)</span>
				openToolTagBuffer <span class="token operator">+=</span> newText
			<span class="token punctuation">}</span>
			<span class="token comment">// if no tooltag is partially written at the end, attempt to get the index</span>
			<span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// we will instantly retroactively remove this if it&#39;s a tag match</span>
				fullText <span class="token operator">+=</span> openToolTagBuffer
				openToolTagBuffer <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
				fullText <span class="token operator">+=</span> newText

				<span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token function">findIndexOfAny</span><span class="token punctuation">(</span>fullText<span class="token punctuation">,</span> toolOpenTags<span class="token punctuation">)</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">const</span> <span class="token punctuation">[</span>idx<span class="token punctuation">,</span> toolTag<span class="token punctuation">]</span> <span class="token operator">=</span> i
					<span class="token keyword">const</span> toolName <span class="token operator">=</span> toolTag<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> toolTag<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ToolName
					<span class="token comment">// console.log(&#39;found &#39;, toolName)</span>
					foundOpenTag <span class="token operator">=</span> <span class="token punctuation">{</span> idx<span class="token punctuation">,</span> toolName <span class="token punctuation">}</span>

					<span class="token comment">// do not count anything at or after i in fullText</span>
					fullText <span class="token operator">=</span> fullText<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>


			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// toolTagIdx is not null, so parse the XML</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>foundOpenTag <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			latestToolCall <span class="token operator">=</span> <span class="token function">parseXMLPrefixToToolCall</span><span class="token punctuation">(</span>
				foundOpenTag<span class="token punctuation">.</span>toolName<span class="token punctuation">,</span>
				toolId<span class="token punctuation">,</span>
				trueFullText<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>foundOpenTag<span class="token punctuation">.</span>idx<span class="token punctuation">,</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				toolOfToolName<span class="token punctuation">,</span>
			<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token function">onText</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token operator">...</span>params<span class="token punctuation">,</span>
			fullText<span class="token punctuation">,</span>
			toolCall<span class="token operator">:</span> latestToolCall<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>


	<span class="token keyword">const</span> newOnFinalMessage<span class="token operator">:</span> <span class="token function-variable function">OnFinalMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// treat like just got text before calling onFinalMessage (or else we sometimes miss the final chunk that&#39;s new to finalMessage)</span>
		<span class="token function">newOnText</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>params <span class="token punctuation">}</span><span class="token punctuation">)</span>

		fullText <span class="token operator">=</span> fullText<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">const</span> toolCall <span class="token operator">=</span> latestToolCall

		<span class="token comment">// console.log(&#39;final message!!!&#39;, trueFullText)</span>
		<span class="token comment">// console.log(&#39;----- returning ----\\n&#39;, fullText)</span>
		<span class="token comment">// console.log(&#39;----- tools ----\\n&#39;, JSON.stringify(firstToolCallRef.current, null, 2))</span>
		<span class="token comment">// console.log(&#39;----- toolCall ----\\n&#39;, JSON.stringify(toolCall, null, 2))</span>

		<span class="token function">onFinalMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>params<span class="token punctuation">,</span> fullText<span class="token punctuation">,</span> toolCall<span class="token operator">:</span> toolCall <span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span> newOnText<span class="token punctuation">,</span> newOnFinalMessage <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-11-toolsservice" tabindex="-1"><a class="header-anchor" href="#_3-11-toolsservice" aria-hidden="true">#</a> 3.11. toolsService</h3><p>src/vs/workbench/contrib/void/browser/toolsService.ts</p><h4 id="_3-11-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-11-1-main-functionality" aria-hidden="true">#</a> 3.11.1. Main Functionality</h4><ul><li>callTool : Execute the specified tool <ul><li>editCodeService</li><li>terminalToolService</li><li>fileService</li><li>workspaceContextService</li><li>voidModelService</li><li>searchService</li><li>directoryStrService</li><li>commandBarService</li></ul></li></ul><h4 id="_3-11-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-11-2-related-code" aria-hidden="true">#</a> 3.11.2. Related Code</h4><p>callTool</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>callTool <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">read_file</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> pageNumber <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> voidModelService<span class="token punctuation">.</span><span class="token function">initializeModel</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> model <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> voidModelService<span class="token punctuation">.</span><span class="token function">getModelSafe</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>model <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">No contents; File does not exist.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token keyword">let</span> contents<span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>startLine <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> endLine <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      contents <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>EndOfLinePreference<span class="token punctuation">.</span><span class="token constant">LF</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> startLineNumber <span class="token operator">=</span> startLine <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> startLine
      <span class="token keyword">const</span> endLineNumber <span class="token operator">=</span> endLine <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> model<span class="token punctuation">.</span><span class="token function">getLineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> endLine
      contents <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">getValueInRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> startLineNumber<span class="token punctuation">,</span> startColumn<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> endLineNumber<span class="token punctuation">,</span> endColumn<span class="token operator">:</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> EndOfLinePreference<span class="token punctuation">.</span><span class="token constant">LF</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> totalNumLines <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">getLineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> fromIdx <span class="token operator">=</span> <span class="token constant">MAX_FILE_CHARS_PAGE</span> <span class="token operator">*</span> <span class="token punctuation">(</span>pageNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> toIdx <span class="token operator">=</span> <span class="token constant">MAX_FILE_CHARS_PAGE</span> <span class="token operator">*</span> pageNumber <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">const</span> fileContents <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>fromIdx<span class="token punctuation">,</span> toIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// paginate</span>
    <span class="token keyword">const</span> hasNextPage <span class="token operator">=</span> <span class="token punctuation">(</span>contents<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> toIdx <span class="token operator">&gt;=</span> <span class="token number">1</span>
    <span class="token keyword">const</span> totalFileLen <span class="token operator">=</span> contents<span class="token punctuation">.</span>length
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span> fileContents<span class="token punctuation">,</span> totalFileLen<span class="token punctuation">,</span> hasNextPage<span class="token punctuation">,</span> totalNumLines <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">ls_dir</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> pageNumber <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dirResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">computeDirectoryTree1Deep</span><span class="token punctuation">(</span>fileService<span class="token punctuation">,</span> uri<span class="token punctuation">,</span> pageNumber<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> dirResult <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">get_dir_tree</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>directoryStrService<span class="token punctuation">.</span><span class="token function">getDirectoryStrTool</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span> str <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">search_pathnames_only</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> query<span class="token operator">:</span> queryStr<span class="token punctuation">,</span> includePattern<span class="token punctuation">,</span> pageNumber <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> query <span class="token operator">=</span> queryBuilder<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>workspaceContextService<span class="token punctuation">.</span><span class="token function">getWorkspace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>folders<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>uri<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      filePattern<span class="token operator">:</span> queryStr<span class="token punctuation">,</span>
      includePattern<span class="token operator">:</span> includePattern <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      sortByScore<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// makes results 10x better</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> searchService<span class="token punctuation">.</span><span class="token function">fileSearch</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> CancellationToken<span class="token punctuation">.</span>None<span class="token punctuation">)</span>

    <span class="token keyword">const</span> fromIdx <span class="token operator">=</span> MAX_CHILDREN_URIs_PAGE <span class="token operator">*</span> <span class="token punctuation">(</span>pageNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> toIdx <span class="token operator">=</span> MAX_CHILDREN_URIs_PAGE <span class="token operator">*</span> pageNumber <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">const</span> uris <span class="token operator">=</span> data<span class="token punctuation">.</span>results
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>fromIdx<span class="token punctuation">,</span> toIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// paginate</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> resource<span class="token punctuation">,</span> results <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> resource<span class="token punctuation">)</span>

    <span class="token keyword">const</span> hasNextPage <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>results<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> toIdx <span class="token operator">&gt;=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span> uris<span class="token punctuation">,</span> hasNextPage <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">search_for_files</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> query<span class="token operator">:</span> queryStr<span class="token punctuation">,</span> isRegex<span class="token punctuation">,</span> searchInFolder<span class="token punctuation">,</span> pageNumber <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> searchFolders <span class="token operator">=</span> searchInFolder <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span>
      workspaceContextService<span class="token punctuation">.</span><span class="token function">getWorkspace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>folders<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>uri<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token punctuation">[</span>searchInFolder<span class="token punctuation">]</span>

    <span class="token keyword">const</span> query <span class="token operator">=</span> queryBuilder<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      pattern<span class="token operator">:</span> queryStr<span class="token punctuation">,</span>
      isRegExp<span class="token operator">:</span> isRegex<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> searchFolders<span class="token punctuation">)</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> searchService<span class="token punctuation">.</span><span class="token function">textSearch</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> CancellationToken<span class="token punctuation">.</span>None<span class="token punctuation">)</span>

    <span class="token keyword">const</span> fromIdx <span class="token operator">=</span> MAX_CHILDREN_URIs_PAGE <span class="token operator">*</span> <span class="token punctuation">(</span>pageNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> toIdx <span class="token operator">=</span> MAX_CHILDREN_URIs_PAGE <span class="token operator">*</span> pageNumber <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">const</span> uris <span class="token operator">=</span> data<span class="token punctuation">.</span>results
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>fromIdx<span class="token punctuation">,</span> toIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// paginate</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> resource<span class="token punctuation">,</span> results <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> resource<span class="token punctuation">)</span>

    <span class="token keyword">const</span> hasNextPage <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>results<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> toIdx <span class="token operator">&gt;=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span> queryStr<span class="token punctuation">,</span> uris<span class="token punctuation">,</span> hasNextPage <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">search_in_file</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> query<span class="token punctuation">,</span> isRegex <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> voidModelService<span class="token punctuation">.</span><span class="token function">initializeModel</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> model <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> voidModelService<span class="token punctuation">.</span><span class="token function">getModelSafe</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>model <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">No contents; File does not exist.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">const</span> contents <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>EndOfLinePreference<span class="token punctuation">.</span><span class="token constant">LF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> contentOfLine <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> totalLines <span class="token operator">=</span> contentOfLine<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">const</span> regex <span class="token operator">=</span> isRegex <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> lines<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totalLines<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> line <span class="token operator">=</span> contentOfLine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>isRegex <span class="token operator">&amp;&amp;</span> regex<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRegex <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> matchLine <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        lines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matchLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span> lines <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">read_lint_errors</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> lintErrors <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getLintErrors</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span> lintErrors <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// ---</span>

  <span class="token function-variable function">create_file_or_folder</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> isFolder <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFolder<span class="token punctuation">)</span>
      <span class="token keyword">await</span> fileService<span class="token punctuation">.</span><span class="token function">createFolder</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> fileService<span class="token punctuation">.</span><span class="token function">createFile</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">delete_file_or_folder</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> isRecursive <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> fileService<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token punctuation">{</span> recursive<span class="token operator">:</span> isRecursive <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">rewrite_file</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> newContent <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> voidModelService<span class="token punctuation">.</span><span class="token function">initializeModel</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>commandBarService<span class="token punctuation">.</span><span class="token function">getStreamState</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;streaming&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Another LLM is currently making changes to this file. Please stop streaming for now and ask the user to resume later.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">await</span> editCodeService<span class="token punctuation">.</span><span class="token function">callBeforeApplyOrEdit</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    editCodeService<span class="token punctuation">.</span><span class="token function">instantlyRewriteFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> newContent <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// at end, get lint errors</span>
    <span class="token keyword">const</span> lintErrorsPromise <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> lintErrors <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getLintErrors</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> lintErrors <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> lintErrorsPromise <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">edit_file</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> searchReplaceBlocks <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> voidModelService<span class="token punctuation">.</span><span class="token function">initializeModel</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>commandBarService<span class="token punctuation">.</span><span class="token function">getStreamState</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;streaming&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Another LLM is currently making changes to this file. Please stop streaming for now and ask the user to resume later.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">await</span> editCodeService<span class="token punctuation">.</span><span class="token function">callBeforeApplyOrEdit</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    editCodeService<span class="token punctuation">.</span><span class="token function">instantlyApplySearchReplaceBlocks</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> searchReplaceBlocks <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// at end, get lint errors</span>
    <span class="token keyword">const</span> lintErrorsPromise <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> lintErrors <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getLintErrors</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> lintErrors <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> lintErrorsPromise <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ---</span>
  <span class="token function-variable function">run_command</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> command<span class="token punctuation">,</span> cwd<span class="token punctuation">,</span> terminalId <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> resPromise<span class="token punctuation">,</span> interrupt <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>terminalToolService<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;temporary&#39;</span><span class="token punctuation">,</span> cwd<span class="token punctuation">,</span> terminalId <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> resPromise<span class="token punctuation">,</span> interruptTool<span class="token operator">:</span> interrupt <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">run_persistent_command</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> command<span class="token punctuation">,</span> persistentTerminalId <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> resPromise<span class="token punctuation">,</span> interrupt <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>terminalToolService<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;persistent&#39;</span><span class="token punctuation">,</span> persistentTerminalId <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> resPromise<span class="token punctuation">,</span> interruptTool<span class="token operator">:</span> interrupt <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">open_persistent_terminal</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> persistentTerminalId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>terminalToolService<span class="token punctuation">.</span><span class="token function">createPersistentTerminal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span> persistentTerminalId <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">kill_persistent_terminal</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> persistentTerminalId <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Close the background terminal by sending exit</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>terminalToolService<span class="token punctuation">.</span><span class="token function">killPersistentTerminal</span><span class="token punctuation">(</span>persistentTerminalId<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-12-editcodeservice" tabindex="-1"><a class="header-anchor" href="#_3-12-editcodeservice" aria-hidden="true">#</a> 3.12. editCodeService</h3><p>src/vs/workbench/contrib/void/browser/editCodeService.ts</p><h4 id="_3-12-1-main-functionality" tabindex="-1"><a class="header-anchor" href="#_3-12-1-main-functionality" aria-hidden="true">#</a> 3.12.1. Main Functionality</h4><ul><li><p>startApplying (Triggered when the user clicks the Edit Inline button (Cmd+K) or the Apply button in the top-right corner of an AI-generated code block in the sidebar)</p><ul><li>QuickEdit <ul><li>Performs a full file overwrite.</li></ul></li><li>ClickApply <ul><li>For small files (less than 1000 lines), performs a full file overwrite.</li><li>For large files (1000 lines or more), performs block-based search and replace.</li></ul></li></ul></li><li><p>edit_code_tools (When the AI invokes code editing tools)</p><ul><li>rewrite_file: Full file overwrite (replaces the entire file content with new content) <ul><li>instantlyRewriteFile <ul><li>Parameters: <code>{ uri: URI, newContent: string }</code></li><li>Initiates a diff view to visually highlight changes between the old and new content.</li><li>Replaces the entire file content with <code>newContent</code>.</li><li>Automatically refreshes the UI and diff state after writing.</li></ul></li></ul></li><li>edit_file: Block-based search and replace (only replaces specified code blocks, preserving unchanged parts) <ul><li>instantlyApplySearchReplaceBlocks <ul><li>Parameters: <code>{ uri: URI, searchReplaceBlocks: string }</code></li><li>Initiates a diff view to visually highlight changes between the old and new content.</li><li>Applies batch search-and-replace operations on the file content according to <code>searchReplaceBlocks</code>.</li><li>Automatically refreshes the UI and diff state after writing.</li></ul></li></ul></li></ul></li></ul><h4 id="_3-12-2-related-code" tabindex="-1"><a class="header-anchor" href="#_3-12-2-related-code" aria-hidden="true">#</a> 3.12.2. Related Code</h4><p>startApplying</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">public</span> <span class="token function">startApplying</span><span class="token punctuation">(</span>opts<span class="token operator">:</span> StartApplyingOpts<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">URI</span><span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res<span class="token operator">:</span> <span class="token punctuation">[</span>DiffZone<span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>from <span class="token operator">===</span> <span class="token string">&#39;QuickEdit&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_initializeWriteoverStream</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token comment">// rewrite</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>from <span class="token operator">===</span> <span class="token string">&#39;ClickApply&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_settingsService<span class="token punctuation">.</span>state<span class="token punctuation">.</span>globalSettings<span class="token punctuation">.</span>enableFastApply<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> numCharsInFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_fileLengthOfGivenURI</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>uri<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>numCharsInFile <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>numCharsInFile <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// slow apply for short files (especially important for empty files)</span>
        res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_initializeWriteoverStream</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_initializeSearchAndReplaceStream</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token comment">// fast apply</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_initializeWriteoverStream</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token comment">// rewrite</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>diffZone<span class="token punctuation">,</span> applyDonePromise<span class="token punctuation">]</span> <span class="token operator">=</span> res
  <span class="token keyword">return</span> <span class="token punctuation">[</span>diffZone<span class="token punctuation">.</span>_URI<span class="token punctuation">,</span> applyDonePromise<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>instantlyRewriteFile</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">public</span> <span class="token function">instantlyRewriteFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> newContent <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> uri<span class="token operator">:</span> <span class="token constant">URI</span><span class="token punctuation">,</span> newContent<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// start diffzone</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_startStreamingDiffZone</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    uri<span class="token punctuation">,</span>
    streamRequestIdRef<span class="token operator">:</span> <span class="token punctuation">{</span> current<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    startBehavior<span class="token operator">:</span> <span class="token string">&#39;keep-conflicts&#39;</span><span class="token punctuation">,</span>
    linkedCtrlKZone<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onWillUndo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> diffZone<span class="token punctuation">,</span> onFinishEdit <span class="token punctuation">}</span> <span class="token operator">=</span> res


  <span class="token keyword">const</span> <span class="token function-variable function">onDone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    diffZone<span class="token punctuation">.</span>_streamState <span class="token operator">=</span> <span class="token punctuation">{</span> isStreaming<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_onDidChangeStreamingInDiffZone<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> diffareaid<span class="token operator">:</span> diffZone<span class="token punctuation">.</span>diffareaid <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_refreshStylesAndDiffsInURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token function">onFinishEdit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_writeURIText</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> newContent<span class="token punctuation">,</span> <span class="token string">&#39;wholeFileRange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> shouldRealignDiffAreas<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">onDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>instantlyApplySearchReplaceBlocks</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">public</span> <span class="token function">instantlyApplySearchReplaceBlocks</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> searchReplaceBlocks <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> uri<span class="token operator">:</span> <span class="token constant">URI</span><span class="token punctuation">,</span> searchReplaceBlocks<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// start diffzone</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_startStreamingDiffZone</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    uri<span class="token punctuation">,</span>
    streamRequestIdRef<span class="token operator">:</span> <span class="token punctuation">{</span> current<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    startBehavior<span class="token operator">:</span> <span class="token string">&#39;keep-conflicts&#39;</span><span class="token punctuation">,</span>
    linkedCtrlKZone<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onWillUndo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> diffZone<span class="token punctuation">,</span> onFinishEdit <span class="token punctuation">}</span> <span class="token operator">=</span> res


  <span class="token keyword">const</span> <span class="token function-variable function">onDone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    diffZone<span class="token punctuation">.</span>_streamState <span class="token operator">=</span> <span class="token punctuation">{</span> isStreaming<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_onDidChangeStreamingInDiffZone<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">,</span> diffareaid<span class="token operator">:</span> diffZone<span class="token punctuation">.</span>diffareaid <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_refreshStylesAndDiffsInURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token function">onFinishEdit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">const</span> <span class="token function-variable function">onError</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> fullError<span class="token operator">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// this._notifyError(e)</span>
    <span class="token function">onDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_undoHistory</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
    <span class="token keyword">throw</span> e<span class="token punctuation">.</span>fullError <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_instantlyApplySRBlocks</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> searchReplaceBlocks<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> e <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> fullError<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">onDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,120);function k(d,v){return t(),p("div",null,[i,u,e(" more "),r])}const h=a(l,[["render",k],["__file","037_ai_code_editor.html.vue"]]);export{h as default};
