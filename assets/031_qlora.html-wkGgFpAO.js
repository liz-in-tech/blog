import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,f as i,a as n,b as s,e as o}from"./app-fhreafr2.js";const l={},r=n("h1",{id:"qlora-code-implementation-and-process-analysis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#qlora-code-implementation-and-process-analysis","aria-hidden":"true"},"#"),s(" QLoRA Code Implementation and Process Analysis")],-1),p=n("ul",null,[n("li",null,"Background Introduction: QLoRA / Base Model / Dataset"),n("li",null,"QLoRA Code Implementation"),n("li",null,"QLoRA Process Analysis"),n("li",null,"QLoRA Application Value"),n("li",null,"QLoRA Questions and Thoughts"),n("li",null,"QLoRA Details Supplement")],-1),u=o(`<h2 id="_1-background-introduction-qlora-base-model-dataset" tabindex="-1"><a class="header-anchor" href="#_1-background-introduction-qlora-base-model-dataset" aria-hidden="true">#</a> 1. Background Introduction: QLoRA / Base Model / Dataset</h2><ul><li>QLoRA <ul><li>QLoRA (Quantized Low-Rank Adaptation) fine-tuning method</li><li>Paper: https://arxiv.org/abs/2305.14314</li><li>QLoRA combines 4-bit quantization and LoRA technology, with the specific implementation steps as follows: <ul><li>4-bit Quantization: Using the bitsandbytes library to implement 4-bit NormalFloat (NF4) quantization, compressing the pre-trained model weights to 4 bits, significantly reducing memory usage.</li><li>LoRA: Implementing LoRA through the peft library, adding low-rank adapters (e.g., rank r=16), updating only a small number of parameters.</li><li>Combined Technology: Loading the quantized model, attaching LoRA adapters, and using 16-bit (bfloat16) for forward/backward propagation calculations.</li></ul></li></ul></li><li>Base Model: DistilGPT-2 <ul><li>https://huggingface.co/distilbert/distilgpt2</li></ul></li><li>Alpaca Instruction Dataset <ul><li>Official Version <ul><li>https://huggingface.co/datasets/tatsu-lab/alpaca</li><li>Generated outputs using OpenAI&#39;s text-davinci-003 model; this dataset may contain errors or biases, and users are advised to use it cautiously and consider filtering methods, as mentioned in the dataset description.</li></ul></li><li>yahma/alpaca-cleaned <ul><li>https://huggingface.co/datasets/yahma/alpaca-cleaned</li><li>Cleaned version that fixes hallucinations, incorrect answers, etc., providing high-quality data.</li></ul></li><li>vicgalle/alpaca-gpt4 <ul><li>https://huggingface.co/datasets/vicgalle/alpaca-gpt4</li><li>Based on Alpaca prompts, generated outputs using GPT-4, but not mentioned as cleaned, may contain uncorrected errors.</li></ul></li></ul></li></ul><h2 id="_2-qlora-code-implementation" tabindex="-1"><a class="header-anchor" href="#_2-qlora-code-implementation" aria-hidden="true">#</a> 2. QLoRA Code Implementation</h2><ul><li>Load Model</li><li>Preparing Dataset</li><li>Fine-Tuning</li><li>Save Trained Model</li></ul><h3 id="_2-1-load-model" tabindex="-1"><a class="header-anchor" href="#_2-1-load-model" aria-hidden="true">#</a> 2.1. Load Model</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Quantization Configuration</span>
bnb_config <span class="token operator">=</span> BitsAndBytesConfig<span class="token punctuation">(</span>
    load_in_4bit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># Enable 4-bit quantization, replacing the model&#39;s linear layers (Linear / Conv1D) with quantized Linear4bit layers.</span>
    bnb_4bit_use_double_quant<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># Enable nested quantization to further compress quantized parameters, reducing storage overhead (Linear4bit internal computation logic).</span>
    bnb_4bit_quant_type<span class="token operator">=</span><span class="token string">&quot;nf4&quot;</span><span class="token punctuation">,</span> <span class="token comment"># There are two formats for 4-bit quantization (nf4 and fp4), where nf4 is optimized based on normal distribution and usually performs better.</span>
    bnb_4bit_compute_dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>bfloat16 <span class="token comment"># Set the data type for computation; actual weights are stored in 4-bit but mapped to bfloat16 for computation, meaning that the intermediate calculations in Linear4bit use bfloat16.</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Select distilbert/distilgpt2 as the base model</span>
model_id <span class="token operator">=</span> <span class="token string">&quot;distilbert/distilgpt2&quot;</span>

<span class="token comment"># Load the entire model onto GPU 0</span>
device_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>

<span class="token comment"># Load the original model</span>
original_model <span class="token operator">=</span> AutoModelForCausalLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_id<span class="token punctuation">)</span>

<span class="token comment"># Load the quantized model (applying the quantization configuration to the model)</span>
quantized_model <span class="token operator">=</span> AutoModelForCausalLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_id<span class="token punctuation">,</span>
                    quantization_config<span class="token operator">=</span>bnb_config<span class="token punctuation">,</span>
                    device_map<span class="token operator">=</span>device_map<span class="token punctuation">,</span>
                    use_cache <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Load the tokenizer corresponding to the model and set the padding token to the end token</span>
tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_id<span class="token punctuation">)</span>
tokenizer<span class="token punctuation">.</span>pad_token <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>eos_token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-preparing-dataset" tabindex="-1"><a class="header-anchor" href="#_2-2-preparing-dataset" aria-hidden="true">#</a> 2.2. Preparing Dataset</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Select yahma/alpaca-cleaned as the dataset</span>
dataset_name <span class="token operator">=</span> <span class="token string">&quot;yahma/alpaca-cleaned&quot;</span>

<span class="token comment"># Load the dataset</span>
full_dataset <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span>dataset_name<span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">&quot;train&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Select a small subset (1000 entries)</span>
small_subset <span class="token operator">=</span> full_dataset<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Define the Alpaca dataset&#39;s prompt template</span>
alpaca_prompt <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
{}

### Input:
{}

### Response:
{}&quot;&quot;&quot;</span>

<span class="token comment"># Define the formatting_prompts_func function</span>
<span class="token keyword">def</span> <span class="token function">formatting_prompts_func</span><span class="token punctuation">(</span>examples<span class="token punctuation">)</span><span class="token punctuation">:</span>

    instructions <span class="token operator">=</span> examples<span class="token punctuation">[</span><span class="token string">&quot;instruction&quot;</span><span class="token punctuation">]</span>
    inputs       <span class="token operator">=</span> examples<span class="token punctuation">[</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">]</span>
    outputs      <span class="token operator">=</span> examples<span class="token punctuation">[</span><span class="token string">&quot;output&quot;</span><span class="token punctuation">]</span>

    texts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> instruction<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> output <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>instructions<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> outputs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        text <span class="token operator">=</span> alpaca_prompt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>instruction<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span>
        texts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string">&quot;text&quot;</span> <span class="token punctuation">:</span> texts <span class="token punctuation">}</span>


<span class="token comment"># Apply the formatting_prompts_func function</span>
small_subset <span class="token operator">=</span> small_subset<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>formatting_prompts_func<span class="token punctuation">,</span> batched<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Apply tokenizer to &quot;text&quot;; if too long, truncate to the model&#39;s maximum length; pad all samples to the same length for batch training convenience</span>
small_subset <span class="token operator">=</span> small_subset<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> samples<span class="token punctuation">:</span> tokenizer<span class="token punctuation">(</span>samples<span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">&quot;max_length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batched<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-fine-tuning" tabindex="-1"><a class="header-anchor" href="#_2-3-fine-tuning" aria-hidden="true">#</a> 2.3. Fine-Tuning</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># LoRA Parameter Configuration</span>
peft_config <span class="token operator">=</span> LoraConfig<span class="token punctuation">(</span>
    r<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment"># Rank, larger values increase expressive power but also increase parameters.</span>
    lora_alpha<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token comment"># Scaling factor.</span>
    lora_dropout<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> <span class="token comment"># Dropout probability.</span>
    target_modules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;c_attn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c_fc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># Modules where LoRA needs to be inserted.</span>
    bias<span class="token operator">=</span><span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span> <span class="token comment"># Whether to train the bias term: No.</span>
    task_type<span class="token operator">=</span><span class="token string">&quot;CAUSAL_LM&quot;</span><span class="token punctuation">,</span> <span class="token comment"># Task type: Causal Language Modeling.</span>
<span class="token punctuation">)</span>

<span class="token comment"># Training Parameter Configuration</span>
training_args <span class="token operator">=</span> SFTConfig<span class="token punctuation">(</span>
    output_dir<span class="token operator">=</span><span class="token string">&quot;outputs&quot;</span><span class="token punctuation">,</span> <span class="token comment"># Output path.</span>
    logging_steps<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># How often to log.</span>
    num_train_epochs<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment"># Number of training epochs.</span>
    per_device_train_batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment"># Training batch size per device.</span>
    per_device_eval_batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment"># Evaluation batch size per device.</span>
    gradient_accumulation_steps<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment"># Gradient accumulation.</span>
    gradient_checkpointing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># Enable gradient checkpointing.</span>
    learning_rate<span class="token operator">=</span><span class="token number">2e-4</span><span class="token punctuation">,</span> <span class="token comment"># Learning rate.</span>
    optim<span class="token operator">=</span><span class="token string">&quot;adamw_8bit&quot;</span><span class="token punctuation">,</span> <span class="token comment"># Optimizer.</span>
    weight_decay<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token comment"># Weight decay.</span>
    max_grad_norm<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token comment"># Gradient clipping.</span>
    warmup_ratio<span class="token operator">=</span><span class="token number">0.03</span><span class="token punctuation">,</span> <span class="token comment"># Warmup ratio.</span>
    fp16<span class="token operator">=</span><span class="token keyword">not</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_bf16_supported<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># Use half-precision training.</span>
    bf16<span class="token operator">=</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_bf16_supported<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    dataset_text_field<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># Instantiate SFTTrainer</span>
trainer <span class="token operator">=</span> SFTTrainer<span class="token punctuation">(</span>
    model<span class="token operator">=</span>quantized_model<span class="token punctuation">,</span>
    train_dataset<span class="token operator">=</span>small_subset<span class="token punctuation">,</span>
    peft_config<span class="token operator">=</span>peft_config<span class="token punctuation">,</span>
    args<span class="token operator">=</span>training_args<span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># Output the number of trainable parameters</span>
trainer<span class="token punctuation">.</span>model<span class="token punctuation">.</span>print_trainable_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Start training</span>
trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-save-trained-model" tabindex="-1"><a class="header-anchor" href="#_2-4-save-trained-model" aria-hidden="true">#</a> 2.4. Save Trained Model</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Save trained model</span>
peft_model <span class="token operator">=</span> <span class="token string">&quot;distilgpt2-qlora&quot;</span>

trainer<span class="token punctuation">.</span>model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span>peft_model<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>base_model <span class="token operator">=</span> AutoModelForCausalLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>
    model_id<span class="token punctuation">,</span>
    low_cpu_mem_usage<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    return_dict<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    torch_dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float16<span class="token punctuation">,</span>
    device_map<span class="token operator">=</span>device_map<span class="token punctuation">,</span>
<span class="token punctuation">)</span>

peft_model <span class="token operator">=</span> PeftModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>base_model<span class="token punctuation">,</span> peft_model<span class="token punctuation">)</span>
merged_model <span class="token operator">=</span> peft_model<span class="token punctuation">.</span>merge_and_unload<span class="token punctuation">(</span><span class="token punctuation">)</span>
merged_model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;merged_model&quot;</span><span class="token punctuation">,</span> safe_serialization<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_shard_size<span class="token operator">=</span><span class="token string">&quot;2GB&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-qlora-process-analysis" tabindex="-1"><a class="header-anchor" href="#_3-qlora-process-analysis" aria-hidden="true">#</a> 3. QLoRA Process Analysis</h2><ul><li>Comparison of Original Model and Quantized Model</li><li>Dataset Processing Flow</li><li>Calculation of Trainable Parameters</li></ul><h3 id="_3-1-comparison-of-original-model-and-quantized-model" tabindex="-1"><a class="header-anchor" href="#_3-1-comparison-of-original-model-and-quantized-model" aria-hidden="true">#</a> 3.1. Comparison of Original Model and Quantized Model</h3><ul><li>The number of parameters remains unchanged (still the same number of matrix elements) <ul><li>81912576</li></ul></li><li>Parameter precision and size have changed (represented in 4-bit) <ul><li>Parameter size changes <ul><li>Original size: 318.47 MB <ul><li>Estimate: 81912576 * 4 bytes / (1024^2) = 308.66 MB</li></ul></li><li>Quantized size: 101.49 MB <ul><li>Estimate <ul><li>Number of parameters at 0.5 bytes: 42467328 = 6 layers * (768 * 2304 + 768 * 768 + 2 * 768 * 3072)</li><li>Number of parameters at 2 bytes: 39445248 = 81912576 - 42467328</li><li>(0.5 * 42467328 + 2 * 39445248) / (1024^2) = 95.49 MB</li></ul></li></ul></li></ul></li><li>Model structure changes <ul><li>attn <ul><li>(c_attn): Conv1D(nf=2304, nx=768) -&gt; (c_attn): Linear4bit(in_features=768, out_features=2304, bias=True)</li><li>(c_proj): Conv1D(nf=768, nx=768) -&gt; (c_proj): Linear4bit(in_features=768, out_features=768, bias=True)</li></ul></li><li>mlp <ul><li>(c_fc): Conv1D(nf=3072, nx=768) -&gt; (c_fc): Linear4bit(in_features=768, out_features=3072, bias=True)</li><li>(c_proj): Conv1D(nf=768, nx=3072) -&gt; (c_proj): Linear4bit(in_features=3072, out_features=768, bias=True)</li></ul></li></ul></li><li>Parameter precision changes <ul><li>Before quantization: <ul><li>All parameters are dtype=torch.float32 (32-bit) <ul><li>transformer.h.0.attn.c_attn.weight: torch.Size([768, 2304]), dtype=torch.float32</li><li>transformer.h.0.attn.c_proj.weight: torch.Size([768, 768]), dtype=torch.float32</li><li>transformer.h.0.mlp.c_fc.weight: torch.Size([768, 3072]), dtype=torch.float32</li><li>transformer.h.0.mlp.c_proj.weight: torch.Size([3072, 768]), dtype=torch.float32</li></ul></li></ul></li><li>After quantization: <ul><li>dtype=torch.uint8 (4 places in each layer become 4-bit) actually stored using compression techniques, combining 2 4-bit weights into int8 <ul><li>transformer.h.0.attn.c_attn.weight: torch.Size([884736, 1]), dtype=torch.uint8</li><li>transformer.h.0.attn.c_proj.weight: torch.Size([294912, 1]), dtype=torch.uint8</li><li>transformer.h.0.mlp.c_fc.weight: torch.Size([1179648, 1]), dtype=torch.uint8</li><li>transformer.h.0.mlp.c_proj.weight: torch.Size([1179648, 1]), dtype=torch.uint8</li></ul></li><li>dtype=torch.float16 (the remaining parameters become float16)</li></ul></li></ul></li></ul></li></ul><p>Changes Explanation</p><ul><li>Changes <ul><li>Before quantization: transformer.h.0.attn.c_attn.weight: torch.Size([768, 2304]), dtype=torch.float32</li><li>After quantization: transformer.h.0.attn.c_attn.weight: torch.Size([884736, 1]), dtype=torch.uint8</li></ul></li><li>Explanation <ul><li>The original float32 matrix [768, 2304] → The total number of parameters is 768 * 2304 = 1,769,472</li><li>Representing it in 4-bit means 1,769,472 * 0.5 byte = 884,736 bytes = 884736 uint8 (stored as packed uint8, where each byte stores two 4-bit weights)</li><li>[884736, 1] is the result of unfolding the original weights into one dimension and storing them in quantized form.</li></ul></li></ul><h3 id="_3-2-dataset-processing-flow" tabindex="-1"><a class="header-anchor" href="#_3-2-dataset-processing-flow" aria-hidden="true">#</a> 3.2. Dataset Processing Flow</h3><ul><li><ol><li>Load the dataset</li></ol><ul><li>The dataset has 3 columns <ul><li>instruction</li><li>input</li><li>output</li></ul></li><li>The dataset contains 51760 entries</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Dataset({
    features: [&#39;output&#39;, &#39;input&#39;, &#39;instruction&#39;],
    num_rows: 51760
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="2"><li>Select a small subset</li></ol><ul><li>Randomly select 1000 entries</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Dataset({
    features: [&#39;output&#39;, &#39;input&#39;, &#39;instruction&#39;],
    num_rows: 1000
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="3"><li>Concatenate the &#39;output&#39;, &#39;input&#39;, and &#39;instruction&#39; fields into a string, as the &#39;text&#39; field</li></ol></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Dataset({
    features: [&#39;output&#39;, &#39;input&#39;, &#39;instruction&#39;, &#39;text&#39;],
    num_rows: 1000
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="4"><li>Tokenize the &quot;text&quot; field using the tokenizer, generating &quot;input_ids&quot; and &quot;attention_mask&quot; fields</li></ol></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Dataset({
    features: [&#39;output&#39;, &#39;input&#39;, &#39;instruction&#39;, &#39;text&#39;, &#39;input_ids&#39;, &#39;attention_mask&#39;],
    num_rows: 1000
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-calculation-of-trainable-parameters" tabindex="-1"><a class="header-anchor" href="#_3-3-calculation-of-trainable-parameters" aria-hidden="true">#</a> 3.3. Calculation of Trainable Parameters</h3><ul><li>Base model parameter count <ul><li>81912576</li></ul></li><li>Target modules in the model structure <ul><li>attn <ul><li>(c_attn): Conv1D(nf=2304, nx=768) -&gt; (c_attn): Linear4bit(in_features=768, out_features=2304, bias=True)</li><li>(c_proj): Conv1D(nf=768, nx=768) -&gt; (c_proj): Linear4bit(in_features=768, out_features=768, bias=True)</li></ul></li><li>mlp <ul><li>(c_fc): Conv1D(nf=3072, nx=768) -&gt; (c_fc): Linear4bit(in_features=768, out_features=3072, bias=True)</li><li>(c_proj): Conv1D(nf=768, nx=3072) -&gt; (c_proj): Linear4bit(in_features=3072, out_features=768, bias=True)</li></ul></li></ul></li><li>Relationship between parameters <ul><li>Total parameter count 82,502,400 - QLoRA trainable parameter count 589,824 = Base model parameter count 81912576</li><li>QLoRA trainable parameter count 589,824 = 6 layers * (24576 + 12288 + 30720 + 30720) = 6 * 98304 <ul><li>A total of 6 layers, each with 4 target modules <ul><li>c_attn: 768 * 8 + 2304 * 8 = 24576</li><li>c_proj: 768 * 8 + 768 * 8 = 12288</li><li>c_fc: 3072 * 8 + 768 * 8 = 30720</li><li>c_proj: 768 * 8 + 3072 * 8 = 30720</li></ul></li></ul></li></ul></li></ul><h2 id="_4-qlora-application-value" tabindex="-1"><a class="header-anchor" href="#_4-qlora-application-value" aria-hidden="true">#</a> 4. QLoRA Application Value</h2><h3 id="_4-1-comparison-of-qlora-and-full-parameter-fine-tuning-methods" tabindex="-1"><a class="header-anchor" href="#_4-1-comparison-of-qlora-and-full-parameter-fine-tuning-methods" aria-hidden="true">#</a> 4.1. Comparison of QLoRA and Full Parameter Fine-Tuning Methods</h3><ul><li>Fine-tuning parameter count: <ul><li>QLoRA: Only fine-tunes a small portion of parameters (LoRA Adapter), in this case, the trainable parameters account for only 0.7149% of the total parameters.</li><li>Full parameter fine-tuning: Updates all model parameters, requiring more memory and computational resources.</li></ul></li><li>Memory Usage: <ul><li>QLoRA: Uses 4-bit quantization, significantly reducing memory usage.</li><li>Full parameter fine-tuning: Requires full precision (e.g., 16-bit or 32-bit), usually needing larger GPU memory.</li></ul></li><li>Training Speed: <ul><li>QLoRA: Due to fewer parameters and lower precision, training is faster.</li><li>Full parameter fine-tuning: Updates all weights, resulting in longer training times.</li></ul></li><li>Performance: <ul><li>QLoRA: Due to quantization and limited parameter updates, performance may be slightly lower than full parameter fine-tuning, but still retains most capabilities.</li><li>Full parameter fine-tuning: Since all weights are optimized, performance may be higher.</li></ul></li><li>Applicable Scenarios: <ul><li>QLoRA: Suitable for resource-constrained environments or rapid experimentation.</li><li>Full parameter fine-tuning: Suitable for resource-rich environments where maximum precision is required.</li></ul></li></ul><h3 id="_4-2-advantages-and-potential-limitations-of-qlora-in-this-task" tabindex="-1"><a class="header-anchor" href="#_4-2-advantages-and-potential-limitations-of-qlora-in-this-task" aria-hidden="true">#</a> 4.2. Advantages and Potential Limitations of QLoRA in This Task</h3><p>Advantages:</p><ul><li>Memory Efficiency: 4-bit quantization and LoRA reduce memory usage, allowing fine-tuning to run on smaller GPUs (e.g., Colab free version).</li><li>Speed: Due to fewer parameters and lower precision, training speed is faster, suitable for rapid iteration.</li><li>Retaining Pre-trained Knowledge: Freezing most weights retains the generalization ability of the base model while adapting to the task.</li><li>Suitable for Small Datasets: Performs well on small datasets like the 1,000-entry Alpaca subset, reducing the risk of overfitting.</li></ul><p>Limitations:</p><ul><li>Performance Trade-off: Quantization and LoRA may lead to slightly lower performance than full parameter fine-tuning, especially in complex tasks.</li><li>Task Specificity: LoRA adapters are task-specific; switching tasks requires retraining or maintaining multiple adapters.</li><li>Quantization Noise: 4-bit precision introduces noise, potentially affecting output quality.</li><li>Hyperparameter Sensitivity: Adjusting <code>r</code>, <code>lora_alpha</code>, and quantization settings requires experimentation, increasing complexity.</li></ul><h2 id="_5-qlora-questions-and-thoughts" tabindex="-1"><a class="header-anchor" href="#_5-qlora-questions-and-thoughts" aria-hidden="true">#</a> 5. QLoRA Questions and Thoughts</h2><h3 id="_5-1-is-the-only-difference-between-lora-and-qlora-fine-tuning-the-quantization-of-the-model-before-training" tabindex="-1"><a class="header-anchor" href="#_5-1-is-the-only-difference-between-lora-and-qlora-fine-tuning-the-quantization-of-the-model-before-training" aria-hidden="true">#</a> 5.1. Is the only difference between LoRA and QLoRA fine-tuning the quantization of the model before training?</h3><p>Yes, the main difference is whether the model being trained has been quantized beforehand.</p><ul><li>LoRA fine-tunes a pre-trained model that is not quantized, with weights typically in float32.</li><li>QLoRA fine-tunes a pre-trained model that is quantized, such as 4-bit or 8-bit. The weights are in quantized uint8 or int8 format.</li></ul><p>Memory and Inference Efficiency:</p><ul><li>LoRA occupies more memory during fine-tuning because it uses a full-precision pre-trained model (usually float32).</li><li>QLoRA&#39;s advantage lies in significantly reduced memory usage since the model has already been quantized to 4-bit. Even large models can run in limited memory.</li></ul><p>Similarities:</p><ul><li>Both LoRA and QLoRA fine-tune the original model by training a low-rank adaptation matrix without modifying the original pre-trained weights.</li><li>Both only train the adaptation layers, resulting in relatively few parameters, making them suitable for resource-limited scenarios.</li></ul><p>LoRA (Low-Rank Adaptation) Fine-Tuning Steps:</p><ul><li>Load a pre-trained model (usually with float32 weights).</li><li>Freeze the original weights and only train the LoRA adaptation matrix.</li><li>During fine-tuning, adapt the model to specific tasks by training the LoRA layers.</li><li>During inference, use the original weights plus the trained LoRA layer&#39;s adaptation matrix.</li></ul><p>QLoRA (Quantized LoRA) Fine-Tuning Steps:</p><ul><li>Quantize the pre-trained model: Load a model that has already been quantized, such as a 4-bit or 8-bit model.</li><li>Freeze the quantized weights and only train the LoRA adaptation matrix.</li><li>Fine-tune on the quantized model, optimizing the LoRA layer&#39;s adaptation matrix.</li><li>During inference, still use the quantized weights plus the trained LoRA adaptation matrix.</li></ul><h3 id="_5-2-why-is-quantization-usually-only-applied-to-linear-layers" tabindex="-1"><a class="header-anchor" href="#_5-2-why-is-quantization-usually-only-applied-to-linear-layers" aria-hidden="true">#</a> 5.2. Why is quantization usually only applied to linear layers?</h3><p>The reasons can be explained from several perspectives: mathematics, engineering implementation, and model impact.</p><ul><li><ol><li>Linear layers have the most parameters and the highest computational load (parameter concentration).</li></ol><ul><li>Layer normalization (LayerNorm), activation functions (GELU), Dropout, etc., contain almost no weights or only a very small number of parameters.</li><li>Therefore, prioritizing the quantization of linear layers yields the greatest benefits and minimally impacts the model structure.</li></ul></li><li><ol start="2"><li>Linear layer structures are simple and easy to quantize and decode (simple mathematical structure).</li></ol><ul><li>Linear layers are among the few that can quantize weights + activations + gradients simultaneously (if needed), making them the main battleground.</li><li>Quantization typically involves two types: <ul><li>Weight Quantization: Storing weights in low precision (most common).</li><li>Activation Quantization: Quantizing intermediate values (more complex).</li></ul></li><li>Linear transformations have a very clear, fixed mathematical structure, suitable for being: <ul><li>Encoded as 4-bit / 8-bit arrays.</li><li>Decoded using scale + zero_point for recovery.</li><li>Accelerated using kernel-fusion (e.g., CUDA implementations provided by bitsandbytes).</li></ul></li></ul></li><li><ol start="3"><li>Non-linear operations are difficult to quantize (other layers are not suitable; quantizing linear layers has minimal impact).</li></ol><ul><li>These layers either contain no parameters or exhibit significant behavioral changes; quantizing these parts yields minimal benefits and increases complexity and error. <ul><li>Non-linear functions (GELU, ReLU) have no fixed weights, making them difficult to encode in advance.</li><li>Normalization (LayerNorm, BatchNorm) involves dynamically calculating means, variances, and divisions, making static quantization challenging.</li><li>Control structures (Dropout, Mask) behave differently during training/inference, making quantization less meaningful.</li></ul></li></ul></li><li><ol start="4"><li>Engineering has already highly optimized linear layer quantization (engineering optimization).</li></ol><ul><li>Existing frameworks have focused on optimizing operators like Linear and Conv, with poor or no support for non-linear operations. <ul><li>bitsandbytes</li><li>Intel Neural Compressor</li><li>NVIDIA TensorRT</li><li>ONNX Runtime + QNNPACK</li></ul></li></ul></li></ul><h3 id="_5-3-why-is-the-lm-head-layer-not-quantized-even-though-it-is-also-a-linear-layer" tabindex="-1"><a class="header-anchor" href="#_5-3-why-is-the-lm-head-layer-not-quantized-even-though-it-is-also-a-linear-layer" aria-hidden="true">#</a> 5.3. Why is the lm_head layer not quantized, even though it is also a linear layer?</h3><p>In theory, this layer could also be quantized, but it is not quantized by default.</p><p>The reasons are mainly as follows:</p><ul><li><ol><li>lm_head is used for output → Precision impact is more sensitive (precision sensitivity).</li></ol><ul><li>lm_head is the last layer of the model, used to project hidden states into the vocabulary space, outputting logits.</li><li>The output of this layer directly affects: <ul><li>The distribution of softmax.</li><li>The token ordering of predictions.</li><li>The quality of the generated text.</li></ul></li><li>Therefore, it is very sensitive to precision. A slight weight error may lead to incorrect token ordering, generating completely different results.</li></ul></li><li><ol start="2"><li>Most quantization frameworks skip lm_head by default (framework default behavior, limited space savings).</li></ol><ul><li>For example, bitsandbytes, AutoGPTQ, etc., by default do not perform 4-bit quantization on lm_head when quantizing Transformer models because: <ul><li>This layer usually has only one instance (unlike attention and MLP, which have many layers).</li><li>The precision impact is greater.</li><li>Space savings are limited (relative to the entire model), making quantization less meaningful.</li></ul></li></ul></li><li><ol start="3"><li>It may be used for weight sharing (tie_weights) (weight sharing, bound to embedding weights, quantization may be incompatible).</li></ol><ul><li>In some models, lm_head.weight shares weights with the embedding layer wte.weight (tie-weights).</li><li>In this case, quantizing lm_head would affect the embedding → encoding → decoding entire loop.</li><li>If you quantize lm_head but do not synchronize the quantization of wte, or vice versa, it may lead to inconsistencies or even errors.</li></ul></li></ul><h3 id="_5-4-why-do-non-linear-layers-change-dtype-to-float16-after-quantization" tabindex="-1"><a class="header-anchor" href="#_5-4-why-do-non-linear-layers-change-dtype-to-float16-after-quantization" aria-hidden="true">#</a> 5.4. Why do non-linear layers change dtype to float16 after quantization?</h3><p>Although these layers do not explicitly set their dtype, they will automatically be converted to a lighter precision when load_in_4bit=True.</p><p>This is actually part of the transformers&#39; AutoPrecision inference mechanism (automatic scheduling), used in conjunction with bitsandbytes.</p><h3 id="_5-5-what-changes-occurred-in-the-precision-of-the-quantized-model" tabindex="-1"><a class="header-anchor" href="#_5-5-what-changes-occurred-in-the-precision-of-the-quantized-model" aria-hidden="true">#</a> 5.5. What changes occurred in the precision of the quantized model?</h3><ul><li>The original model&#39;s precision is float32 (disk).</li><li>The weights of the quantized model are stored as int4 (packed uint8) (memory).</li><li>Input float32/bfloat16 (externally passed).</li><li>Weights int4 are temporarily decoded into bfloat16 for computation.</li><li>Double quant → further compression of scale, reducing burden.</li><li>Output bfloat16 → Subsequent layers can continue executing in low precision.</li></ul><p>Note 1: Only the storage of linear layers is 4-bit; the storage, computation, and decoding output of other layers are all bfloat16/float16.</p><p>Note 2: Inference does not change the model&#39;s parameters; only during backpropagation do they change. During inference, the 4-bit weights are temporarily converted to bfloat16 for computation, and the output is also of bfloat16 type.</p><p>Note 3: Fine-tuning a quantized model (e.g., LoRA + 4-bit) also only updates a portion of float parameters (like the LoRA adapter); the 4-bit weights themselves are not directly modified.</p><h3 id="_5-6-what-is-bnb-4bit-compute-dtype-torch-bfloat16-for-and-how-do-computation-precision-and-storage-precision-differ" tabindex="-1"><a class="header-anchor" href="#_5-6-what-is-bnb-4bit-compute-dtype-torch-bfloat16-for-and-how-do-computation-precision-and-storage-precision-differ" aria-hidden="true">#</a> 5.6. What is bnb_4bit_compute_dtype=torch.bfloat16 for, and how do computation precision and storage precision differ?</h3><p>By default, even if you quantize parameters, the computation is still in float32.</p><p>Therefore, you can set the computation precision to torch.bfloat16 or torch.float16 to speed up the computation process and reduce memory usage.</p><p>This computation precision dtype is set during the internal runtime of Linear4bit and is part of the internal computation logic.</p><h3 id="_5-7-temporary-quantization-vs-permanent-storage" tabindex="-1"><a class="header-anchor" href="#_5-7-temporary-quantization-vs-permanent-storage" aria-hidden="true">#</a> 5.7. Temporary Quantization vs. Permanent Storage?</h3><ul><li>Temporary Quantization <ul><li>Loads the original float32 weight model and quantizes it in memory based on the quantization configuration.</li><li>During inference, the 4-bit weights are temporarily converted to bfloat16 for computation.</li><li>Key points: <ul><li>The 4-bit weights of the quantized model only exist temporarily in memory; they are not permanently saved.</li><li>The original model file on disk is not changed; it only affects the computation method in memory.</li></ul></li></ul></li><li>Permanent Storage <ul><li>Saves the quantized version of the model, loading the quantized model directly without needing to apply the quantization configuration.</li></ul></li></ul><h3 id="_5-8-what-precision-does-qlora-use-to-store-the-trained-model" tabindex="-1"><a class="header-anchor" href="#_5-8-what-precision-does-qlora-use-to-store-the-trained-model" aria-hidden="true">#</a> 5.8. What precision does QLoRA use to store the trained model?</h3><p>QLoRA has two common strategies for quantization and storage during training:</p><ul><li>Situation 1: Quantized during training, but retains the original model&#39;s float32 weights for storage. <ul><li>The original model&#39;s weights will still be saved in float32 format, rather than in the quantized format.</li><li>The quantization operation is usually applied temporarily during inference; the quantized weights during training are just to save memory and speed up computation but do not necessarily need to be stored permanently.</li><li>Storing the original model in float32 format ensures better model compatibility and ease of use in the future.</li><li>LoRA adaptation layers: The weights of the LoRA layers are still in float32 format and will be stored alongside the original model.</li><li>The model saved by QLoRA is: <ul><li>Stores the original model&#39;s weights in float32 format.</li><li>Stores the weights of the LoRA adaptation layers, which remain in float32 precision.</li></ul></li></ul></li><li>Situation 2: Both quantized during training and storage. <ul><li>This method is mainly used to save storage space and speed up inference.</li><li>The model saved by QLoRA is: <ul><li>Stores the quantized model, i.e., 4-bit (usually uint8) weights.</li><li>Stores the weights of the LoRA adaptation layers, which remain in float32 precision.</li></ul></li></ul></li></ul><p>Is it necessary to keep the data types of LoRA adaptation layer weights and model weights consistent? Answer: The data types do not need to be completely consistent for the following reasons:</p><ul><li>Independence of LoRA adaptation layers from original model weights.</li><li>The inconsistency in data types between LoRA layer weights and quantized model weights does not cause conflicts. <ul><li>During inference, the quantized weights (e.g., 4-bit) will be restored to float16 or bfloat16 format for computation, while the weights of the LoRA layers (float32) still participate in the computation; the inconsistency in precision will not cause issues.</li></ul></li></ul><h2 id="_6-qlora-details-supplement" tabindex="-1"><a class="header-anchor" href="#_6-qlora-details-supplement" aria-hidden="true">#</a> 6. QLoRA Details Supplement</h2><h3 id="_6-1-device-map" tabindex="-1"><a class="header-anchor" href="#_6-1-device-map" aria-hidden="true">#</a> 6.1. device_map</h3><p>device_map is a dictionary used to inform the model loader (e.g., AutoModel.from_pretrained in transformers) which devices to load different parts of the model onto. The keys typically represent a part of the model (e.g., the name of a layer or module), and the values represent the device number or device name (e.g., GPU index 0, 1, or &quot;cpu&quot;).</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>device_map={&quot;&quot;: 0}  # Load the entire model onto GPU 0 (device number 0) (an empty string indicates the entire model; in PyTorch, 0 usually corresponds to the first GPU (i.e., cuda:0)).
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>device_map = {
    &quot;transformer.layer.0&quot;: 0,  # Load layer 0 onto GPU 0
    &quot;transformer.layer.1&quot;: 1   # Load layer 1 onto GPU 1
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>device_map = &quot;auto&quot; # Automatically allocate the model based on available devices (requires support from the accelerate library).
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Extension: How to check available GPU devices</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import torch
print(torch.cuda.is_available())  # Check if there is a GPU
print(torch.cuda.device_count())  # Check the number of GPUs
print(torch.cuda.current_device())  # Current default GPU index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-seed-42-is-a-common-magic-number" tabindex="-1"><a class="header-anchor" href="#_6-2-seed-42-is-a-common-magic-number" aria-hidden="true">#</a> 6.2. seed=42 is a common &quot;magic number&quot;</h3><p>42 is a conventional value, originating from &quot;The Hitchhiker&#39;s Guide to the Galaxy,&quot; representing &quot;the ultimate answer to life, the universe, and everything.&quot; Of course, you can use 123 or any other value; as long as you use the same seed each time, you can reproduce the results.</p><h2 id="_7-reference" tabindex="-1"><a class="header-anchor" href="#_7-reference" aria-hidden="true">#</a> 7. Reference</h2><ul><li>huggingface SFTTrainer: https://huggingface.co/docs/trl/v0.7.4/en/sft_trainer</li><li>google: https://ai.google.dev/gemma/docs/core/huggingface_text_finetune_qlora</li><li>unsloth: https://huggingface.co/blog/Andyrasika/finetune-unsloth-qlora</li></ul>`,92);function c(d,m){return e(),t("div",null,[r,p,i(" more "),u])}const b=a(l,[["render",c],["__file","031_qlora.html.vue"]]);export{b as default};
