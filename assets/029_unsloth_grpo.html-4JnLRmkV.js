import{_ as e,a as o,b as l,c,d as i}from"./029_training-YPL3rOVm.js";import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as k,c as d,f as m,a as n,b as s,d as t,e as p}from"./app-0IasQefm.js";const v={},b=n("h1",{id:"grpo-unsloth-vllm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grpo-unsloth-vllm","aria-hidden":"true"},"#"),s(" GRPO + Unsloth + vLLM")],-1),g=n("ul",null,[n("li",null,"GRPO (Group Relative Policy Optimization，群体相对策略优化) ：是一种强化学习方法，专注于根据特定的奖励函数优化模型的性能"),n("li",null,"Unsloth：用于高效微调大语言模型的框架"),n("li",null,"vllm：针对大语言模型优化的推理框架")],-1),h=n("h2",{id:"_1-grpo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-grpo","aria-hidden":"true"},"#"),s(" 1. GRPO")],-1),_=n("p",null,"GRPO (Group Relative Policy Optimization，群体相对策略优化)",-1),f={href:"https://arxiv.org/pdf/2402.03300",target:"_blank",rel:"noopener noreferrer"},w={href:"https://arxiv.org/pdf/2501.12948",target:"_blank",rel:"noopener noreferrer"},y=p('<h3 id="_1-1-grpo能做什么" tabindex="-1"><a class="header-anchor" href="#_1-1-grpo能做什么" aria-hidden="true">#</a> 1.1. GRPO能做什么</h3><p>利用GRPO可以将标准模型转化为功能完备的推理模型。</p><p>GRPO的主要目标是最大化奖励并学习答案是如何推导出来的，而不是简单地记忆和复现训练数据中的回答。</p><p>常规的微调（不使用GRPO）仅最大化下一个单词的预测概率，但不会针对奖励进行优化。GRPO则是优化奖励函数，而不仅仅是预测下一个单词。</p><p>最初，人们需要收集大量数据来填充推理过程或思维链。但 GRPO或其他强化学习算法能够引导模型自动展现推理能力并生成推理轨迹，这依赖于GRPO或其他强化学习算法创建良好的奖励函数或验证器。</p><p>GRPO的应用场景不仅限于代码或数学领域，其推理过程还能增强诸如邮件自动化、数据库检索、法律和医疗等任务，基于训练采用的数据集和奖励函数，极大提升准确性！</p><h3 id="_1-2-grpo工作原理" tabindex="-1"><a class="header-anchor" href="#_1-2-grpo工作原理" aria-hidden="true">#</a> 1.2. GRPO工作原理</h3><ol><li>对于每个问答对，模型生成多个响应作为一组（例如,8个不同的响应）</li><li>为每个响应根据奖励函数进行打分</li><li>计算该组响应的平均得分作为基准线</li><li>每个响应的得分与平均得分比较，每个响应的优势值由其得分与基准线的差值决定</li><li>模型被增强以倾向于得分更高的响应</li></ol><h3 id="_1-3-grpo-vs-ppo" tabindex="-1"><a class="header-anchor" href="#_1-3-grpo-vs-ppo" aria-hidden="true">#</a> 1.3. GRPO vs PPO</h3><h4 id="_1-3-1-ppo的-双师困境" tabindex="-1"><a class="header-anchor" href="#_1-3-1-ppo的-双师困境" aria-hidden="true">#</a> 1.3.1. PPO的&quot;双师困境&quot;</h4><p>传统强化学习方法中，PPO（Proximal Policy Optimization，近端策略优化）被广泛应用，其训练系统需要两个&quot;老师&quot;协同工作：策略模型（学生）负责生成答案，价值模型（评分老师）负责评估质量。这种架构存在三个根本性缺陷：</p><ul><li>资源消耗黑洞：价值模型的参数量往往与策略模型相当，训练时需要额外存储梯度参数，显存占用翻倍</li><li>评估标准偏移：两个模型的异步更新容易导致&quot;教学标准&quot;不一致</li><li>绝对评分陷阱：单个输出的绝对评分难以反映答案间的相对优劣 这些问题在复杂推理任务中尤为突出。当处理多步数学证明时，传统方法就像用同一把尺子丈量不同维度的答案，容易产生评估偏差。</li></ul><h4 id="_1-3-2-grpo对ppo的改进" tabindex="-1"><a class="header-anchor" href="#_1-3-2-grpo对ppo的改进" aria-hidden="true">#</a> 1.3.2. GRPO对PPO的改进</h4><p>想象一下，你在教一个学生解决数学题。传统方法可能需要另一位老师（价值函数模型）来评估学生的表现。而GRPO采用了一种更智能的方式：让学生生成多个答案，然后通过比较这些答案的优劣来指导学习。这种方法不仅更加直观，还大大提高了学习效率。更贴近人类&quot;比较学习&quot;的认知方式,答案的优劣不再由绝对分数决定，而是通过群体比较产生。</p><p>GRPO是在广受欢迎的PPO（Proximal Policy Optimization）基础上发展而来的强化学习方法。它最大的创新在于引入了&quot;组内相对评估&quot;机制，同时去除了传统方法中需要的价值函数模型，使整个训练过程更加高效和稳定。</p><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-4-grpo的三个革命性设计" tabindex="-1"><a class="header-anchor" href="#_1-4-grpo的三个革命性设计" aria-hidden="true">#</a> 1.4. GRPO的三个革命性设计</h3><h4 id="_1-4-1-从绝对评估机制转为相对评估机制" tabindex="-1"><a class="header-anchor" href="#_1-4-1-从绝对评估机制转为相对评估机制" aria-hidden="true">#</a> 1.4.1. 从绝对评估机制转为相对评估机制</h4><p>这种相对评估机制带来了三大优势：</p><ul><li>评估维度归一化：自动消除题目难易度差异的影响</li><li>误差补偿效应：随机波动在群体比较中被自然平滑</li><li>隐性知识挖掘：模型通过对比学习到评分标准之外的隐性规律</li></ul><h4 id="_1-4-2-去除了价值函数模型" tabindex="-1"><a class="header-anchor" href="#_1-4-2-去除了价值函数模型" aria-hidden="true">#</a> 1.4.2. 去除了价值函数模型</h4><ul><li>GRPO的成功验证了&quot;少即是多&quot;的技术哲学。</li><li>GRPO这种强化学习技术无需价值函数模型即可高效优化响应，与PPO相比，降低了内存和计算成本。</li><li>通过简单的矩阵运算替代复杂模型推理，训练速度提升40%，显存占用降低55%。这种设计尤其适合当今千亿参数大模型的训练需求</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 传统PPO优势计算</span>
advantage <span class="token operator">=</span> reward <span class="token operator">-</span> value_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>state<span class="token punctuation">)</span>

<span class="token comment"># GRPO优势计算</span>
group_rewards <span class="token operator">=</span> <span class="token punctuation">[</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> rn<span class="token punctuation">]</span>
baseline <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>group_rewards<span class="token punctuation">)</span>
advantages <span class="token operator">=</span> <span class="token punctuation">[</span>r <span class="token operator">-</span> baseline <span class="token keyword">for</span> r <span class="token keyword">in</span> group_rewards<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在GSM8K数学基准测试中，GRPO加持的模型展现出惊人的突破:</p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-4-3-kl智能约束" tabindex="-1"><a class="header-anchor" href="#_1-4-3-kl智能约束" aria-hidden="true">#</a> 1.4.3. KL智能约束</h4><p>GRPO将KL散度约束直接融入损失函数，创造性地解决了强化学习的&quot;灾难性遗忘&quot;难题</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Loss = -E[log(π(a|s)) * A] + β*KL(π||π_ref)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中β参数通过自适应算法动态调整，在探索与收敛之间实现微妙平衡。实验显示，这种设计使数学推理任务的训练稳定性提升70%。</p><h3 id="_1-5-llm不同训练方式比较" tabindex="-1"><a class="header-anchor" href="#_1-5-llm不同训练方式比较" aria-hidden="true">#</a> 1.5. LLM不同训练方式比较</h3><ul><li>SFT <ul><li>规范模型输出格式（带上reasoning和answer标签）</li><li>很难学到数据背后的数学规律和元思维，还是只能学到next token的生成概率</li><li>泛化能力差，有点死记硬背</li></ul></li><li>传统RL <ul><li>大量包含解题步骤的高质量数据和精确的reward function，然后大力出奇迹训练</li><li>有long-cot，属于是有标准答案的这种，所以model完全按照long-cot去拟合靠拢，本质是按照训练数据的标准答案、解题过程去学</li><li>没有多个答案之间互相对比（没有答案的优劣区分），有点像填鸭式的应试教育</li></ul></li><li>GRPO <ul><li>通过试错和尝试，鼓励模型在最大化奖励过程中学到推理背后的规律</li><li>GRPO只看结果，过程由模型自己摸索和尝试。没有标准的cot答案（只有最终的答案）， 需要model自己做大量探索，找到最优cot，所以model有aha moment，泛化性好一些</li><li>reward灵活，每个问题生成多个responce，找到最优的几个，引导model向最优的方向靠拢</li><li>这样做前期100多step输出的reason格式很混乱，所以R1在R1-zero的基础上先用long-cot做SFT，让model的responce先按照既定的template输出，适当减少一些探索的step，提升train效率</li><li>泛化性和推理表现上界更高</li></ul></li></ul><h2 id="_2-unsloth高效grpo训练" tabindex="-1"><a class="header-anchor" href="#_2-unsloth高效grpo训练" aria-hidden="true">#</a> 2. Unsloth高效GRPO训练</h2>`,32),q=n("li",null,"借助15GB的显存，Unsloth能够将任何高达17B参数的模型，如Llama 3.1（8B）、Phi-4（14B）、Mistral（7B）或Qwen2.5（7B），转化为推理模型。",-1),x=n("li",null,"极限情况下只需要 5G 显存，即可在本地训练自己的推理模型，达到“顿悟”时刻（适用于任何1.5B参数或更少的模型）。",-1),P=n("li",null,"此前，GRPO 仅支持全量微调，Unsloth AI 使其能够与 QLoRA 和 LoRA 兼容",-1),R=n("li",null,"Unsloth x vLLM：vLLM实现快速推理，可以提高吞吐量（能提升 20 倍），可以允许微调和推理同时进行，还神奇地消除了同时加载vLLM和Unsloth时的双倍内存消耗",-1),O=n("li",null,"Unsloth针对GRPO的新内存高效线性内核将内存使用量减少了 8 倍或更多。这削减了 68.5GB 的内存，同时借助 torch.compile 实现 num_generations = 8 和 20K 上下文长度，速度实际上更快。",-1),L={href:"https://unsloth.ai/blog/long-context",target:"_blank",rel:"noopener noreferrer"},G=n("li",null,"Unsloth 还使用与底层推理引擎（vLLM）相同的 GPU/CUDA 内存空间，与其他包的实现不同，这削减了 16GB 的显存。",-1),M=p('<figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-grpo训练经验之谈" tabindex="-1"><a class="header-anchor" href="#_3-grpo训练经验之谈" aria-hidden="true">#</a> 3. GRPO训练经验之谈</h2><ul><li>至少等待 300 steps 才能看到奖励实质性的增长</li><li>至少 500 rows 数据去训练模型</li><li>应用GRPO的标准模型至少1.5B参数以生成思维链，太小的模型可能无法生成思维链</li><li>对于GRPO在QLoRA 4-bit模式下的GPU显存需求，一般规则是模型参数量等于所需的显存量。</li><li>设置的上下文长度越长，所需的显存越多。而LoRA 16-bit至少会使用4倍以上的显存。</li><li>GRPO的一大优点是您甚至不需要大量数据。您只需要一个优秀的奖励函数/验证器，并且训练时间越长，模型就会变得越好。奖励值会随着训练步数的增加而提升。</li><li>奖励函数和验证器 <ul><li>奖励函数：进行打分 <ul><li>验证正确性不是必须的</li><li>奖励函数可以使用验证器</li></ul></li><li>验证器：验证正确性 <ul><li>不进行打分</li><li>验证器也可以执行代码来验证逻辑或语法和其他正确性</li></ul></li></ul></li><li>设计奖励函数或验证器没有唯一正确的方法——可能性是无限的。然而，它们必须设计得当且有意义，因为设计不当的奖励可能会无意中降低模型性能。</li></ul><h2 id="_4-代码实现" tabindex="-1"><a class="header-anchor" href="#_4-代码实现" aria-hidden="true">#</a> 4. 代码实现</h2><h3 id="_4-1-安装需要的库" tabindex="-1"><a class="header-anchor" href="#_4-1-安装需要的库" aria-hidden="true">#</a> 4.1. 安装需要的库</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">%</span><span class="token operator">%</span>capture <span class="token comment"># Jupyter 的魔法命令，用来捕获单元格的输出，从而避免显示冗长的安装过程</span>
<span class="token keyword">import</span> sys<span class="token punctuation">;</span> modules <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取当前已加载的所有模块名</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> modules<span class="token punctuation">:</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">&quot;PIL&quot;</span> <span class="token keyword">in</span> x <span class="token keyword">or</span> <span class="token string">&quot;google&quot;</span> <span class="token keyword">in</span> x <span class="token keyword">else</span> <span class="token boolean">None</span> <span class="token comment"># 移除PIL(Pillow)和google相关模块的缓存</span>

!pip install unsloth vllm <span class="token comment"># 安装unsloth和vllm</span>
!pip install <span class="token operator">-</span><span class="token operator">-</span>upgrade pillow <span class="token comment"># 升级pillow</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-加载llama-3-1-8b-instruct模型" tabindex="-1"><a class="header-anchor" href="#_4-2-加载llama-3-1-8b-instruct模型" aria-hidden="true">#</a> 4.2. 加载Llama-3.1-8B-Instruct模型</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入核心库</span>
<span class="token keyword">from</span> unsloth <span class="token keyword">import</span> FastLanguageModel <span class="token comment"># 高效加载模型的库</span>
<span class="token keyword">import</span> torch <span class="token comment"># PyTorch 深度学习框架</span>

<span class="token comment"># 模型配置参数</span>
max_seq_length <span class="token operator">=</span> <span class="token number">1024</span> <span class="token comment"># 最大输入序列长度（影响显存占用）</span>
lora_rank <span class="token operator">=</span> <span class="token number">32</span> <span class="token comment"># LoRA的秩，越大的值，模型能力越强，但也会越慢</span>

<span class="token comment"># 加载基础模型</span>
model<span class="token punctuation">,</span> tokenizer <span class="token operator">=</span> FastLanguageModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>
    model_name <span class="token operator">=</span> <span class="token string">&quot;meta-llama/meta-Llama-3.1-8B-Instruct&quot;</span><span class="token punctuation">,</span> <span class="token comment"># 基础模型为 8B 参数的 Llama3 指令微调版</span>
    max_seq_length <span class="token operator">=</span> max_seq_length<span class="token punctuation">,</span>
    load_in_4bit <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># 为True则使用4bit量化(显存优化)，为False则使用16bit</span>
    fast_inference <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># 启用 vLLM 加速推理</span>
    max_lora_rank <span class="token operator">=</span> lora_rank<span class="token punctuation">,</span> <span class="token comment"># LoRA 最大秩限制</span>
    gpu_memory_utilization <span class="token operator">=</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token comment"># GPU 显存利用率（如果OOM可调低）</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-grpo训练前的推理" tabindex="-1"><a class="header-anchor" href="#_4-3-grpo训练前的推理" aria-hidden="true">#</a> 4.3. GRPO训练前的推理</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建聊天模板</span>
text <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>apply_chat_template<span class="token punctuation">(</span><span class="token punctuation">[</span> 
    <span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;Calculate pi.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span> 
tokenize <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token comment"># 表示不对输入进行分词</span>
add_generation_prompt <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 设置采样参数</span>
<span class="token keyword">from</span> vllm <span class="token keyword">import</span> SamplingParams
sampling_params <span class="token operator">=</span> SamplingParams<span class="token punctuation">(</span> 
    temperature <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">,</span>
    top_p <span class="token operator">=</span> <span class="token number">0.95</span><span class="token punctuation">,</span>
    max_tokens <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment"># 生成文本的最大长度</span>
<span class="token punctuation">)</span>

<span class="token comment"># 生成文本</span>
output <span class="token operator">=</span> model<span class="token punctuation">.</span>fast_generate<span class="token punctuation">(</span> 
    <span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">,</span>
    sampling_params <span class="token operator">=</span> sampling_params<span class="token punctuation">,</span>
    lora_request <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token comment"># 表示不使用 LoRA（低秩适应）请求</span>
<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text

output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-加载并准备数据集" tabindex="-1"><a class="header-anchor" href="#_4-4-加载并准备数据集" aria-hidden="true">#</a> 4.4. 加载并准备数据集</h3><p>OpenAI的GSM8K数据集</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re <span class="token comment"># 正则表达式</span>
<span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_dataset<span class="token punctuation">,</span> Dataset

SYSTEM_PROMPT <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
Respond in the following format:
&lt;reasoning&gt;
...
&lt;/reasoning&gt;
&lt;answer&gt;
...
&lt;/answer&gt;
&quot;&quot;&quot;</span>

<span class="token keyword">def</span> <span class="token function">extract_hash_answer</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span> <span class="token operator">|</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">&quot;####&quot;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> text<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;####&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># uncomment middle messages for 1-shot prompting</span>
<span class="token keyword">def</span> <span class="token function">get_gsm8k_questions</span><span class="token punctuation">(</span>split <span class="token operator">=</span> <span class="token string">&quot;train&quot;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dataset<span class="token punctuation">:</span>
    data <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">&#39;openai/gsm8k&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>split<span class="token punctuation">]</span> <span class="token comment"># 加载数据集</span>
    data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment"># 构造为dict格式</span>
        <span class="token string">&#39;prompt&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&#39;role&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;system&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> SYSTEM_PROMPT<span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;role&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;question&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;answer&#39;</span><span class="token punctuation">:</span> extract_hash_answer<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">&#39;answer&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># type: ignore</span>
    <span class="token keyword">return</span> data <span class="token comment"># type: ignore</span>

dataset <span class="token operator">=</span> get_gsm8k_questions<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-设置-lora-微调配置" tabindex="-1"><a class="header-anchor" href="#_4-5-设置-lora-微调配置" aria-hidden="true">#</a> 4.5. 设置 LoRA 微调配置</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model <span class="token operator">=</span> FastLanguageModel<span class="token punctuation">.</span>get_peft_model<span class="token punctuation">(</span>
    model<span class="token punctuation">,</span>
    r <span class="token operator">=</span> lora_rank<span class="token punctuation">,</span> 
    target_modules <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment"># 应用 LoRA 的模块 （如果OOM可去掉QKVO）</span>
        <span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;o_proj&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;gate_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;up_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;down_proj&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span> 
    lora_alpha <span class="token operator">=</span> lora_rank<span class="token punctuation">,</span> <span class="token comment"># LoRA 缩放因子，，通常与秩相同，用于调整 LoRA 的影响</span>
    use_gradient_checkpointing <span class="token operator">=</span> <span class="token string">&quot;unsloth&quot;</span><span class="token punctuation">,</span> <span class="token comment"># 应用激活值重新计算/梯度检查点，以适用于长文本微调，设为&quot;unsloth&quot;，可能指使用库特定的梯度检查点实现（显存优化技术）</span>
    random_state <span class="token operator">=</span> <span class="token number">3407</span><span class="token punctuation">,</span> <span class="token comment"># 随机种子（保证实验可复现）</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-定义奖励函数" tabindex="-1"><a class="header-anchor" href="#_4-6-定义奖励函数" aria-hidden="true">#</a> 4.6. 定义奖励函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># LLM生成答案与标准答案一致则进行奖励</span>
<span class="token keyword">def</span> <span class="token function">correctness_reward_func</span><span class="token punctuation">(</span>prompts<span class="token punctuation">,</span> completions<span class="token punctuation">,</span> answer<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    responses <span class="token operator">=</span> <span class="token punctuation">[</span>completion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> completion <span class="token keyword">in</span> completions<span class="token punctuation">]</span> <span class="token comment"># LLM生成的结果列表</span>
    q <span class="token operator">=</span> prompts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 问题</span>
    extracted_responses <span class="token operator">=</span> <span class="token punctuation">[</span>extract_xml_answer<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> responses<span class="token punctuation">]</span> <span class="token comment"># LLM生成的答案列表</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;Question:\\n</span><span class="token interpolation"><span class="token punctuation">{</span>q<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;\\nAnswer:\\n</span><span class="token interpolation"><span class="token punctuation">{</span>answer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;\\nResponse:\\n</span><span class="token interpolation"><span class="token punctuation">{</span>responses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;\\nExtracted:\\n</span><span class="token interpolation"><span class="token punctuation">{</span>extracted_responses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">2.0</span> <span class="token keyword">if</span> r <span class="token operator">==</span> a <span class="token keyword">else</span> <span class="token number">0.0</span> <span class="token keyword">for</span> r<span class="token punctuation">,</span> a <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>extracted_responses<span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 将LLM生成的每个答案与标准答案对比</span>

<span class="token comment"># LLM生成答案为数字则进行奖励</span>
<span class="token keyword">def</span> <span class="token function">int_reward_func</span><span class="token punctuation">(</span>completions<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    responses <span class="token operator">=</span> <span class="token punctuation">[</span>completion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> completion <span class="token keyword">in</span> completions<span class="token punctuation">]</span>
    extracted_responses <span class="token operator">=</span> <span class="token punctuation">[</span>extract_xml_answer<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> responses<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0.5</span> <span class="token keyword">if</span> r<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0.0</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> extracted_responses<span class="token punctuation">]</span>

<span class="token comment"># LLM生成结果符合system prompt的格式要求则进行奖励（严格版本）</span>
<span class="token keyword">def</span> <span class="token function">strict_format_reward_func</span><span class="token punctuation">(</span>completions<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Reward function that checks if the completion has a specific format.&quot;&quot;&quot;</span>
    pattern <span class="token operator">=</span> <span class="token string">r&quot;^&lt;reasoning&gt;\\n.*?\\n&lt;/reasoning&gt;\\n&lt;answer&gt;\\n.*?\\n&lt;/answer&gt;\\n$&quot;</span>
    responses <span class="token operator">=</span> <span class="token punctuation">[</span>completion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> completion <span class="token keyword">in</span> completions<span class="token punctuation">]</span>
    matches <span class="token operator">=</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> responses<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0.5</span> <span class="token keyword">if</span> <span class="token keyword">match</span> <span class="token keyword">else</span> <span class="token number">0.0</span> <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> matches<span class="token punctuation">]</span>

<span class="token comment"># LLM生成结果符合system prompt的格式要求则进行奖励（宽松版本）</span>
<span class="token keyword">def</span> <span class="token function">soft_format_reward_func</span><span class="token punctuation">(</span>completions<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Reward function that checks if the completion has a specific format.&quot;&quot;&quot;</span>
    pattern <span class="token operator">=</span> <span class="token string">r&quot;&lt;reasoning&gt;.*?&lt;/reasoning&gt;\\s*&lt;answer&gt;.*?&lt;/answer&gt;&quot;</span>
    responses <span class="token operator">=</span> <span class="token punctuation">[</span>completion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> completion <span class="token keyword">in</span> completions<span class="token punctuation">]</span>
    matches <span class="token operator">=</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> responses<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0.5</span> <span class="token keyword">if</span> <span class="token keyword">match</span> <span class="token keyword">else</span> <span class="token number">0.0</span> <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> matches<span class="token punctuation">]</span>

<span class="token comment"># LLM生成结果符合system prompt的格式要求则进行奖励（按点给奖励），并在 &lt;answer&gt; 和 &lt;/answer&gt; 标签之间的内容长度越短，奖励越高</span>
<span class="token keyword">def</span> <span class="token function">xmlcount_reward_func</span><span class="token punctuation">(</span>completions<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    contents <span class="token operator">=</span> <span class="token punctuation">[</span>completion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> completion <span class="token keyword">in</span> completions<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>count_xml<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> contents<span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">count_xml</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token number">0.0</span>
    <span class="token keyword">if</span> text<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;&lt;reasoning&gt;\\n&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        count <span class="token operator">+=</span> <span class="token number">0.125</span>
    <span class="token keyword">if</span> text<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;\\n&lt;/reasoning&gt;\\n&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        count <span class="token operator">+=</span> <span class="token number">0.125</span>
    <span class="token keyword">if</span> text<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;\\n&lt;answer&gt;\\n&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        count <span class="token operator">+=</span> <span class="token number">0.125</span>
        count <span class="token operator">-=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\n&lt;/answer&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.001</span>
    <span class="token keyword">if</span> text<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;\\n&lt;/answer&gt;&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        count <span class="token operator">+=</span> <span class="token number">0.125</span>
        count <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\n&lt;/answer&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.001</span>
    <span class="token keyword">return</span> count

<span class="token keyword">def</span> <span class="token function">extract_xml_answer</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    answer <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;&lt;answer&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    answer <span class="token operator">=</span> answer<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;&lt;/answer&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> answer<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-7-配置grpo参数" tabindex="-1"><a class="header-anchor" href="#_4-7-配置grpo参数" aria-hidden="true">#</a> 4.7. 配置GRPO参数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>max_prompt_length <span class="token operator">=</span> <span class="token number">256</span> <span class="token comment"># 模型输入的最大提示长度</span>

<span class="token keyword">from</span> trl <span class="token keyword">import</span> GRPOConfig<span class="token punctuation">,</span> GRPOTrainer

training_args <span class="token operator">=</span> GRPOConfig<span class="token punctuation">(</span>
    learning_rate <span class="token operator">=</span> <span class="token number">5e-6</span><span class="token punctuation">,</span> <span class="token comment"># 学习率，优化器在每次更新时调整模型参数的步长</span>
    adam_beta1 <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token comment"># Adam 优化器的 beta 参数，用于控制动量的计算</span>
    adam_beta2 <span class="token operator">=</span> <span class="token number">0.99</span><span class="token punctuation">,</span> <span class="token comment"># Adam 优化器的 beta 参数，用于控制动量的计算</span>
    weight_decay <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token comment"># 权重衰减，用于防止过拟合，通过在每次更新时减少权重的大小来实现</span>
    warmup_ratio <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token comment"># 学习率预热比例，表示在训练开始时，学习率会逐渐增加到设定的学习率</span>
    lr_scheduler_type <span class="token operator">=</span> <span class="token string">&quot;cosine&quot;</span><span class="token punctuation">,</span> <span class="token comment"># 学习率调度器类型，设为 &quot;cosine&quot;，表示学习率会按照余弦函数的方式逐渐减少</span>
    optim <span class="token operator">=</span> <span class="token string">&quot;paged_adamw_8bit&quot;</span><span class="token punctuation">,</span> <span class="token comment"># 优化器，&quot;paged_adamw_8bit&quot;是一种优化器的变体，可能用于减少内存占用</span>
    logging_steps <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># 设置日志记录的步数为 1，表示每一步都记录日志</span>
    per_device_train_batch_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># 设置每个设备的训练批次大小为 1</span>
    gradient_accumulation_steps <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># 梯度累积步数，可以增加到4，以便更平滑的训练</span>
    num_generations <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment"># 生成的数量（如果OOM则可以减小该值）</span>
    max_prompt_length <span class="token operator">=</span> max_prompt_length<span class="token punctuation">,</span>
    max_completion_length <span class="token operator">=</span> max_seq_length <span class="token operator">-</span> max_prompt_length<span class="token punctuation">,</span> <span class="token comment"># 最大补全长度，确保生成的文本不会超过模型的最大序列长度</span>
    <span class="token comment"># num_train_epochs = 1, # Set to 1 for a full training run</span>
    max_steps <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token comment"># 最大训练步数</span>
    save_steps <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token comment"># 保存模型的步数，表示每 250 步保存一次模型</span>
    max_grad_norm <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token comment"># 最大梯度范数，用于梯度裁剪以防止梯度爆炸</span>
    report_to <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span> <span class="token comment"># Can use Weights &amp; Biases</span>
    output_dir <span class="token operator">=</span> <span class="token string">&quot;outputs&quot;</span><span class="token punctuation">,</span> <span class="token comment"># 输出目录，用于存储训练结果和模型检查点</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-定义grpotrainer" tabindex="-1"><a class="header-anchor" href="#_4-8-定义grpotrainer" aria-hidden="true">#</a> 4.8. 定义GRPOTrainer</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>trainer <span class="token operator">=</span> GRPOTrainer<span class="token punctuation">(</span>
    model <span class="token operator">=</span> model<span class="token punctuation">,</span> <span class="token comment"># 基础模型</span>
    processing_class <span class="token operator">=</span> tokenizer<span class="token punctuation">,</span> <span class="token comment"># embedding模型</span>
    reward_funcs <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment"># 奖励函数</span>
        xmlcount_reward_func<span class="token punctuation">,</span>
        soft_format_reward_func<span class="token punctuation">,</span>
        strict_format_reward_func<span class="token punctuation">,</span>
        int_reward_func<span class="token punctuation">,</span>
        correctness_reward_func<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    args <span class="token operator">=</span> training_args<span class="token punctuation">,</span> <span class="token comment"># 训练参数</span>
    train_dataset <span class="token operator">=</span> dataset<span class="token punctuation">,</span> <span class="token comment"># 数据集</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-9-开始grpo训练" tabindex="-1"><a class="header-anchor" href="#_4-9-开始grpo训练" aria-hidden="true">#</a> 4.9. 开始GRPO训练</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-10-保存lora权重" tabindex="-1"><a class="header-anchor" href="#_4-10-保存lora权重" aria-hidden="true">#</a> 4.10. 保存LoRA权重</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model<span class="token punctuation">.</span>save_lora<span class="token punctuation">(</span><span class="token string">&quot;grpo_saved_lora&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 保存LoRA权重到grpo_saved_lora文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-11-grpo训练后的推理" tabindex="-1"><a class="header-anchor" href="#_4-11-grpo训练后的推理" aria-hidden="true">#</a> 4.11. GRPO训练后的推理</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>text <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>apply_chat_template<span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span> <span class="token punctuation">:</span> SYSTEM_PROMPT<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment"># 与训练前推理不同点1: 添加了system prompt</span>
    <span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;Calculate pi.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span> tokenize <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> add_generation_prompt <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">from</span> vllm <span class="token keyword">import</span> SamplingParams
sampling_params <span class="token operator">=</span> SamplingParams<span class="token punctuation">(</span>
    temperature <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">,</span>
    top_p <span class="token operator">=</span> <span class="token number">0.95</span><span class="token punctuation">,</span>
    max_tokens <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
output <span class="token operator">=</span> model<span class="token punctuation">.</span>fast_generate<span class="token punctuation">(</span>
    text<span class="token punctuation">,</span>
    sampling_params <span class="token operator">=</span> sampling_params<span class="token punctuation">,</span>
    lora_request <span class="token operator">=</span> model<span class="token punctuation">.</span>load_lora<span class="token punctuation">(</span><span class="token string">&quot;grpo_saved_lora&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 与训练前推理不同点2: 加载LoRA权重</span>
<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text

output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-参考" tabindex="-1"><a class="header-anchor" href="#_5-参考" aria-hidden="true">#</a> 5. 参考</h2><p>https://colab.research.google.com/github/unslothai/notebooks/blob/main/nb/Llama3.1_(8B)-GRPO.ipynb</p><p>https://www.kaggle.com/code/kingabzpro/fine-tuning-deepseek-r1-reasoning-model</p><p>https://colab.research.google.com/github/wandb/examples/blob/master/colabs/intro/Intro_to_Weights_%26_Biases.ipynb</p><p>https://www.51cto.com/aigc/4216.html</p><p>https://unsloth.ai/blog/grpo</p>`,35),A={href:"https://blog.csdn.net/simoncool23/article/details/145400144",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.cnblogs.com/theseventhson/p/18696408",target:"_blank",rel:"noopener noreferrer"};function z(S,T){const a=r("ExternalLinkIcon");return k(),d("div",null,[b,m(" more "),g,h,_,n("p",null,[s("GRPO首次在2024年2月至2024年4月的"),n("a",f,[s("DeepSeek’s Math paper"),t(a)]),s("中引入，随后DeepSeek在创建"),n("a",w,[s("DeepSeek R1"),t(a)]),s("时利用了GRPO算法，如他们的论文所述。")]),y,n("ul",null,[q,x,P,R,n("li",null,[s("Unsloth通过多种技巧巧妙地减少了 90% 以上的显存使用量，相比标准实现（HuggingFace TRL + Flash Attention 2）大幅优化。例如，在 20K 上下文长度下，每个提示生成 8 次，Unsloth 对 Llama 3.1 8B 仅使用 54.3GB 显存，而标准实现需要 510.8GB（Unsloth 节省了 90% 的显存） "),n("ul",null,[O,n("li",null,[s("Unsloth利用"),n("a",L,[s("智能 Unsloth 梯度检查点算法"),t(a)]),s("，智能地将中间激活异步卸载到系统内存中，同时仅减慢 1% 的速度。由于我们需要 num_generations = 8，因此可以节省高达 372GB 的 VRAM。我们可以通过中间梯度累积进一步减少这种内存使用量。")]),G])])]),M,n("p",null,[n("a",A,[s("爆火的Deepseek背后的GRPO技术到底是什么"),t(a)])]),n("p",null,[n("a",B,[s("LLM大模型：deepseek浅度解析(二)：R1的GRPO原理"),t(a)])])])}const N=u(v,[["render",z],["__file","029_unsloth_grpo.html.vue"]]);export{N as default};
