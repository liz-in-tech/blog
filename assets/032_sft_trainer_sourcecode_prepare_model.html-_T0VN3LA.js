import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,f as p,e as n}from"./app-cMTkAn20.js";const e={},o=n('<h1 id="sfttrainer-源码解读-prepare-model" tabindex="-1"><a class="header-anchor" href="#sfttrainer-源码解读-prepare-model" aria-hidden="true">#</a> SFTTrainer 源码解读: Prepare Model</h1><ul><li>Prepare Model 总体逻辑</li><li>Prepare Model 代码细节 <ul><li>_prepare_peft_model</li><li>PeftModelForCausalLM.<strong>init</strong></li><li>PeftModel.<strong>init</strong></li><li>LoraModel.<strong>init</strong></li><li>Linear4bit.<strong>init</strong></li><li>LoraLayer.<strong>init</strong>(self, base_layer)</li></ul></li></ul>',2),c=n(`<h2 id="_1-prepare-model-总体逻辑" tabindex="-1"><a class="header-anchor" href="#_1-prepare-model-总体逻辑" aria-hidden="true">#</a> 1. Prepare Model 总体逻辑</h2><p>总体逻辑</p><ul><li>1.根据 model_id 或 model_path 加载基础模型</li><li>2.如果有 peft_config，根据 LoraConfig 开始准备 PEFT 模型</li><li>3.判断是否是 qlora（模型属性 is_loaded_in_4bit 或 is_loaded_in_8bit 是否为 True）</li><li>4.如果是 qlora，冻结基础模型的参数，并将所有非 INT8 类型的参数转为 fp32</li><li>5.实例化 PEFT 模型 PeftModelForCausalLM</li><li>6.实例化 LoraModel <ul><li>验证 lora_config.target_modules 的配置是否有对应模块，如果没有配置 lora_config.target_modules，则从TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING 里看有没有该模型类型对应的默认 target_modules，如果也没有则报错 &quot;Please specify <code>target_modules</code> in <code>peft_config</code>&quot;</li><li>根据 lora_config 更新目标模块 target_modules 的 bnb.nn.Linear4bit 得到更新后的模块 <ul><li>获取 bnb.nn.Linear4bit 基础层的 in_features, out_features</li><li>生成 adapter layer：lora_A 和 lora_B <ul><li>self.lora_A[adapter_name] = nn.Linear(self.in_features, r, bias=False)</li><li>self.lora_B[adapter_name] = nn.Linear(r, self.out_features, bias=lora_bias)</li></ul></li><li>激活 adapter layer：layer.requires_grad_(True)</li></ul></li></ul></li><li>7.如果args.bf16 为 True 且 model.is_loaded_in_4bit 为 True，将部分模块 weight 转为 bfloat16</li></ul><h2 id="_2-prepare-model-代码细节" tabindex="-1"><a class="header-anchor" href="#_2-prepare-model-代码细节" aria-hidden="true">#</a> 2. Prepare Model 代码细节</h2><h3 id="_2-1-sfttrainer-init" tabindex="-1"><a class="header-anchor" href="#_2-1-sfttrainer-init" aria-hidden="true">#</a> 2.1. SFTTrainer.<strong>init</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SFTTrainer</span><span class="token punctuation">(</span>Trainer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Trainer for Supervised Fine-Tuning (SFT) method.
    &quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            model <span class="token operator">=</span> self<span class="token punctuation">.</span>_create_model_from_path<span class="token punctuation">(</span>model<span class="token punctuation">,</span> args<span class="token punctuation">)</span>

        <span class="token comment"># PEFT configuration and model wrapping</span>
        <span class="token keyword">if</span> peft_config <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            model <span class="token operator">=</span> self<span class="token punctuation">.</span>_prepare_peft_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> peft_config<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-create-model-from-path" tabindex="-1"><a class="header-anchor" href="#_2-2-create-model-from-path" aria-hidden="true">#</a> 2.2. _create_model_from_path</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">_create_model_from_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Creates a model from a path or model identifier.&quot;&quot;&quot;</span>

    <span class="token comment"># Create model</span>
    model <span class="token operator">=</span> AutoModelForCausalLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> <span class="token operator">**</span>model_init_kwargs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> model
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-prepare-peft-model" tabindex="-1"><a class="header-anchor" href="#_2-3-prepare-peft-model" aria-hidden="true">#</a> 2.3. _prepare_peft_model</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">_prepare_peft_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Prepares a model for PEFT training.&quot;&quot;&quot;</span>

    is_qlora <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">&quot;is_loaded_in_4bit&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">&quot;is_loaded_in_8bit&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token comment"># Prepare model for kbit training if needed</span>
    <span class="token keyword">if</span> is_qlora <span class="token keyword">and</span> <span class="token keyword">not</span> is_sharded_qlora<span class="token punctuation">:</span>
        model <span class="token operator">=</span> self<span class="token punctuation">.</span>_prepare_model_for_kbit_training<span class="token punctuation">(</span>model<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token comment"># Disable gradient checkpointing as it&#39;s handled by prepare_model_for_kbit_training</span>
        args <span class="token operator">=</span> dataclasses<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>args<span class="token punctuation">,</span> gradient_checkpointing<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>gradient_checkpointing<span class="token punctuation">:</span>
        model <span class="token operator">=</span> self<span class="token punctuation">.</span>_enable_gradient_checkpointing<span class="token punctuation">(</span>model<span class="token punctuation">,</span> args<span class="token punctuation">)</span>

    <span class="token comment"># Create PEFT model</span>
    model <span class="token operator">=</span> get_peft_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> peft_config<span class="token punctuation">)</span>

    <span class="token comment"># Handle bf16 casting for 4-bit models</span>
    <span class="token keyword">if</span> args<span class="token punctuation">.</span>bf16 <span class="token keyword">and</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">&quot;is_loaded_in_4bit&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> is_sharded_qlora<span class="token punctuation">:</span>
        peft_module_casting_to_bf16<span class="token punctuation">(</span>model<span class="token punctuation">)</span>

    <span class="token keyword">return</span> model
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-prepare-model-for-kbit-training" tabindex="-1"><a class="header-anchor" href="#_2-4-prepare-model-for-kbit-training" aria-hidden="true">#</a> 2.4. prepare_model_for_kbit_training</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">prepare_model_for_kbit_training</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># freeze base model&#39;s layers</span>
    <span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> model<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>
    
    <span class="token comment"># cast all non INT8 parameters to fp32</span>
    <span class="token keyword">for</span> param <span class="token keyword">in</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
            <span class="token punctuation">(</span>param<span class="token punctuation">.</span>dtype <span class="token operator">==</span> torch<span class="token punctuation">.</span>float16<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span>dtype <span class="token operator">==</span> torch<span class="token punctuation">.</span>bfloat16<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token keyword">and</span> param<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">!=</span> <span class="token string">&quot;Params4bit&quot;</span><span class="token punctuation">:</span>
            param<span class="token punctuation">.</span>data <span class="token operator">=</span> param<span class="token punctuation">.</span>data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> model
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-get-peft-model" tabindex="-1"><a class="header-anchor" href="#_2-5-get-peft-model" aria-hidden="true">#</a> 2.5. get_peft_model</h3><ul><li>peft_config.task_type=&quot;CAUSAL_LM&quot;</li><li>peft_config.is_prompt_learning=False</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>MODEL_TYPE_TO_PEFT_MODEL_MAPPING<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">[</span>PeftModel<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;SEQ_CLS&quot;</span><span class="token punctuation">:</span> PeftModelForSequenceClassification<span class="token punctuation">,</span>
    <span class="token string">&quot;SEQ_2_SEQ_LM&quot;</span><span class="token punctuation">:</span> PeftModelForSeq2SeqLM<span class="token punctuation">,</span>
    <span class="token string">&quot;CAUSAL_LM&quot;</span><span class="token punctuation">:</span> PeftModelForCausalLM<span class="token punctuation">,</span>
    <span class="token string">&quot;TOKEN_CLS&quot;</span><span class="token punctuation">:</span> PeftModelForTokenClassification<span class="token punctuation">,</span>
    <span class="token string">&quot;QUESTION_ANS&quot;</span><span class="token punctuation">:</span> PeftModelForQuestionAnswering<span class="token punctuation">,</span>
    <span class="token string">&quot;FEATURE_EXTRACTION&quot;</span><span class="token punctuation">:</span> PeftModelForFeatureExtraction<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_peft_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Returns a Peft model object from a model and a config, where the model will be modified in-place.
    &quot;&quot;&quot;</span>

    <span class="token keyword">return</span> MODEL_TYPE_TO_PEFT_MODEL_MAPPING<span class="token punctuation">[</span>peft_config<span class="token punctuation">.</span>task_type<span class="token punctuation">]</span><span class="token punctuation">(</span>
        model<span class="token punctuation">,</span>
        peft_config<span class="token punctuation">,</span>
        adapter_name<span class="token operator">=</span>adapter_name<span class="token punctuation">,</span>
        autocast_adapter_dtype<span class="token operator">=</span>autocast_adapter_dtype<span class="token punctuation">,</span>
        low_cpu_mem_usage<span class="token operator">=</span>low_cpu_mem_usage<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-peftmodelforcausallm-init" tabindex="-1"><a class="header-anchor" href="#_2-6-peftmodelforcausallm-init" aria-hidden="true">#</a> 2.6. PeftModelForCausalLM.<strong>init</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PeftModelForCausalLM</span><span class="token punctuation">(</span>PeftModel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Peft model for causal language modeling.
    &quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span> model<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">,</span> peft_config<span class="token punctuation">:</span> PeftConfig<span class="token punctuation">,</span> adapter_name<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>model<span class="token punctuation">,</span> peft_config<span class="token punctuation">,</span> adapter_name<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>base_model_prepare_inputs_for_generation <span class="token operator">=</span> self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>prepare_inputs_for_generation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-peftmodel-init" tabindex="-1"><a class="header-anchor" href="#_2-7-peftmodel-init" aria-hidden="true">#</a> 2.7. PeftModel.<strong>init</strong></h3><ul><li>peft_config.peft_type=PeftType.LORA</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PeftModel</span><span class="token punctuation">(</span>PushToHubMixin<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Base model encompassing various Peft methods.
    &quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        model<span class="token punctuation">:</span> PreTrainedModel<span class="token punctuation">,</span>
        peft_config<span class="token punctuation">:</span> PeftConfig<span class="token punctuation">,</span>
        adapter_name<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
        autocast_adapter_dtype<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
        low_cpu_mem_usage<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>  

        cls <span class="token operator">=</span> PEFT_TYPE_TO_TUNER_MAPPING<span class="token punctuation">[</span>peft_config<span class="token punctuation">.</span>peft_type<span class="token punctuation">]</span>
        ctx <span class="token operator">=</span> init_empty_weights <span class="token keyword">if</span> low_cpu_mem_usage <span class="token keyword">else</span> nullcontext
        <span class="token keyword">with</span> ctx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>base_model <span class="token operator">=</span> cls<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token punctuation">{</span>adapter_name<span class="token punctuation">:</span> peft_config<span class="token punctuation">}</span><span class="token punctuation">,</span> adapter_name<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>set_additional_trainable_modules<span class="token punctuation">(</span>peft_config<span class="token punctuation">,</span> adapter_name<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">,</span> <span class="token string">&quot;_cast_adapter_dtype&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>_cast_adapter_dtype<span class="token punctuation">(</span>
                adapter_name<span class="token operator">=</span>adapter_name<span class="token punctuation">,</span> autocast_adapter_dtype<span class="token operator">=</span>autocast_adapter_dtype
            <span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">&quot;is_gradient_checkpointing&quot;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            model <span class="token operator">=</span> self<span class="token punctuation">.</span>_prepare_model_for_gradient_checkpointing<span class="token punctuation">(</span>model<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-loramodel-init" tabindex="-1"><a class="header-anchor" href="#_2-8-loramodel-init" aria-hidden="true">#</a> 2.8. LoraModel.<strong>init</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LoraModel</span><span class="token punctuation">(</span>BaseTuner<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Creates Low Rank Adapter (LoRA) model from a pretrained transformers model.

    The method is described in detail in https://arxiv.org/abs/2106.09685.
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> adapter_name<span class="token punctuation">,</span> low_cpu_mem_usage<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> adapter_name<span class="token punctuation">,</span> low_cpu_mem_usage<span class="token operator">=</span>low_cpu_mem_usage<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">_check_target_module_exists</span><span class="token punctuation">(</span>lora_config<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> check_target_module_exists<span class="token punctuation">(</span>lora_config<span class="token punctuation">,</span> key<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">_prepare_adapter_config</span><span class="token punctuation">(</span>peft_config<span class="token punctuation">,</span> model_config<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> peft_config<span class="token punctuation">.</span>target_modules <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> model_config<span class="token punctuation">[</span><span class="token string">&quot;model_type&quot;</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Please specify \`target_modules\` in \`peft_config\`&quot;</span><span class="token punctuation">)</span>
            peft_config<span class="token punctuation">.</span>target_modules <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>
                TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING<span class="token punctuation">[</span>model_config<span class="token punctuation">[</span><span class="token string">&quot;model_type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token punctuation">)</span>
        <span class="token keyword">return</span> peft_config

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">_create_new_module</span><span class="token punctuation">(</span>lora_config<span class="token punctuation">,</span> adapter_name<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Collect dispatcher functions to decide what backend to use for the replaced LoRA layer. The order matters,</span>
        <span class="token comment"># because the first match is always used. Therefore, the default layers should be checked last.</span>
        dispatchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">if</span> lora_config<span class="token punctuation">.</span>_custom_modules<span class="token punctuation">:</span>
            <span class="token comment"># Experimental custom LoRA module support. Allows users to pass a custom mapping for unsupported layer</span>
            <span class="token comment"># types by impelementing their own LoRA layers.</span>
            <span class="token keyword">def</span> <span class="token function">dynamic_dispatch_func</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> adapter_name<span class="token punctuation">,</span> lora_config<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
                new_module <span class="token operator">=</span> <span class="token boolean">None</span>

                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> BaseTunerLayer<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    target_base_layer <span class="token operator">=</span> target<span class="token punctuation">.</span>get_base_layer<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    target_base_layer <span class="token operator">=</span> target

                <span class="token keyword">for</span> key<span class="token punctuation">,</span> custom_cls <span class="token keyword">in</span> lora_config<span class="token punctuation">.</span>_custom_modules<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>target_base_layer<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
                        new_module <span class="token operator">=</span> custom_cls<span class="token punctuation">(</span>target<span class="token punctuation">,</span> adapter_name<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
                        <span class="token keyword">break</span>

                <span class="token keyword">return</span> new_module

            dispatchers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dynamic_dispatch_func<span class="token punctuation">)</span>

        <span class="token comment"># avoid eager bnb import</span>
        <span class="token keyword">if</span> is_bnb_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">from</span> <span class="token punctuation">.</span>bnb <span class="token keyword">import</span> dispatch_bnb_8bit

            dispatchers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dispatch_bnb_8bit<span class="token punctuation">)</span>

        <span class="token keyword">if</span> is_bnb_4bit_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">from</span> <span class="token punctuation">.</span>bnb <span class="token keyword">import</span> dispatch_bnb_4bit

            dispatchers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dispatch_bnb_4bit<span class="token punctuation">)</span>

        dispatchers<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>
            <span class="token punctuation">[</span>
                dispatch_eetq<span class="token punctuation">,</span>
                dispatch_aqlm<span class="token punctuation">,</span>
                dispatch_awq<span class="token punctuation">,</span>
                dispatch_gptq<span class="token punctuation">,</span>
                dispatch_hqq<span class="token punctuation">,</span>
                dispatch_torchao<span class="token punctuation">,</span>
                dispatch_megatron<span class="token punctuation">,</span>
                dispatch_default<span class="token punctuation">,</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">)</span>

        new_module <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">for</span> dispatcher <span class="token keyword">in</span> dispatchers<span class="token punctuation">:</span>
            new_module <span class="token operator">=</span> dispatcher<span class="token punctuation">(</span>target<span class="token punctuation">,</span> adapter_name<span class="token punctuation">,</span> lora_config<span class="token operator">=</span>lora_config<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
            <span class="token keyword">if</span> new_module <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># first match wins</span>
                <span class="token keyword">break</span>

        <span class="token keyword">if</span> new_module <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token comment"># no module could be matched</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>
                <span class="token string-interpolation"><span class="token string">f&quot;Target module </span><span class="token interpolation"><span class="token punctuation">{</span>target<span class="token punctuation">}</span></span><span class="token string"> is not supported. Currently, only the following modules are supported: &quot;</span></span>
                <span class="token string">&quot;\`torch.nn.Linear\`, \`torch.nn.Embedding\`, \`torch.nn.Conv1d\`, \`torch.nn.Conv2d\`, \`torch.nn.Conv3d\`, &quot;</span>
                <span class="token string">&quot;\`transformers.pytorch_utils.Conv1D\`, \`torch.nn.MultiheadAttention.\`.&quot;</span>
            <span class="token punctuation">)</span>

        <span class="token keyword">return</span> new_module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;t5&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;mt5&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;bart&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;gpt2&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;c_attn&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;bloom&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query_key_value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;blip-2&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;opt&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;gptj&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;gpt_neox&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query_key_value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;gpt_neo&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;bert&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;roberta&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;xlm-roberta&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;electra&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;deberta-v2&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;deberta&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;in_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;layoutlm&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;llama&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;chatglm&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query_key_value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;gpt_bigcode&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;c_attn&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;mpt&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Wqkv&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;RefinedWebModel&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query_key_value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;RefinedWeb&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query_key_value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;falcon&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query_key_value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;btlm&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;c_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c_attn&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;codegen&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;qkv_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;mistral&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;mixtral&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;stablelm&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;phi&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fc1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fc2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;gemma&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;gemma2&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;qwen2&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;q_proj&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v_proj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>延伸：如何查看模型类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModel<span class="token punctuation">,</span> AutoConfig
model_id <span class="token operator">=</span> <span class="token string">&quot;distilbert/distilgpt2&quot;</span>
config <span class="token operator">=</span> AutoConfig<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_id<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>model_type<span class="token punctuation">)</span> <span class="token comment"># 结果为：gpt2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-dispatch-bnb-4bit" tabindex="-1"><a class="header-anchor" href="#_2-9-dispatch-bnb-4bit" aria-hidden="true">#</a> 2.9. dispatch_bnb_4bit</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">dispatch_bnb_4bit</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">,</span> adapter_name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    new_module <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> BaseTunerLayer<span class="token punctuation">)</span><span class="token punctuation">:</span>
        target_base_layer <span class="token operator">=</span> target<span class="token punctuation">.</span>get_base_layer<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        target_base_layer <span class="token operator">=</span> target

    loaded_in_4bit <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;loaded_in_4bit&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> loaded_in_4bit <span class="token keyword">and</span> is_bnb_4bit_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>target_base_layer<span class="token punctuation">,</span> bnb<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear4bit<span class="token punctuation">)</span><span class="token punctuation">:</span>
        fourbit_kwargs <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fourbit_kwargs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
            <span class="token punctuation">{</span>
                <span class="token string">&quot;compute_dtype&quot;</span><span class="token punctuation">:</span> target_base_layer<span class="token punctuation">.</span>compute_dtype<span class="token punctuation">,</span>
                <span class="token string">&quot;compress_statistics&quot;</span><span class="token punctuation">:</span> target_base_layer<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>compress_statistics<span class="token punctuation">,</span>
                <span class="token string">&quot;quant_type&quot;</span><span class="token punctuation">:</span> target_base_layer<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>quant_type<span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
        new_module <span class="token operator">=</span> Linear4bit<span class="token punctuation">(</span>target<span class="token punctuation">,</span> adapter_name<span class="token punctuation">,</span> <span class="token operator">**</span>fourbit_kwargs<span class="token punctuation">)</span>

    <span class="token keyword">return</span> new_module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-10-linear4bit-init" tabindex="-1"><a class="header-anchor" href="#_2-10-linear4bit-init" aria-hidden="true">#</a> 2.10. Linear4bit.<strong>init</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Linear4bit</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">,</span> LoraLayer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Lora implemented in a dense layer</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        base_layer<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">,</span>
        adapter_name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        r<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        lora_alpha<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
        lora_dropout<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
        init_lora_weights<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
        use_rslora<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        use_dora<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        lora_bias<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        <span class="token operator">**</span>kwargs<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        LoraLayer<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> base_layer<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fan_in_fan_out <span class="token operator">=</span> <span class="token boolean">False</span>

        self<span class="token punctuation">.</span>_active_adapter <span class="token operator">=</span> adapter_name
        self<span class="token punctuation">.</span>update_layer<span class="token punctuation">(</span>
            adapter_name<span class="token punctuation">,</span>
            r<span class="token punctuation">,</span>
            lora_alpha<span class="token operator">=</span>lora_alpha<span class="token punctuation">,</span>
            lora_dropout<span class="token operator">=</span>lora_dropout<span class="token punctuation">,</span>
            init_lora_weights<span class="token operator">=</span>init_lora_weights<span class="token punctuation">,</span>
            use_rslora<span class="token operator">=</span>use_rslora<span class="token punctuation">,</span>
            use_dora<span class="token operator">=</span>use_dora<span class="token punctuation">,</span>
            lora_bias<span class="token operator">=</span>lora_bias<span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-11-loralayer-init-self-base-layer" tabindex="-1"><a class="header-anchor" href="#_2-11-loralayer-init-self-base-layer" aria-hidden="true">#</a> 2.11. LoraLayer.<strong>init</strong>(self, base_layer)</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LoraLayer</span><span class="token punctuation">(</span>BaseTunerLayer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># All names of layers that may contain (trainable) adapter weights</span>
    adapter_layer_names <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;lora_A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lora_B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lora_embedding_A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lora_embedding_B&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># All names of other parameters that may contain adapter-related parameters</span>
    other_param_names <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lora_alpha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;scaling&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lora_dropout&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> base_layer<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">,</span> ephemeral_gpu_offload<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>base_layer <span class="token operator">=</span> base_layer
        self<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>lora_alpha <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>scaling <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>lora_dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleDict<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lora_A <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleDict<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lora_B <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleDict<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment"># For Embedding layer</span>
        self<span class="token punctuation">.</span>lora_embedding_A <span class="token operator">=</span> nn<span class="token punctuation">.</span>ParameterDict<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lora_embedding_B <span class="token operator">=</span> nn<span class="token punctuation">.</span>ParameterDict<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment"># Mark the weight as unmerged</span>
        self<span class="token punctuation">.</span>_disable_adapters <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>merged_adapters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>use_dora<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>lora_bias<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>lora_magnitude_vector <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ModuleDict<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># for DoRA</span>
        self<span class="token punctuation">.</span>_caches<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>ephemeral_gpu_offload<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> ephemeral_gpu_offload
        <span class="token comment"># flag to enable/disable casting of input to weight dtype during forward call</span>
        self<span class="token punctuation">.</span>cast_input_dtype_enabled<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>kwargs <span class="token operator">=</span> kwargs

        base_layer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_base_layer<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_features<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_features
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv1d<span class="token punctuation">)</span><span class="token punctuation">:</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_channels
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_channels
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv3d<span class="token punctuation">)</span><span class="token punctuation">:</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_channels
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">)</span><span class="token punctuation">:</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>num_embeddings<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>embedding_dim
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> Conv1D<span class="token punctuation">)</span><span class="token punctuation">:</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> <span class="token punctuation">(</span>
                base_layer<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>ds_shape <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token string">&quot;ds_shape&quot;</span><span class="token punctuation">)</span> <span class="token keyword">else</span> base_layer<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>shape
            <span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>MultiheadAttention<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> base_layer<span class="token punctuation">.</span>_qkv_same_embed_dim<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Only same dim for query/key/value is supported as of now for </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>embed_dim<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> base_layer<span class="token punctuation">.</span>embed_dim
        <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;infeatures&quot;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;outfeatures&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># QuantLinear</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>infeatures<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>outfeatures
        <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;input_size&quot;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;output_size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># Megatron ColumnParallelLinear,RowParallelLinear</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>input_size<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>output_size
        <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;codebooks&quot;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> base_layer<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">&quot;QuantizedLinear&quot;</span><span class="token punctuation">:</span>
            <span class="token comment"># AQLM QuantLinear</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_features<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_features
        <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;w_bit&quot;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> base_layer<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">&quot;WQLinear_GEMM&quot;</span><span class="token punctuation">:</span>
            <span class="token comment"># Awq layers</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_features<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_features
        <span class="token keyword">elif</span> base_layer<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">&quot;EetqLinear&quot;</span><span class="token punctuation">:</span>
            <span class="token comment"># Eetq layers</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_features<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_features
        <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;W_q&quot;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> base_layer<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">&quot;HQQLinear&quot;</span><span class="token punctuation">:</span>
            <span class="token comment"># HQQ layers</span>
            in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_features<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_features
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># possibly support user provided custom layer types using dynamic dispatch</span>
            <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;in_features&quot;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">,</span> <span class="token string">&quot;out_features&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> base_layer<span class="token punctuation">.</span>in_features<span class="token punctuation">,</span> base_layer<span class="token punctuation">.</span>out_features
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                in_features<span class="token punctuation">,</span> out_features <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>
            warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span>
                <span class="token string-interpolation"><span class="token string">f&quot;Unsupported layer type &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>base_layer<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39; encountered, proceed at your own risk.&quot;</span></span><span class="token punctuation">,</span> UserWarning
            <span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>in_features <span class="token operator">=</span> in_features
        self<span class="token punctuation">.</span>out_features <span class="token operator">=</span> out_features

    <span class="token keyword">def</span> <span class="token function">update_layer</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        adapter_name<span class="token punctuation">,</span>
        r<span class="token punctuation">,</span>
        lora_alpha<span class="token punctuation">,</span>
        lora_dropout<span class="token punctuation">,</span>
        init_lora_weights<span class="token punctuation">,</span>
        use_rslora<span class="token punctuation">,</span>
        use_dora<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        lora_bias<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># This code works for linear layers, override for other layer types</span>
        <span class="token keyword">if</span> r <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;\`r\` should be a positive integer value but the value passed is </span><span class="token interpolation"><span class="token punctuation">{</span>r<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>r<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> r
        self<span class="token punctuation">.</span>lora_alpha<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> lora_alpha
        <span class="token keyword">if</span> lora_dropout <span class="token operator">&gt;</span> <span class="token number">0.0</span><span class="token punctuation">:</span>
            lora_dropout_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>lora_dropout<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            lora_dropout_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>lora_dropout<span class="token punctuation">.</span>update<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>ModuleDict<span class="token punctuation">(</span><span class="token punctuation">{</span>adapter_name<span class="token punctuation">:</span> lora_dropout_layer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># Actual trainable parameters</span>
        self<span class="token punctuation">.</span>lora_A<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_features<span class="token punctuation">,</span> r<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lora_B<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>r<span class="token punctuation">,</span> self<span class="token punctuation">.</span>out_features<span class="token punctuation">,</span> bias<span class="token operator">=</span>lora_bias<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lora_bias<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> lora_bias

        <span class="token keyword">if</span> use_rslora<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>scaling<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> lora_alpha <span class="token operator">/</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>scaling<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> lora_alpha <span class="token operator">/</span> r

        <span class="token comment"># for inits that require access to the base weight, use gather_param_ctx so that the weight is gathered when using DeepSpeed</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>init_lora_weights<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">and</span> init_lora_weights<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;pissa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> gather_params_ctx<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_base_layer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>pissa_init<span class="token punctuation">(</span>adapter_name<span class="token punctuation">,</span> init_lora_weights<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>init_lora_weights<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">and</span> init_lora_weights<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;corda&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> gather_params_ctx<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_base_layer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>corda_init<span class="token punctuation">(</span>adapter_name<span class="token punctuation">,</span> init_lora_weights<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>init_lora_weights<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">and</span> init_lora_weights<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;olora&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> gather_params_ctx<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_base_layer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>olora_init<span class="token punctuation">(</span>adapter_name<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> init_lora_weights <span class="token operator">==</span> <span class="token string">&quot;loftq&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> gather_params_ctx<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_base_layer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>loftq_init<span class="token punctuation">(</span>adapter_name<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> init_lora_weights <span class="token operator">==</span> <span class="token string">&quot;eva&quot;</span><span class="token punctuation">:</span>
            nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lora_B<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> init_lora_weights<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>reset_lora_parameters<span class="token punctuation">(</span>adapter_name<span class="token punctuation">,</span> init_lora_weights<span class="token punctuation">)</span>
        <span class="token comment"># call this before dora_init</span>
        self<span class="token punctuation">.</span>_move_adapter_to_device_of_base_layer<span class="token punctuation">(</span>adapter_name<span class="token punctuation">)</span>

        <span class="token keyword">if</span> use_dora<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>dora_init<span class="token punctuation">(</span>adapter_name<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>use_dora<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>use_dora<span class="token punctuation">[</span>adapter_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>

        self<span class="token punctuation">.</span>set_adapter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>active_adapters<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-12-peft-module-casting-to-bf16" tabindex="-1"><a class="header-anchor" href="#_2-12-peft-module-casting-to-bf16" aria-hidden="true">#</a> 2.12. peft_module_casting_to_bf16</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">peft_module_casting_to_bf16</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> name<span class="token punctuation">,</span> module <span class="token keyword">in</span> model<span class="token punctuation">.</span>named_modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">&quot;norm&quot;</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>
            module <span class="token operator">=</span> module<span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">any</span><span class="token punctuation">(</span>x <span class="token keyword">in</span> name <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&quot;lm_head&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;embed_tokens&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wte&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wpe&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">&quot;weight&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> module<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>dtype <span class="token operator">==</span> torch<span class="token punctuation">.</span>float32<span class="token punctuation">:</span>
                    module <span class="token operator">=</span> module<span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>bfloat16<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function i(l,u){return a(),t("div",null,[o,p(" more "),c])}const d=s(e,[["render",i],["__file","032_sft_trainer_sourcecode_prepare_model.html.vue"]]);export{d as default};
