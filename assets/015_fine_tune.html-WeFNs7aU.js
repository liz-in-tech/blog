import{a as t,_ as s,b as r,c as u,d as o,e as d}from"./015_switching_ffn_layer-fh4TiazV.js";import{_ as h}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as p,c as m,f as g,a as l,b as i,d as n,e as a}from"./app-GFs-dEn5.js";const _={},f=l("h1",{id:"微调",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#微调","aria-hidden":"true"},"#"),i(" 微调")],-1),b=l("ul",null,[l("li",null,"模型微调流程"),l("li",null,"LoRA 与 QLoRA"),l("li",null,"MoE 混合专家模型"),l("li",null,"RLHF 基于人类反馈的强化学习")],-1),x=a('<h2 id="_1-微调-fine-tuning" tabindex="-1"><a class="header-anchor" href="#_1-微调-fine-tuning" aria-hidden="true">#</a> 1. 微调 Fine-tuning</h2><ul><li>目标：放大所需能力同时，保持其他能力不变 <ul><li>更新知识：引入新的特定领域信息</li><li>定制行为：调整模型的语气、个性或反应风格</li><li>针对任务进行优化：提高特定用例的准确性和相关性</li></ul></li><li>价值：增强了相应的能力</li><li>问题：遗忘问题 catastrophic forgetting（有可能在其他能力上会有所下降） <ul><li>解决思路 <ul><li>思路1：不需要解决 <ul><li>其他能力不太看重，下降了也不会有太大影响</li></ul></li><li>思路2：使用更大的模型，其被影响的几率是比较小的，因为泛化能力更强</li><li>思路3：多任务微调 <ul><li>结合其他能力的数据</li><li>缺什么能力，补什么能力</li></ul></li></ul></li></ul></li></ul><h3 id="_1-1-指令微调-有监督微调" tabindex="-1"><a class="header-anchor" href="#_1-1-指令微调-有监督微调" aria-hidden="true">#</a> 1.1. 指令微调/有监督微调</h3><ul><li>FT (Fine-tuning, 微调)</li><li>SFT（Supervised Fine-tuning, 有监督微调）也被称为指令微调（Instruction Fine-tuning） <ul><li>通过为模型提供特定任务的明确指令或示例来进行微调，通常保持预训练模型的知识</li><li>优点: 专注于特定任务的微调，适应性强，同时保留了模型的基础能力。</li><li>缺点: 可能无法充分挖掘模型在某些高度复杂任务中的潜力。</li></ul></li></ul><h3 id="_1-2-多任务微调-multi-tasking-ft" tabindex="-1"><a class="header-anchor" href="#_1-2-多任务微调-multi-tasking-ft" aria-hidden="true">#</a> 1.2. 多任务微调 Multi-tasking FT</h3><p>多个能力都加强, 把数据都合一起进行训练</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-模型微调流程" tabindex="-1"><a class="header-anchor" href="#_2-模型微调流程" aria-hidden="true">#</a> 2. 模型微调流程</h2><ul><li>明确问题</li><li>尝试Prompt Engineering是否能解决问题 <ul><li>能用Few-shot尽量用此解决问题，解决不了再考虑用Fine-tune，Fine-tune的模型会在微调的能力上有所提升，但有可能在其他能力上会有所下降。</li><li>Few-shot <ul><li>问题 <ul><li>1.token量增多，context 几乎占满</li><li>2.加入了多个few-shot, 效果仍然不好</li></ul></li></ul></li></ul></li><li>不行的话，采用微调</li><li>选择多个开源模型进行尝试</li><li>分析与预期指标的Gap，缺什么能力</li><li>选择模型 <ul><li>Fine-tuned Model</li></ul></li><li>收集数据</li><li>清洗数据</li><li>指令微调 SFT</li><li>对齐</li><li>Evaluate <ul><li>A/B Test</li></ul></li><li>压缩/量化 &amp; 上线</li><li>基于人类反馈的强化学习（RLHF， Reinforcement Learning from Human Feedback）</li></ul><h2 id="_3-数据构造" tabindex="-1"><a class="header-anchor" href="#_3-数据构造" aria-hidden="true">#</a> 3. 数据构造</h2><p>数据格式跟传统AI不一样，是问答对形式（input, output），其中input部分是Prompt形式 （因为用户使用的时候就是用prompt的形式）</p><ul><li>Input: Prompt=Instruction+input</li><li>Output: output</li></ul><p>json格式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    &quot;instruction&quot;: &quot;xxx&quot;,
    &quot;input&quot;: &quot;&quot;, // 有时有值，有时没有值
    &quot;output&quot;: &quot;xxx&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不需要太多的数据，例如1000条也够了(几千条-几十万条之间)，因为是在已有模型上添加功能，不是从零训练</p><p>Fine-tune过程--划分训练集、验证集和测试集</p><ul><li>训练集：进行训练的数据</li><li>验证集：用于边训练边看效果（月考模考）</li><li>测试集：训练完后最后测试（高考）</li></ul><h2 id="_4-微调策略分类" tabindex="-1"><a class="header-anchor" href="#_4-微调策略分类" aria-hidden="true">#</a> 4. 微调策略分类</h2><h3 id="_4-1-基于微调范围-全量微调和部分参数微调" tabindex="-1"><a class="header-anchor" href="#_4-1-基于微调范围-全量微调和部分参数微调" aria-hidden="true">#</a> 4.1. 基于微调范围：全量微调和部分参数微调</h3><ul><li>全量微调 Full Fine-tuning <ul><li>全部参数都会改变，影响很大，会影响模型之前的能力，不太建议</li><li>优：高度适应特定任务，能够大幅度提高模型的性能</li><li>缺：需要大量计算资源和时间，同时可能导致模型在新任务上泛化能力下降</li></ul></li><li>部分参数微调 Partial Fine-tuning / Freeze Fine-tuning <ul><li>仅微调模型的部分参数（如后期层或特定层），而不是全部参数</li><li>优：计算资源需求较低，过拟合风险较小</li><li>缺：对复杂任务的适应能力可能不如全量微调</li><li>细分 <ul><li>PEFT 参数高效微调 （Parameter-Efficient Fine-Tuning， PEFT） <ul><li>只微调少量或者额外的参数，降低计算、存储成本</li><li>常见方法 <ul><li>适应性微调 Adapter Fine-tuning <ul><li>通过在预训练模型的特定层之间插入小型适应性模块（adapter），仅对这些模块进行微调，而保持主模型参数不变</li><li>优：高效灵活，减少了微调的计算成本和内存占用，适用于多个任务</li></ul></li><li>LoRA（Low-Rank Adaptation） <ul><li>属于适应性微调，微调部分参数，通过低秩矩阵来微调模型参数，这种方法只微调一个较小的参数子集，通常是模型权重矩阵的低秩近似部分。</li><li>最常用，推荐，微调的结果不太影响原有的模型能力</li></ul></li><li>BitFit <ul><li>只微调偏置参数</li></ul></li></ul></li></ul></li><li>选择不同层layer来微调 <ul><li>不建议</li><li>细分 <ul><li>微调后层（Fine-Tuning Last Layers） <ul><li>仅微调模型的最后几层，这种方法适用于希望在保持原模型能力的基础上增加一些特定任务的适应性。</li><li>优：减少了微调的复杂性和资源需求，同时仍然能够提升模型在特定任务上的表现</li><li>缺：微调深度有限，可能无法充分适应任务需求</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="_4-2-基于任务-sft-rlhf-rlaif" tabindex="-1"><a class="header-anchor" href="#_4-2-基于任务-sft-rlhf-rlaif" aria-hidden="true">#</a> 4.2. 基于任务：SFT，RLHF，RLAIF</h3><ul><li>监督式微调SFT( Supervised Fine Tuning);</li><li>基于人类反馈的强化学习微调RLHF(把人类的反馈通过强化学习的方式，引入到大模型的微调中)；</li><li>基于AI反馈的强化学习微调RLAIF（人类反馈成本高）</li></ul><h3 id="_4-3-低资源微调" tabindex="-1"><a class="header-anchor" href="#_4-3-低资源微调" aria-hidden="true">#</a> 4.3. 低资源微调</h3><ul><li>LoRA/QLoRA(减少训练参数)</li><li>混合精度训练(减少显存占用一半，加速训练一倍)</li><li>LOMO(大幅减少显存占用，某些场景比lora差)</li><li>Activation checkpointing(减少显存占用，额外计算量)</li><li>异构设备训练(减少显存占用)</li></ul><h3 id="_4-4-deepspeed" tabindex="-1"><a class="header-anchor" href="#_4-4-deepspeed" aria-hidden="true">#</a> 4.4. deepspeed</h3><p>分布式训练</p><ul><li>数据分区：数据太大，放不到一个显存中</li><li>模型分区：模型太大，放不到一个显存中</li></ul><p>deepspeed将模型分区放到不同显存中处理，进行显存间的通信，为了解决极端显存不够用的情形，也可能短时间内将模型放在内存中（offload）处理</p><h2 id="_5-lora-与-qlora" tabindex="-1"><a class="header-anchor" href="#_5-lora-与-qlora" aria-hidden="true">#</a> 5. LoRA 与 QLoRA</h2><h3 id="_5-1-lora" tabindex="-1"><a class="header-anchor" href="#_5-1-lora" aria-hidden="true">#</a> 5.1. LoRA</h3><p>Paper Name: LoRA: Low-Rank Adaptation of Large Language Models</p><p>Paper：https://arxiv.org/abs/2106.09685</p>`,32),v=l("p",null,[i("W + "),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",{mathvariant:"normal"},"Δ")]),l("annotation",{encoding:"application/x-tex"},"\\Delta")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord"},"Δ")])])]),i(" W = "),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("msup",null,[l("mi",null,"W"),l("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")])]),l("annotation",{encoding:"application/x-tex"},"W'")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.7519em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.7519em"}},[l("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},"′")])])])])])])])])])])])],-1),L=l("p",null,[i("微调改变了模型的"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",{mathvariant:"normal"},"Δ")]),l("annotation",{encoding:"application/x-tex"},"\\Delta")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord"},"Δ")])])]),i(" W参数, W冻结不变")],-1),M=l("p",null,"LoRA的应用可以发生在模型里面的任何线性转换上",-1),F=l("ul",null,[l("li",null,"h= Wx (线性转换 Linear)"),l("li",null,[i("h = (W + "),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",{mathvariant:"normal"},"Δ")]),l("annotation",{encoding:"application/x-tex"},"\\Delta")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord"},"Δ")])])]),i(" W)x")])],-1),k=a(`<p>LoRA优势</p><ul><li>训练参数减少，参数变动减小（要冻结原有参数） <ul><li>如果参数改动很大，原有能力变化会很大，希望对原有参数改动比较小</li><li>推理阶段需要将原有参数和训练出的参数合并进行推理</li></ul></li><li>训练所需显存降低</li><li>训练效率提高</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lora_config = LoraConfig(
    r=8, # lora rank, Low Rank 低秩矩阵，rank 通常选8或16 
    lora_alpha=32, # 新的W = 旧的W + lora_alpha/r * $\\Delta$ W (影响 lora 更新权重占比)  
    target_modules=modules, # 需要进行lora训练的Linear,一般情况不会把所有Linear都进行lora的训练，而是选2-3个，更多是对qkv矩阵做lora训练
    lora_dropout=0.05,
    bias=&quot;none&quot;,
    task_type=&quot;CAUSAL_LM&quot;
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-qlora" tabindex="-1"><a class="header-anchor" href="#_5-2-qlora" aria-hidden="true">#</a> 5.2. QLoRA</h3><p>大模型的加载（将模型导入显存）</p><p>量化：大模型导入之前做量化，如将32bit-&gt;4bit导入</p><p>量化解决显存不够的情形，但精度下降，会影响模型的效果</p><p>QLoRA 来加载模型，进行量化，来降低显存的消耗</p><h2 id="_6-微调实践" tabindex="-1"><a class="header-anchor" href="#_6-微调实践" aria-hidden="true">#</a> 6. 微调实践</h2><h3 id="_6-1-3个关键部分" tabindex="-1"><a class="header-anchor" href="#_6-1-3个关键部分" aria-hidden="true">#</a> 6.1. 3个关键部分</h3><ul><li>模型（从Huggingface上找） <ul><li>tokenizer：token和id的mapping</li><li>model</li></ul></li><li>数据（从Huggingface上找）</li><li>参数</li></ul><h3 id="_6-2-微调高级设置" tabindex="-1"><a class="header-anchor" href="#_6-2-微调高级设置" aria-hidden="true">#</a> 6.2. 微调高级设置</h3><ul><li>量化等级（QLoRA） <ul><li>4或8 bit</li><li>使用量化，模型会变小，精度也 会变小，效果会稍微下降一点</li></ul></li><li>加速方式 <ul><li>flash-attention</li></ul></li><li>训练方式 <ul><li>SFT (Supervised Fine-Tuning) 指令微调 （70%-80%采用此）</li><li>对齐常见2种方式 <ul><li>PPO （强化学习方式）</li><li>DPO</li></ul></li></ul></li><li>数据集 <ul><li>本地数据集</li><li>来自HuggingFace的数据集</li></ul></li><li>LoRA参数 <ul><li>LoRA矩阵的秩大小 <ul><li>通常选8（或者16）</li></ul></li><li>LoRA缩放系数 <ul><li>通常是LoRA秩的2倍，16或32</li></ul></li></ul></li></ul><h3 id="_6-3-github-tloen-alpaca-lora" tabindex="-1"><a class="header-anchor" href="#_6-3-github-tloen-alpaca-lora" aria-hidden="true">#</a> 6.3. github: tloen/alpaca-lora</h3><p>Github: https://github.com/tloen/alpaca-lora</p><p>训练</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python finetune.py \\
    --base_model &#39;decapoda-research/llama-7b-hf&#39; \\ # 基础模型
    --data_path &#39;yahma/alpaca-cleaned&#39; \\ # 数据集
    --output_dir &#39;./lora-alpaca&#39; \\ # 微调模型输出路径
    --batch_size 128 \\ # 此行及之下都是参数
    --micro_batch_size 4 \\
    --num_epochs 3 \\
    --learning_rate 1e-4 \\
    --cutoff_len 512 \\
    --val_set_size 2000 \\
    --lora_r 8 \\
    --lora_alpha 16 \\
    --lora_dropout 0.05 \\
    --lora_target_modules &#39;[q_proj,v_proj]&#39; \\
    --train_on_inputs \\
    --group_by_length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推理</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python generate.py \\
    --load_8bit \\
    --base_model &#39;decapoda-research/llama-7b-hf&#39; \\ # 原有参数
    --lora_weights &#39;tloen/alpaca-lora-7b&#39; # 新的参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-llama-factory" tabindex="-1"><a class="header-anchor" href="#_6-4-llama-factory" aria-hidden="true">#</a> 6.4. LLaMA-Factory</h3><p>LLaMA-Factory 微调UI界面，将各种模型和参数的配置进行了封装，简化了代码编写流程，只需在UI界面上进行选择和配置内容即可开始微调，无需写代码，除非一些新出的模型，还没有集成到LLaMA-Factory时，可以自己写代码</p><h3 id="_6-5-more" tabindex="-1"><a class="header-anchor" href="#_6-5-more" aria-hidden="true">#</a> 6.5. More</h3><p>租GPU</p><ul><li>国内：AutoDL</li><li>国外：jarvislabs.ai</li></ul><p>llama模型参数下载: https://github.com/shawwn/llama-dl</p><p>https://github.com/ymcui/Chinese-LLaMA-Alpaca</p><p>https://github.com/SCIR-HI/Huatuo-Llama-Med-Chinese</p><h2 id="_7-开源模型" tabindex="-1"><a class="header-anchor" href="#_7-开源模型" aria-hidden="true">#</a> 7. 开源模型</h2><figure><img src="`+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>英文开源模型：</p><ul><li>llama <ul><li>由Meta公司推出的大型语言模型系列</li></ul></li><li>alpaca:由斯坦福大学基于LLAMA模型开发和训练的一个轻量化、成本低的指令微调模型，使得Alpaca在较小的资源下能够完成特定的任务。</li><li>Mistral-7B <ul><li>https://colab.research.google.com/drive/1TVEd2fj3YiklvX5zOqJxQAmXnLOk6-to?usp=sharing#scrollTo=7St-hFLNmS2v</li></ul></li><li>Mixture of Experts (MoE) 之 Mistral 8x7B 混合专家 <ul><li>https://colab.research.google.com/drive/1VDa0lIfqiwm16hBlIlEaabGVTNB3dN1A?usp=sharing#scrollTo=lChdRaiR81Dc</li></ul></li></ul><p>中文开源模型：</p><ul><li>Qwen</li><li>ChatGLM <ul><li>微调主要是6B为主，没有开源更大的模型</li><li>chatglm.cpp是用c++重新写了一遍，目标是能把模型跑在CPU上；现在基本上每个模型都有对应的cpp版本（量化加速推理方案）</li></ul></li></ul><p>全开源 (给了数据集和权重参数,上述没有给出数据集)：</p><ul><li>Pythia <ul><li>https://github.com/EleutherAI/pythia</li></ul></li><li>OLMo <ul><li>https://github.com/allenai/OLMo</li></ul></li></ul><h3 id="_7-1-mistral-7b" tabindex="-1"><a class="header-anchor" href="#_7-1-mistral-7b" aria-hidden="true">#</a> 7.1. Mistral-7B</h3><ul><li>使用滑动窗口注意力以应对长序列 Sliding Window Attention（SWA）</li><li>使用Grouped-query attention（GQA）以加速推理 <img src="'+r+'" alt="" loading="lazy"></li></ul><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_8-混合专家模型-moe-mixture-of-experts" tabindex="-1"><a class="header-anchor" href="#_8-混合专家模型-moe-mixture-of-experts" aria-hidden="true">#</a> 8. 混合专家模型 MoE，Mixture of Experts</h2><p>Paper Name: Switch Transformers: Scaling to Trillion Parameter Models with Simple and Efficient Sparsity</p><p>Paper: https://arxiv.org/pdf/2101.03961</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>多个专家 <ul><li>Mistral 8x7B有8个专家</li><li>deepseek的MoE有160个专家</li></ul></li><li>每个专家有自己的专长</li><li>Router 路由选择 <ul><li>softmax 得到每个专家的权重占比</li></ul></li><li>sparse 稀疏混合专家 <ul><li>每次无需问所有专家，只是选择其中几个来问</li><li>Mistral 7B是稀疏混合专家模型</li></ul></li><li>多个共享一些模块，部分模块是分开的 <ul><li>Mistral 8x7B 按理有56B 但有些共享模块，所以总共约40B</li></ul></li><li>MoE用switching FFN layer 替代原来的 FFN，其他不变，也就是其他模块共享 <ul><li>MoE该层由一个门控网络和一定数量的专家网络组成。</li></ul></li></ul><p>尽管与稠密模型相比，MoE 它具有高效预训练和快速推理的优点，但也面临着一些挑战：</p><ul><li><p>训练:MoE 预训练的计算效率可以大大提高，但在微调过程中很难实现泛化，导致过拟合。</p></li><li><p>推理:虽然 MoE 可能有很多参数，但只有一部分是在推理过程中使用的。推理速度比参数相同的稠密模型快得多。然而，所有参数都需要加载 RAM 因此，对内存的要求很高。</p></li></ul><p>MOE的优势</p>',47),A=l("ul",null,[l("li",null,[i("计算效率：通过稀疏选择机制，MOE架构避免了让所有专家都参与推理，降低了计算复杂度。实际中，MOE架构的计算量可以近似为"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"O"),l("mo",{stretchy:"false"},"("),l("mi",null,"k"),l("mo",null,"⋅"),l("mi",null,"n"),l("mo",{stretchy:"false"},")")]),l("annotation",{encoding:"application/x-tex"},"O(k⋅n)")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"⋅"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mclose"},")")])])]),i("，其中k是激活的专家数量，n是输入序列长度。")]),l("li",null,"扩展性：MOE非常适合大规模模型。通过增加专家数量，可以扩大模型容量，而不显著增加每次推理的计算成本。这使得MOE特别适合用于超大规模语言模型，如Switch Transformer、GShard等。"),l("li",null,"灵活性：MOE能够根据输入动态选择专家，因此它具有灵活的模型结构，可以处理不同类型的任务和数据。")],-1),w=a('<p>MOE通过以下几方面的设计来提升模型性能和效率：</p><ul><li>稀疏选择专家，降低计算复杂度</li><li>门控网络根据输入动态选择专家</li><li>负载均衡损失确保专家均衡利用</li></ul><h2 id="_9-rlhf-基于人类反馈的强化学习" tabindex="-1"><a class="header-anchor" href="#_9-rlhf-基于人类反馈的强化学习" aria-hidden="true">#</a> 9. RLHF 基于人类反馈的强化学习</h2><p>RLHF（Reinforcement Learning from Human Feedback）是一种结合了强化学习和人类反馈的机器学习方法，通过直接从人类反馈中学习，使模型更好的适应特定的任务和预期行为。</p><p>要解决的问题：</p><ul><li>传统强化学习的奖励工程（reward engineering）困难和缺少高质量反馈</li><li>在许多复杂任务中，定义一个精确的奖励函数非常困难</li><li>和复杂的人类价值观对齐 <ul><li>如何评价GPT生成的文本好不好呢？好的定于是基于人类价值观的，如何让GPT学到人类的价值观呢？</li></ul></li></ul><p>主要原理:RLHF主要包括四个组件</p><ul><li>预训练模型（pre-trained model）：开始于一个预训练模型，如在大量文本数据上预训练的大语言模型</li><li>人类反馈（human feedback):收集关于模型输出质量的人类反馈，这些反馈可以能包括对生成的文本进行标注或者评分，并提供改进的指导。</li><li>奖励建模（reward modeling）：使用人类反馈来训练一个奖励模型，这个奖励模型学习根据人类反馈来给模型生成的输出评分。 <ul><li>RM 奖励模型/偏好模型</li></ul></li><li>强化学习（reinforcement learning）：利用奖励模型作为奖励函数，使用标准的强化学习或者深度学习算法来继续训练原始模型，优化模型的输出以最大化奖励模型给出的分数。</li></ul><h2 id="_10-references" tabindex="-1"><a class="header-anchor" href="#_10-references" aria-hidden="true">#</a> 10. References</h2>',9),y={href:"https://towardsdatascience.com/mixtral-8x7b-understanding-and-running-the-sparse-mixture-of-experts-0e3fc7fde818",target:"_blank",rel:"noopener noreferrer"},R={href:"https://docs.unsloth.ai/get-started/fine-tuning-guide",target:"_blank",rel:"noopener noreferrer"};function E(q,T){const e=c("ExternalLinkIcon");return p(),m("div",null,[f,b,g(" more "),x,v,L,M,F,k,A,w,l("ul",null,[l("li",null,[l("p",null,[l("a",y,[i("Mixtral-8x7B: Understanding and Running the Sparse Mixture of Experts"),n(e)])])]),l("li",null,[l("p",null,[i("Unsloth微调指南："),l("a",R,[i("https://docs.unsloth.ai/get-started/fine-tuning-guide"),n(e)])])])])])}const B=h(_,[["render",E],["__file","015_fine_tune.html.vue"]]);export{B as default};
