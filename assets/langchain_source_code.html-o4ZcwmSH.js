import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as t,f as e,e as n}from"./app-4jXQnbjM.js";const i="/blog/assets/The_inheritance_relationship_of_the_base_class-L3NWhGxP.png",o="/blog/assets/Subclass_of_RunnableSerializable-hqAJYss9.png",p="/blog/assets/AgentExecutor_Source_Code-4-1gXncc.jpg",l={},c=n('<h1 id="from-the-source-code-perspective-peering-into-the-operation-logic-of-langchain" tabindex="-1"><a class="header-anchor" href="#from-the-source-code-perspective-peering-into-the-operation-logic-of-langchain" aria-hidden="true">#</a> From the Source Code Perspective, Peering into the Operation Logic of LangChain</h1><blockquote><p>By interpreting the source code of Chain and AgentExecutor, let&#39;s understand how various modules are interconnected.</p></blockquote><ul><li><ol><li>Base Class of LangChain</li></ol></li><li><ol start="2"><li>LCEL与Runnable</li></ol></li><li><ol start="3"><li>Chain</li></ol></li><li><ol start="4"><li>AgentExecutor</li></ol></li></ul>',3),u=n('<h2 id="_1-base-class-of-langchain" tabindex="-1"><a class="header-anchor" href="#_1-base-class-of-langchain" aria-hidden="true">#</a> 1. Base Class of LangChain</h2><p>Python&#39;s abstract base class is <strong>ABC</strong>, and LangChain&#39;s base class is its subclass, <strong>Runnable</strong>。</p><p>The inheritance relationship of the base class is shown in the following diagram:</p><figure><img src="'+i+'" alt="The inheritance relationship of the base class" tabindex="0" loading="lazy"><figcaption>The inheritance relationship of the base class</figcaption></figure><p>Subclasses of RunnableSerializable are as follows:</p><figure><img src="'+o+`" alt="Subclasses of RunnableSerializable" tabindex="0" loading="lazy"><figcaption>Subclasses of RunnableSerializable</figcaption></figure><p>Extracting the important classes, we have the following inheritance relationship:</p><ul><li>ABC <ul><li>Runnable <ul><li>Chain <ul><li>AgentExecutor</li></ul></li><li>BasePromptTemplate</li><li>BaseLanguageModel</li><li>BaseOutputParser</li><li>BaseRetriever</li><li>BaseTool</li></ul></li></ul></li></ul><h2 id="_2-lcel与runnable" tabindex="-1"><a class="header-anchor" href="#_2-lcel与runnable" aria-hidden="true">#</a> 2. LCEL与Runnable</h2><p>Intuitive understanding:</p><ul><li>Runnable is a component</li><li>LCEL is a way to assemble components into a finished product</li></ul><h3 id="_2-1-lcel-langchain-expression-language" tabindex="-1"><a class="header-anchor" href="#_2-1-lcel-langchain-expression-language" aria-hidden="true">#</a> 2.1. LCEL(LangChain Expression Language)</h3><p>LCEL is a declarative way to easily combine Runnables into a Chain.</p><h4 id="_2-1-1-the-way-to-compose-runnables" tabindex="-1"><a class="header-anchor" href="#_2-1-1-the-way-to-compose-runnables" aria-hidden="true">#</a> 2.1.1. The Way to Compose Runnables</h4><h5 id="_2-1-1-1-serial-runnablesequence" tabindex="-1"><a class="header-anchor" href="#_2-1-1-1-serial-runnablesequence" aria-hidden="true">#</a> 2.1.1.1. Serial(RunnableSequence)</h5><ul><li>feature <ul><li>Sequentially calls a series of Runnables</li><li>The output of one Runnable is used as the input for the next Runnable</li></ul></li><li>implementation <ul><li>Using the pipe operator &#39;|&#39;</li><li>Passing a list of runnables to RunnableSequence</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>runnables <span class="token keyword">import</span> RunnableLambda

<span class="token comment"># A RunnableSequence constructed using the \`|\` operator</span>
sequence <span class="token operator">=</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
sequence<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># output 4</span>
sequence<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># output [4, 6, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-1-2-parallel-runnableparallel" tabindex="-1"><a class="header-anchor" href="#_2-1-1-2-parallel-runnableparallel" aria-hidden="true">#</a> 2.1.1.2. Parallel(RunnableParallel)</h5><ul><li>feature <ul><li>Parallel Runnables have the same input</li><li>Parallel Runnables each have their own output</li></ul></li><li>implementation <ul><li>Using a dict</li><li>Passing a dict to RunnableParallel</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>runnables <span class="token keyword">import</span> RunnableLambda

 <span class="token comment"># A sequence that contains a RunnableParallel constructed using a dict literal</span>
sequence <span class="token operator">=</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;mul_2&#39;</span><span class="token punctuation">:</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;mul_5&#39;</span><span class="token punctuation">:</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
sequence<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># output {&#39;mul_2&#39;: 4, &#39;mul_5&#39;: 10}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-runnable" tabindex="-1"><a class="header-anchor" href="#_2-2-runnable" aria-hidden="true">#</a> 2.2. Runnable</h3><h4 id="_2-2-1-what" tabindex="-1"><a class="header-anchor" href="#_2-2-1-what" aria-hidden="true">#</a> 2.2.1. What</h4><p>Runnable is a unit of work that can be invoked, batched, streamed, transformed and composed, meaning it can be assembled into a Chain.</p><h4 id="_2-2-2-function" tabindex="-1"><a class="header-anchor" href="#_2-2-2-function" aria-hidden="true">#</a> 2.2.2. Function</h4><ul><li>sync and async support</li><li>batch support</li><li>streaming support</li></ul><h4 id="_2-2-3-key-methods" tabindex="-1"><a class="header-anchor" href="#_2-2-3-key-methods" aria-hidden="true">#</a> 2.2.3. Key Methods</h4><ul><li>invoke/ainvoke：an input =&gt; an output</li><li>batch/abatch：multiple input =&gt; multiple output</li><li>stream/astream：an input =&gt; streams output</li><li>astream_log：an input =&gt; streams output and selected intermediate results</li></ul><h3 id="_2-3-subclasses-of-runnable" tabindex="-1"><a class="header-anchor" href="#_2-3-subclasses-of-runnable" aria-hidden="true">#</a> 2.3. Subclasses of Runnable</h3><ul><li>Chain <ul><li>AgentExecutor</li></ul></li><li>BasePromptTemplate</li><li>BaseLanguageModel <ul><li>BaseLLM</li><li>BaseChatModel</li></ul></li><li>BaseOutputParser</li><li>BaseRetriever</li><li>BaseTool</li></ul><h3 id="_2-4-input-and-output-types-for-subclasses-of-runnable" tabindex="-1"><a class="header-anchor" href="#_2-4-input-and-output-types-for-subclasses-of-runnable" aria-hidden="true">#</a> 2.4. Input and output types for subclasses of Runnable</h3><h4 id="_2-4-1-chain" tabindex="-1"><a class="header-anchor" href="#_2-4-1-chain" aria-hidden="true">#</a> 2.4.1. Chain</h4><ul><li>invoke <ul><li>input:Dict[str, Any]</li><li>output:Dict[str, Any]</li></ul></li><li>__call__ <ul><li>input:Union[Dict[str, Any], Any]</li><li>output:Dict[str, Any]</li></ul></li><li>run <ul><li>input:Any</li><li>output:Any</li></ul></li></ul><h4 id="_2-4-2-baseprompttemplate" tabindex="-1"><a class="header-anchor" href="#_2-4-2-baseprompttemplate" aria-hidden="true">#</a> 2.4.2. BasePromptTemplate</h4><ul><li>invoke <ul><li>input:Dict</li><li>output:PromptValue</li></ul></li></ul><h4 id="_2-4-3-basellm" tabindex="-1"><a class="header-anchor" href="#_2-4-3-basellm" aria-hidden="true">#</a> 2.4.3. BaseLLM</h4><ul><li>invoke <ul><li>input:Union[PromptValue, str, Sequence[BaseMessage]]</li><li>output:str</li></ul></li></ul><h4 id="_2-4-4-basechatmodel" tabindex="-1"><a class="header-anchor" href="#_2-4-4-basechatmodel" aria-hidden="true">#</a> 2.4.4. BaseChatModel</h4><ul><li>invoke <ul><li>input:Union[PromptValue, str, Sequence[BaseMessage]]</li><li>output:BaseMessage</li></ul></li></ul><h4 id="_2-4-5-baseoutputparser" tabindex="-1"><a class="header-anchor" href="#_2-4-5-baseoutputparser" aria-hidden="true">#</a> 2.4.5. BaseOutputParser</h4><ul><li>invoke <ul><li>input:Union[str, BaseMessage]</li><li>output:T</li></ul></li></ul><h4 id="_2-4-6-baseretriever" tabindex="-1"><a class="header-anchor" href="#_2-4-6-baseretriever" aria-hidden="true">#</a> 2.4.6. BaseRetriever</h4><ul><li>invoke <ul><li>input:str</li><li>output:List[Document]</li></ul></li></ul><h4 id="_2-4-7-basetool" tabindex="-1"><a class="header-anchor" href="#_2-4-7-basetool" aria-hidden="true">#</a> 2.4.7. BaseTool</h4><ul><li>invoke <ul><li>input:Union[str, Dict]</li><li>output:Any</li></ul></li></ul><h2 id="_3-chain" tabindex="-1"><a class="header-anchor" href="#_3-chain" aria-hidden="true">#</a> 3. Chain</h2><h3 id="_3-1-what" tabindex="-1"><a class="header-anchor" href="#_3-1-what" aria-hidden="true">#</a> 3.1. What</h3><ul><li>Abstract base class</li><li>Usage：Construct sequences of calls</li><li>Feature <ul><li>Stateful: add Memory to any Chain to give it state</li><li>Observable: pass Callbacks to a Chain to execute additional functionality, like logging, outside the main sequence of component calls</li><li>Composable: the Chain API is flexible enough that it is easy to combine Chains with other components, including other Chains</li></ul></li></ul><h3 id="_3-2-attributes-of-chain" tabindex="-1"><a class="header-anchor" href="#_3-2-attributes-of-chain" aria-hidden="true">#</a> 3.2. Attributes of Chain</h3><ul><li>Memory：At the start, memory loads variables and passes them along in the chain. At the end, it saves any returned variables(inputs and outputs).</li><li>Callbacks：Callback handlers are called throughout the lifecycle of a call to a chain, starting with on_chain_start, ending with on_chain_end or on_chain_error.</li></ul><h3 id="_3-3-the-source-code-interpretation-of-chain" tabindex="-1"><a class="header-anchor" href="#_3-3-the-source-code-interpretation-of-chain" aria-hidden="true">#</a> 3.3. The Source Code Interpretation of Chain</h3><p>Source Code Entrance：Chain.invoke method</p><p>Source code Location：in langchain.chains.base.py</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">invoke</span><span class="token punctuation">(</span>
    self<span class="token punctuation">,</span>
    <span class="token builtin">input</span><span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">,</span>
    config<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>RunnableConfig<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Any<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">:</span>
    config <span class="token operator">=</span> ensure_config<span class="token punctuation">(</span>config<span class="token punctuation">)</span>
    callbacks <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;callbacks&quot;</span><span class="token punctuation">)</span>
    tags <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;tags&quot;</span><span class="token punctuation">)</span>
    metadata <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;metadata&quot;</span><span class="token punctuation">)</span>
    run_name <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;run_name&quot;</span><span class="token punctuation">)</span>
    include_run_info <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;include_run_info&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
    return_only_outputs <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;return_only_outputs&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

    inputs <span class="token operator">=</span> self<span class="token punctuation">.</span>prep_inputs<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span> <span class="token comment"># Validating and preparing the input for the chain, including adding memory to input</span>
    callback_manager <span class="token operator">=</span> CallbackManager<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>
        callbacks<span class="token punctuation">,</span>
        self<span class="token punctuation">.</span>callbacks<span class="token punctuation">,</span>
        self<span class="token punctuation">.</span>verbose<span class="token punctuation">,</span>
        tags<span class="token punctuation">,</span>
        self<span class="token punctuation">.</span>tags<span class="token punctuation">,</span>
        metadata<span class="token punctuation">,</span>
        self<span class="token punctuation">.</span>metadata<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    new_arg_supported <span class="token operator">=</span> inspect<span class="token punctuation">.</span>signature<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_call<span class="token punctuation">)</span><span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;run_manager&quot;</span><span class="token punctuation">)</span> <span class="token comment"># Checking for support for run_manager, that is, to see if the _call method has the relevant parameters</span>
    run_manager <span class="token operator">=</span> callback_manager<span class="token punctuation">.</span>on_chain_start<span class="token punctuation">(</span>
        dumpd<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">,</span>
        inputs<span class="token punctuation">,</span>
        name<span class="token operator">=</span>run_name<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        outputs <span class="token operator">=</span> <span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>_call<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> run_manager<span class="token operator">=</span>run_manager<span class="token punctuation">)</span> <span class="token comment"># Implementation by subclass of Chain</span>
            <span class="token keyword">if</span> new_arg_supported
            <span class="token keyword">else</span> self<span class="token punctuation">.</span>_call<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        run_manager<span class="token punctuation">.</span>on_chain_error<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token keyword">raise</span> e
    run_manager<span class="token punctuation">.</span>on_chain_end<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span>
    final_outputs<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>prep_outputs<span class="token punctuation">(</span> <span class="token comment"># Validating and preparing the output of the chain and saving the information of this run into memory</span>
        inputs<span class="token punctuation">,</span> outputs<span class="token punctuation">,</span> return_only_outputs
    <span class="token punctuation">)</span>
    <span class="token keyword">if</span> include_run_info<span class="token punctuation">:</span>
        final_outputs<span class="token punctuation">[</span>RUN_KEY<span class="token punctuation">]</span> <span class="token operator">=</span> RunInfo<span class="token punctuation">(</span>run_id<span class="token operator">=</span>run_manager<span class="token punctuation">.</span>run_id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> final_outputs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>source code logic of invoke method：</p><ul><li>prep_inputs: validating and preparing the input for the chain, including adding memory to input <ul><li>memory.load_memory_variables: related to memory</li></ul></li><li>callback.on_chain_start: related to callback</li><li><strong>self._call: Abstract method, implemented by subclasses of Chain</strong></li><li>callback.on_chain_error: related to callback</li><li>callback.on_chain_end: related to callback</li><li>prep_outputs: Validating and preparing the output of the chain and saving the information of this run into memory <ul><li>memory.save_context: related to memory，saving inputs and outputs into memory</li></ul></li></ul><h2 id="_4-agentexecutor" tabindex="-1"><a class="header-anchor" href="#_4-agentexecutor" aria-hidden="true">#</a> 4. AgentExecutor</h2><h3 id="_4-1-what" tabindex="-1"><a class="header-anchor" href="#_4-1-what" aria-hidden="true">#</a> 4.1. What</h3><ul><li>Subclass of Chain</li><li>Intelligent agents that can use tools, have memory, and make dynamic decisions</li><li>AgentExecutor = Agent + Memory + Tools</li><li>Carrying out multiple rounds of iterative execution in response to user questions, ultimately returning results</li></ul><h3 id="_4-2-attribute-of-agentexecutor" tabindex="-1"><a class="header-anchor" href="#_4-2-attribute-of-agentexecutor" aria-hidden="true">#</a> 4.2. Attribute of AgentExecutor</h3><ul><li>Memory：Inherits from the parent class Chain</li><li>Callbacks：Inherits from the parent class Chain</li><li>Agent：Deciding the behavior of each step in iterative execution</li><li>Tools：Tools that can be used</li><li>Max Iterations</li><li>Max Execution Time</li></ul><h3 id="_4-3-the-source-code-interpretation-of-agentexecutor" tabindex="-1"><a class="header-anchor" href="#_4-3-the-source-code-interpretation-of-agentexecutor" aria-hidden="true">#</a> 4.3. The Source Code Interpretation of AgentExecutor</h3><h4 id="step1-chain-invoke" tabindex="-1"><a class="header-anchor" href="#step1-chain-invoke" aria-hidden="true">#</a> Step1：Chain.invoke</h4><p>AgentExecutor does not override the invoke method and will call the parent class&#39;s invoke method.</p><h4 id="step2-agentexecutor-call-iterator-executing-iteratively-in-a-loop" tabindex="-1"><a class="header-anchor" href="#step2-agentexecutor-call-iterator-executing-iteratively-in-a-loop" aria-hidden="true">#</a> Step2：AgentExecutor._call(Iterator, executing iteratively in a loop)</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">_call</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        inputs<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        run_manager<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>CallbackManagerForChainRun<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;Run text through and get agent response.&quot;&quot;&quot;</span>
        <span class="token comment"># Construct a mapping of tool name to tool for easy lookup</span>
        name_to_tool_map <span class="token operator">=</span> <span class="token punctuation">{</span>tool<span class="token punctuation">.</span>name<span class="token punctuation">:</span> tool <span class="token keyword">for</span> tool <span class="token keyword">in</span> self<span class="token punctuation">.</span>tools<span class="token punctuation">}</span>
        <span class="token comment"># We construct a mapping from each tool to a color, used for logging.</span>
        color_mapping <span class="token operator">=</span> get_color_mapping<span class="token punctuation">(</span>
            <span class="token punctuation">[</span>tool<span class="token punctuation">.</span>name <span class="token keyword">for</span> tool <span class="token keyword">in</span> self<span class="token punctuation">.</span>tools<span class="token punctuation">]</span><span class="token punctuation">,</span> excluded_colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
        intermediate_steps<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>AgentAction<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token comment"># Let&#39;s start tracking the number of iterations and time elapsed</span>
        iterations <span class="token operator">=</span> <span class="token number">0</span>
        time_elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># We now enter the agent loop (until it returns something).</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>_should_continue<span class="token punctuation">(</span>iterations<span class="token punctuation">,</span> time_elapsed<span class="token punctuation">)</span><span class="token punctuation">:</span>
            next_step_output <span class="token operator">=</span> self<span class="token punctuation">.</span>_take_next_step<span class="token punctuation">(</span>
                name_to_tool_map<span class="token punctuation">,</span>
                color_mapping<span class="token punctuation">,</span>
                inputs<span class="token punctuation">,</span>
                intermediate_steps<span class="token punctuation">,</span>
                run_manager<span class="token operator">=</span>run_manager<span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>next_step_output<span class="token punctuation">,</span> AgentFinish<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> self<span class="token punctuation">.</span>_return<span class="token punctuation">(</span>
                    next_step_output<span class="token punctuation">,</span> intermediate_steps<span class="token punctuation">,</span> run_manager<span class="token operator">=</span>run_manager
                <span class="token punctuation">)</span>

            intermediate_steps<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>next_step_output<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>next_step_output<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                next_step_action <span class="token operator">=</span> next_step_output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                <span class="token comment"># See if tool should return directly</span>
                tool_return <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_tool_return<span class="token punctuation">(</span>next_step_action<span class="token punctuation">)</span>
                <span class="token keyword">if</span> tool_return <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_return<span class="token punctuation">(</span>
                        tool_return<span class="token punctuation">,</span> intermediate_steps<span class="token punctuation">,</span> run_manager<span class="token operator">=</span>run_manager
                    <span class="token punctuation">)</span>
            iterations <span class="token operator">+=</span> <span class="token number">1</span>
            time_elapsed <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>agent<span class="token punctuation">.</span>return_stopped_response<span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>early_stopping_method<span class="token punctuation">,</span> intermediate_steps<span class="token punctuation">,</span> <span class="token operator">**</span>inputs
        <span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_return<span class="token punctuation">(</span>output<span class="token punctuation">,</span> intermediate_steps<span class="token punctuation">,</span> run_manager<span class="token operator">=</span>run_manager<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>source code logic of _call method：</p><ul><li>while _should_continue：iterator <ul><li>_take_next_step：iterator method</li></ul></li></ul><h4 id="step3-iteration-stop-condition" tabindex="-1"><a class="header-anchor" href="#step3-iteration-stop-condition" aria-hidden="true">#</a> Step3：Iteration Stop Condition:</h4><ul><li>Reach Max Iterations：iterations&gt;=self.max_iterations</li><li>Reach Max Execution Time：time_elapsed&gt;=self.max_execution_time</li><li>Receive AgentFinish：isinstance(next_step_output, AgentFinish)</li></ul><h4 id="step4-take-next-step-iterator-method" tabindex="-1"><a class="header-anchor" href="#step4-take-next-step-iterator-method" aria-hidden="true">#</a> Step4：_take_next_step(iterator method)</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">_take_next_step</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        name_to_tool_map<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> BaseTool<span class="token punctuation">]</span><span class="token punctuation">,</span>
        color_mapping<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        inputs<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        intermediate_steps<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>AgentAction<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        run_manager<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>CallbackManagerForChainRun<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Union<span class="token punctuation">[</span>AgentFinish<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>AgentAction<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_consume_next_step<span class="token punctuation">(</span>
            <span class="token punctuation">[</span>
                a
                <span class="token keyword">for</span> a <span class="token keyword">in</span> self<span class="token punctuation">.</span>_iter_next_step<span class="token punctuation">(</span>
                    name_to_tool_map<span class="token punctuation">,</span>
                    color_mapping<span class="token punctuation">,</span>
                    inputs<span class="token punctuation">,</span>
                    intermediate_steps<span class="token punctuation">,</span>
                    run_manager<span class="token punctuation">,</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>source code logic of _take_next_step method：</p><ul><li>_iter_next_step <ul><li>agent.plan</li><li>tool.run</li></ul></li><li>_consume_next_step</li></ul><h4 id="step5-iter-next-step" tabindex="-1"><a class="header-anchor" href="#step5-iter-next-step" aria-hidden="true">#</a> Step5：_iter_next_step</h4><p>source code logic of _iter_next_step method：</p><ul><li><ol><li>Call an LLM to generate a plan (the plan is either AgentFinish or AgentAction).</li></ol></li><li><ol start="2"><li>If it&#39;s AgentFinish, return and end the process.</li></ol></li><li><ol start="3"><li>If it&#39;s AgentAction, call the corresponding tool.</li></ol></li><li><ol start="4"><li>Generate an observation using the corresponding tool.</li></ol></li><li><ol start="5"><li>Generate and return AgentStep(action=agent_action, observation=observation), and then end.</li></ol></li></ul><h4 id="step6-consume-next-step" tabindex="-1"><a class="header-anchor" href="#step6-consume-next-step" aria-hidden="true">#</a> Step6：_consume_next_step</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">_consume_next_step</span><span class="token punctuation">(</span>
    self<span class="token punctuation">,</span> values<span class="token punctuation">:</span> NextStepOutput
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Union<span class="token punctuation">[</span>AgentFinish<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>AgentAction<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> AgentFinish<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
        <span class="token keyword">return</span> values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token punctuation">(</span>a<span class="token punctuation">.</span>action<span class="token punctuation">,</span> a<span class="token punctuation">.</span>observation<span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> values <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> AgentStep<span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>source code logic of _consume_next_step method：</p><ul><li>If it&#39;s AgentFinish, return directly.</li><li>If it&#39;s AgentStep, then convert to List[Tuple[AgentAction, str]] and return.</li></ul><h3 id="_4-4-summary-of-the-agentexecutor-source-code" tabindex="-1"><a class="header-anchor" href="#_4-4-summary-of-the-agentexecutor-source-code" aria-hidden="true">#</a> 4.4. Summary of the AgentExecutor Source Code</h3><figure><img src="`+p+'" alt="AgentExecutor Source Code" tabindex="0" loading="lazy"><figcaption>AgentExecutor Source Code</figcaption></figure>',82);function r(d,k){return s(),t("div",null,[c,e(" more "),u])}const b=a(l,[["render",r],["__file","langchain_source_code.html.vue"]]);export{b as default};
