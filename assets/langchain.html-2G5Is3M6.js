import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as l,c as r,f as c,a as n,b as a,d as t,e}from"./app-1nBkCHNn.js";const p="/blog/assets/LangChain_Architecture_Diagram-WCASrFus.png",u={},d=e('<h1 id="understanding-langchain-in-one-article-building-powerful-applications-with-large-language-models" tabindex="-1"><a class="header-anchor" href="#understanding-langchain-in-one-article-building-powerful-applications-with-large-language-models" aria-hidden="true">#</a> Understanding LangChain in One Article: Building Powerful Applications with Large Language Models</h1><blockquote><p>Starting with the architecture diagram, step by step, this article helps you understand all aspects of LangChain.</p></blockquote><ul><li><ol><li>What is LangChain?</li></ol></li><li><ol start="2"><li>What Information Does the LangChain Architecture Diagram Tell Us?</li></ol></li><li><ol start="3"><li>Essential Core Modules You Need to Know</li></ol></li><li><ol start="4"><li>Experience the Function of Each Module Through Simple Example Code</li></ol></li></ul>',3),h=e('<h2 id="_1-what-is-langchain" tabindex="-1"><a class="header-anchor" href="#_1-what-is-langchain" aria-hidden="true">#</a> 1. What is LangChain?</h2><p>LangChain is an open-source framework for quickly building LLM (Large Language Model) applications.</p><p>It abstracts some common behaviors used in LLMs, encapsulates them as APIs, unifies the usage methods, and simplifies the development process.</p><h2 id="_2-what-information-does-the-langchain-architecture-diagram-tell-us" tabindex="-1"><a class="header-anchor" href="#_2-what-information-does-the-langchain-architecture-diagram-tell-us" aria-hidden="true">#</a> 2. What Information Does the LangChain Architecture Diagram Tell Us?</h2><p>The architecture diagram of LangChain is as follows:</p><figure><img src="'+p+'" alt="LangChain Architecture Diagram" tabindex="0" loading="lazy"><figcaption>LangChain Architecture Diagram</figcaption></figure><p>What information can we obtain from the architecture diagram?</p><h3 id="_2-1-the-ecosystem-of-langchain" tabindex="-1"><a class="header-anchor" href="#_2-1-the-ecosystem-of-langchain" aria-hidden="true">#</a> 2.1. The Ecosystem of LangChain</h3><p>The ecosystem of LangChain, besides LangChain itself, also includes LangServe and LangSmith.</p><ul><li>LangChain focuses on development</li><li>LangServe is used for deployment</li><li>LangSmith serves as an observability platform</li></ul><p>Note: For beginners, LangServe and LangSmith can be initially overlooked. This article focuses only on LangChain itself.</p><h3 id="_2-2-development-language-of-langchain-source-code" tabindex="-1"><a class="header-anchor" href="#_2-2-development-language-of-langchain-source-code" aria-hidden="true">#</a> 2.2. Development Language of LangChain Source Code</h3><p>The source code of LangChain is developed in two languages: Python and JavaScript.</p>',13),m={href:"https://github.com/langchain-ai/langchain",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/langchain-ai/langchainjs",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>Note: This article will focus on LangChain&#39;s Python source code.</p><h3 id="_2-3-organization-of-langchain-s-source-code" tabindex="-1"><a class="header-anchor" href="#_2-3-organization-of-langchain-s-source-code" aria-hidden="true">#</a> 2.3. Organization of LangChain&#39;s Source Code</h3><p>The libs directory in the LangChain source code is the primary directory, containing three main packages: LangChain, LangChain-Community, and LangChain-Core.</p><ul><li>LangChain-Core package: The foundation of the framework</li><li>LangChain-Community package: Integrated components/third-party components</li><li>LangChain package: Core components. The contents of both LangChain-Core and LangChain-Community packages are imported into this LangChain package. LangChain package serves as the entry point, calling components from both LangChain-Core and LangChain-Community packages</li></ul><h2 id="_3-essential-core-modules-you-need-to-know" tabindex="-1"><a class="header-anchor" href="#_3-essential-core-modules-you-need-to-know" aria-hidden="true">#</a> 3. Essential Core Modules You Need to Know</h2><h3 id="_3-1-model-i-o" tabindex="-1"><a class="header-anchor" href="#_3-1-model-i-o" aria-hidden="true">#</a> 3.1. Model I/O</h3><p>Usage: Abstracts interaction with LLM, divided into Prompts module, Language Model module (LLM module), and Output Parsers module.</p><h4 id="_3-1-1-prompts" tabindex="-1"><a class="header-anchor" href="#_3-1-1-prompts" aria-hidden="true">#</a> 3.1.1. Prompts</h4><p>Usage: Uses Prompt templates as inputs for LLM.</p><h4 id="_3-1-2-language-model-llm" tabindex="-1"><a class="header-anchor" href="#_3-1-2-language-model-llm" aria-hidden="true">#</a> 3.1.2. Language Model(LLM)</h4><p>Usage: An abstraction of the language model, calls LLM through a universal interface.</p><h4 id="_3-1-3-output-parsers" tabindex="-1"><a class="header-anchor" href="#_3-1-3-output-parsers" aria-hidden="true">#</a> 3.1.3. Output Parsers</h4><p>Usage: Parses the output of LLM, able to parse into different formats.</p><h3 id="_3-2-chains" tabindex="-1"><a class="header-anchor" href="#_3-2-chains" aria-hidden="true">#</a> 3.2. Chains</h3><p>Usage: Combines multiple components to create a single cohesive task. Multiple Chains can be nested or combined with other components to build more complex Chains.</p><h3 id="_3-3-agents" tabindex="-1"><a class="header-anchor" href="#_3-3-agents" aria-hidden="true">#</a> 3.3. Agents</h3><p>Usage: Based on user input, plans and makes decisions using LLM. It can divide tasks into smaller parts or decide the behavior of each step, integrating various tools and dynamically choosing whether to use a tool and which tool to use.</p><p>Key Concepts:</p><ul><li><strong>Agent</strong>: An Agent makes a decision based on the current situation. It dynamically decides whether to respond directly or use a tool, and if using a tool, which one to choose.</li><li><strong>AgentExecutor</strong>: Essentially a Chain, AgentExecutor is an iterator for the Agent. It repeatedly calls the Agent to make decisions until a satisfactory result is achieved or a predefined limit is reached.</li></ul><p>AgentExecutor can be seen as an intelligent entity, and Agent is like the brain of this entity. When a user asks a question, AgentExecutor thinks once or multiple times, i.e., it calls the Agent to make decisions until it reaches a satisfactory result or the predefined limit.</p><h3 id="_3-4-retrieval" tabindex="-1"><a class="header-anchor" href="#_3-4-retrieval" aria-hidden="true">#</a> 3.4. Retrieval</h3><p>Usage: An abstraction of integrated data sources, including data loading, processing, vectorization, storage, and retrieval, allowing users to have their knowledge base.</p><h3 id="_3-5-callbacks" tabindex="-1"><a class="header-anchor" href="#_3-5-callbacks" aria-hidden="true">#</a> 3.5. Callbacks</h3><p>Usage: Records relevant information during the execution of a Chain, typically used for logging, recording intermediate steps, recording token usage for billing, and controlling flow rate.</p><h3 id="_3-6-memory" tabindex="-1"><a class="header-anchor" href="#_3-6-memory" aria-hidden="true">#</a> 3.6. Memory</h3><p>Usage: Records historical conversations to supplement historical context in subsequent dialogues, enabling the model to have continuous conversations.</p><h2 id="_4-experience-the-function-of-each-module-through-simple-example-code" tabindex="-1"><a class="header-anchor" href="#_4-experience-the-function-of-each-module-through-simple-example-code" aria-hidden="true">#</a> 4. Experience the Function of Each Module Through Simple Example Code</h2><p>Note: Focus on the code flow rather than the details.</p><h3 id="_4-1-application-of-model-i-o-and-chains-module-combining-prompt-llm-and-output-parser-into-a-chain" tabindex="-1"><a class="header-anchor" href="#_4-1-application-of-model-i-o-and-chains-module-combining-prompt-llm-and-output-parser-into-a-chain" aria-hidden="true">#</a> 4.1. Application of Model I/O and Chains Module: Combining Prompt, LLM, and Output Parser into a Chain</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>prompts <span class="token keyword">import</span> ChatPromptTemplate
<span class="token keyword">from</span> langchain_openai <span class="token keyword">import</span> ChatOpenAI
<span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>output_parsers <span class="token keyword">import</span> StrOutputParser

<span class="token comment"># set Prompt</span>
prompt <span class="token operator">=</span> ChatPromptTemplate<span class="token punctuation">.</span>from_messages<span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;You are world class technical documentation writer.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{input}&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># set LLM</span>
llm <span class="token operator">=</span> ChatOpenAI<span class="token punctuation">(</span>openai_api_key<span class="token operator">=</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># set Output Parser</span>
output_parser <span class="token operator">=</span> StrOutputParser<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># combining Prompt, LLM, and Output Parser into a Chain</span>
chain <span class="token operator">=</span> prompt <span class="token operator">|</span> llm <span class="token operator">|</span> output_parser

<span class="token comment"># invoke Chain</span>
chain<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;how can langsmith help with testing?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-application-of-retrieval-module-building-a-knowledge-base-and-retrieving-relevant-information-as-part-of-the-prompt" tabindex="-1"><a class="header-anchor" href="#_4-2-application-of-retrieval-module-building-a-knowledge-base-and-retrieving-relevant-information-as-part-of-the-prompt" aria-hidden="true">#</a> 4.2. Application of Retrieval Module: Building a knowledge base and retrieving relevant information as part of the Prompt</h3><ul><li>This case demonstrates the nested combination of Chains</li><li>The Retrieval Chain receives user input, searches for relevant documents, then combines these documents with the original user input to form a Prompt, which is then passed to the large language model (LLM) to answer the original question</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain_community<span class="token punctuation">.</span>document_loaders <span class="token keyword">import</span> WebBaseLoader
<span class="token keyword">from</span> langchain_openai <span class="token keyword">import</span> OpenAIEmbeddings
<span class="token keyword">from</span> langchain_community<span class="token punctuation">.</span>vectorstores <span class="token keyword">import</span> FAISS
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>text_splitter <span class="token keyword">import</span> RecursiveCharacterTextSplitter
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>chains<span class="token punctuation">.</span>combine_documents <span class="token keyword">import</span> create_stuff_documents_chain
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>chains <span class="token keyword">import</span> create_retrieval_chain

<span class="token comment"># data loader</span>
loader <span class="token operator">=</span> WebBaseLoader<span class="token punctuation">(</span><span class="token string">&quot;https://docs.smith.langchain.com/overview&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># load data</span>
docs <span class="token operator">=</span> loader<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># text splitter</span>
text_splitter <span class="token operator">=</span> RecursiveCharacterTextSplitter<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># split text</span>
documents <span class="token operator">=</span> text_splitter<span class="token punctuation">.</span>split_documents<span class="token punctuation">(</span>docs<span class="token punctuation">)</span>

<span class="token comment"># embedding model</span>
embeddings <span class="token operator">=</span> OpenAIEmbeddings<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># vectorize documents and store them in a vector database</span>
vector <span class="token operator">=</span> FAISS<span class="token punctuation">.</span>from_documents<span class="token punctuation">(</span>documents<span class="token punctuation">,</span> embeddings<span class="token punctuation">)</span>

<span class="token comment"># use the vector database as a retriever</span>
retriever <span class="token operator">=</span> vector<span class="token punctuation">.</span>as_retriever<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># set Prompt</span>
prompt <span class="token operator">=</span> ChatPromptTemplate<span class="token punctuation">.</span>from_template<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;Answer the following question based only on the provided context:
&lt;context&gt;
{context}
&lt;/context&gt;
Question: {input}&quot;&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># combine LLM with Prompt into a Chain, where llm is from the first example.</span>
document_chain <span class="token operator">=</span> create_stuff_documents_chain<span class="token punctuation">(</span>llm<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span>

<span class="token comment"># combine the retriever and other Chains into a searchable Chain</span>
retrieval_chain <span class="token operator">=</span> create_retrieval_chain<span class="token punctuation">(</span>retriever<span class="token punctuation">,</span> document_chain<span class="token punctuation">)</span>

<span class="token comment"># invoke retrieval_chain</span>
response <span class="token operator">=</span> retrieval_chain<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;how can langsmith help with testing?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># output result</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">&quot;answer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-application-of-agents-module-using-the-ability-to-retrieve-from-a-knowledge-base-search-capabilities-and-other-skills-as-tools-for-agentexecutor-which-decomposes-the-user-s-question-into-multiple-steps-with-the-agent-deciding-what-to-do-at-each-step" tabindex="-1"><a class="header-anchor" href="#_4-3-application-of-agents-module-using-the-ability-to-retrieve-from-a-knowledge-base-search-capabilities-and-other-skills-as-tools-for-agentexecutor-which-decomposes-the-user-s-question-into-multiple-steps-with-the-agent-deciding-what-to-do-at-each-step" aria-hidden="true">#</a> 4.3. Application of Agents Module: Using the ability to retrieve from a knowledge base, search capabilities, and other skills as tools for AgentExecutor, which decomposes the user&#39;s question into multiple steps, with the Agent deciding what to do at each step</h3><ul><li>A retriever can be used as a tool</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>retriever <span class="token keyword">import</span> create_retriever_tool
<span class="token keyword">from</span> langchain_community<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>tavily_search <span class="token keyword">import</span> TavilySearchResults
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>agents <span class="token keyword">import</span> create_openai_functions_agent
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>agents <span class="token keyword">import</span> AgentExecutor
<span class="token keyword">from</span> langchain <span class="token keyword">import</span> hub

<span class="token comment"># retrieval tool (retrieve from the vector database), where retriever is from the second example</span>
retriever_tool <span class="token operator">=</span> create_retriever_tool<span class="token punctuation">(</span>
    retriever<span class="token punctuation">,</span>
    <span class="token string">&quot;langsmith_search&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Search for information about LangSmith. For any questions about LangSmith, you must use this tool!&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment"># search tool (browser search for real-time information)</span>
search_tool <span class="token operator">=</span> TavilySearchResults<span class="token punctuation">(</span>tavily_api_key<span class="token operator">=</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># list of tools</span>
tools <span class="token operator">=</span> <span class="token punctuation">[</span>retriever_tool<span class="token punctuation">,</span> search_tool<span class="token punctuation">]</span>

<span class="token comment"># obtain predefined prompts from the LangChain hub</span>
prompt <span class="token operator">=</span> hub<span class="token punctuation">.</span>pull<span class="token punctuation">(</span><span class="token string">&quot;hwchase17/openai-functions-agent&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># set Agent, where llm is from the first example, and tools are used to inform the Agent about the available tools and their respective functions</span>
agent <span class="token operator">=</span> create_openai_functions_agent<span class="token punctuation">(</span>llm<span class="token punctuation">,</span> tools<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span>

<span class="token comment"># set AgentExecutor, to decompose tasks into multiple steps, with each step decided by the agent on what to do</span>
agent_executor <span class="token operator">=</span> AgentExecutor<span class="token punctuation">(</span>agent<span class="token operator">=</span>agent<span class="token punctuation">,</span> tools<span class="token operator">=</span>tools<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># query langsmith</span>
agent_executor<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;how can langsmith help with testing?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># query weather</span>
agent_executor<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;what is the weather in SF?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function k(b,f){const s=i("ExternalLinkIcon");return l(),r("div",null,[d,c(" more "),h,n("ul",null,[n("li",null,[a("The GitHub repository for the Python source code:"),n("a",m,[a("https://github.com/langchain-ai/langchain"),t(s)])]),n("li",null,[a("The GitHub repository for the JavaScript source code:"),n("a",g,[a("https://github.com/langchain-ai/langchainjs"),t(s)])])]),v])}const w=o(u,[["render",k],["__file","langchain.html.vue"]]);export{w as default};
