import{_ as a,a as t,b as n}from"./012_cod-Ha5fHohZ.js";import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o,c as s,f as u,a as i,b as e,d as c,e as h}from"./app-fhreafr2.js";const p={},m=i("h1",{id:"提示工程-prompt-engineering",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#提示工程-prompt-engineering","aria-hidden":"true"},"#"),e(" 提示工程 Prompt Engineering")],-1),v=i("blockquote",null,[i("p",null,"不管用什么 AI 工具，都是要把 LLM 用起来，核心点是写好 Prompt")],-1),x=i("ul",null,[i("li",null,"提示词的构成"),i("li",null,"两大Prompt原则"),i("li",null,"迭代优化Prompt"),i("li",null,"Prompt技术")],-1),g=h('<h2 id="_1-提示词的构成" tabindex="-1"><a class="header-anchor" href="#_1-提示词的构成" aria-hidden="true">#</a> 1. 提示词的构成</h2><ul><li>指示（Instruction）: 描述要让模型做什么？ <ul><li>人设：角色，行为，技能擅长点</li><li>任务</li><li>注意点：能做什么，不能做什么</li></ul></li><li>上下文（Context）: <ul><li>给出与任务相关的背景信息</li><li>Retrieval: RAG场景中检索出的信息</li><li>History: 多轮对话的历史对话</li></ul></li><li>例子（Examples）: 给出一些例子，让模型知道怎么回复</li><li>输入（Input）: 任务的输入信息 Query</li><li>输出（Output）: 输出的格式，想要什么形式的输出</li></ul><h2 id="_2-两大prompt原则" tabindex="-1"><a class="header-anchor" href="#_2-两大prompt原则" aria-hidden="true">#</a> 2. 两大Prompt原则</h2><h3 id="_2-1-原则1-编写明确和具体的指令" tabindex="-1"><a class="header-anchor" href="#_2-1-原则1-编写明确和具体的指令" aria-hidden="true">#</a> 2.1. 原则1：编写明确和具体的指令</h3><ul><li>编写明确和具体的指令，尽量不要让LLM去猜测，告诉它细节 <ul><li>技巧1：使用分隔符或标题清楚地指示输入的不同部分 <ul><li>使得指令清晰明了，避免指令冲突</li><li>可以避免指令注入，如用户输入了“忘记之前指令”等内容</li><li>examples: <ul><li>titles: ###</li><li>Triple quotes:&quot;&quot;&quot;</li><li>Triple backticks:```</li><li>Triple dashes:---</li><li>Angle brackets: &lt;&gt;</li><li>xml tags:&lt;tag&gt;&lt;/tag&gt;</li></ul></li></ul></li><li>技巧2：要求结构化输出 <ul><li>例如 <ul><li>html</li><li>json</li><li>markdown</li></ul></li></ul></li><li>技巧3：Few-shot prompting <ul><li>提供成功执行任务的示例</li><li>想要得到什么结果（验收标准）</li></ul></li></ul></li></ul><figure><img src="'+a+'" alt="避免指令注入" tabindex="0" loading="lazy"><figcaption>避免指令注入</figcaption></figure><h3 id="_2-2-原则2-给模型时间去思考" tabindex="-1"><a class="header-anchor" href="#_2-2-原则2-给模型时间去思考" aria-hidden="true">#</a> 2.2. 原则2：给模型时间去思考</h3><ul><li>给模型时间去思考 <ul><li>技巧1：给出完成一个任务的每个具体步骤 <ul><li>example: <ul><li>step 1:... step 2:... step N:...</li></ul></li></ul></li><li>技巧2：引导模型将任务拆解，列出思考过程，一步步思考</li></ul></li></ul><h2 id="_3-迭代优化prompt" tabindex="-1"><a class="header-anchor" href="#_3-迭代优化prompt" aria-hidden="true">#</a> 3. 迭代优化Prompt</h2><blockquote><p>好的Prompt需要不断调优</p></blockquote><blockquote><p>没有一个适合所有场景的完美Prompt，要针对特定场景反复尝试优化</p></blockquote><ul><li>尝试：先写一份Prompt，看看会发生什么</li><li>分析：进行误差分析，找出没有达到预期效果的原因 <ul><li>是否提示不够清晰</li><li>是否没有给模型足够的时间思考</li></ul></li><li>优化：逐步改进Prompt以更接近所需的结果，甚至可以改变解决问题的思路或方法</li><li>评估：根据大量案例进行评估</li><li>重复：反复循环多次，直到找到适合的Prompt</li></ul><figure><img src="'+t+`" alt="迭代优化Prompt" tabindex="0" loading="lazy"><figcaption>迭代优化Prompt</figcaption></figure><h2 id="_4-prompt技术" tabindex="-1"><a class="header-anchor" href="#_4-prompt技术" aria-hidden="true">#</a> 4. Prompt技术</h2><h3 id="_4-1-xxx-shot-提供例子" tabindex="-1"><a class="header-anchor" href="#_4-1-xxx-shot-提供例子" aria-hidden="true">#</a> 4.1. xxx-shot：提供例子</h3><p>通过少量例子，来调教llm</p><ul><li>zero-shot learning：不给任何例子</li><li>one-shot learning：只给一个例子</li><li>few-shot learning：给多个例子</li></ul><p>思考：</p><ul><li>需要提供多少例子？ 提倡例子不要超过5-10个</li><li>如果给了很多例子都不起作用怎么办？考虑微调，微调也可以看作是用很多例子来改变llm的行为</li></ul><h3 id="_4-2-思维链-chain-of-thoughts-cot" tabindex="-1"><a class="header-anchor" href="#_4-2-思维链-chain-of-thoughts-cot" aria-hidden="true">#</a> 4.2. 思维链（Chain of Thoughts，CoT）</h3><p>告诉大模型一步一步是怎么思考分析的</p><p>引导大模型一步步思考，把大问题拆解为一个个小问题</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Let&#39;s think step by step.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>让我们一步一步地思考
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要一定推理的问题，这个比较重要</p><h3 id="_4-3-few-shot-cot" tabindex="-1"><a class="header-anchor" href="#_4-3-few-shot-cot" aria-hidden="true">#</a> 4.3. Few-shot + CoT</h3><p>对于需要推理的示例，也就是不是一眼就能看懂的，最好给出分析过程，多做一些引导，而不光只给出结果，可以提升点效果</p><h3 id="_4-4-自我一致性" tabindex="-1"><a class="header-anchor" href="#_4-4-自我一致性" aria-hidden="true">#</a> 4.4. 自我一致性</h3><p>Few-shot + CoT + 多路径推理一致</p><p>采样多个不同的推理路径，并使用生成结果选择最一致的答案</p><h3 id="_4-5-草稿链-chain-of-draft-cod" tabindex="-1"><a class="header-anchor" href="#_4-5-草稿链-chain-of-draft-cod" aria-hidden="true">#</a> 4.5. 草稿链（Chain of Draft，CoD）</h3><figure><img src="`+n+`" alt="CoD" tabindex="0" loading="lazy"><figcaption>CoD</figcaption></figure><p>CoD 在 CoT 基础上每个思考步骤不得超过 x 个 token，效果竟然很好，还节省成本</p><p>由 Zoom 研究团队提出，灵感来源于人类在解决复杂问题时仅记录关键信息的简洁思维模式，旨在提高推理效率并显著降低计算成本，与 CoT 相比，显著降低了 Token 使用量与延迟</p><p>Paper: https://arxiv.org/pdf/2502.18600</p><h2 id="_5-积累" tabindex="-1"><a class="header-anchor" href="#_5-积累" aria-hidden="true">#</a> 5. 积累</h2><ul><li>Prompt中变化的部分用变量来表示 <ul><li>用分隔符或标题将内容分为几个部分，有条理，使模型更容易理解</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{instruction}

### 上下文
&quot;&quot;&quot;{context}&quot;&quot;&quot;

### 问题
&quot;&quot;&quot;{query}&quot;&quot;&quot;

### 输出格式
&quot;&quot;&quot;{output}&quot;&quot;&quot;

### 示例
&quot;&quot;&quot;{examples}&quot;&quot;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>想要降低幻觉，可以在Instruction中给出这方面提示</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>如果不确定答案，请回答“不确定答案”。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>用 “你” 来设定模型角色和行为</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>你是xxx专家，擅长xxx。

你在xxx方面有以下技能：
1.xxx
2.xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对话流程设定，不局限于一轮对话，例如模拟面试，设定接下来对话的一系列流程</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>### 开始对话前询问
1.要求用户提供简历
2.要求用户提供正在面试的职位
3.要求用户提供面试官的角色
4.询问用户想问多少问题 
5. ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-优质prompt" tabindex="-1"><a class="header-anchor" href="#_6-优质prompt" aria-hidden="true">#</a> 6. 优质Prompt</h2>`,45),b={href:"https://smith.langchain.com/hub",target:"_blank",rel:"noopener noreferrer"},_=i("h2",{id:"_7-参考",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_7-参考","aria-hidden":"true"},"#"),e(" 7. 参考")],-1),f=i("p",null,"https://www.promptingguide.ai/",-1);function q(P,k){const l=d("ExternalLinkIcon");return o(),s("div",null,[m,v,x,u(" more "),g,i("p",null,[i("a",b,[e("LangChain Hub Prompt 参考：https://smith.langchain.com/hub"),c(l)])]),_,f])}const L=r(p,[["render",q],["__file","012_prompt_engineering.html.vue"]]);export{L as default};
